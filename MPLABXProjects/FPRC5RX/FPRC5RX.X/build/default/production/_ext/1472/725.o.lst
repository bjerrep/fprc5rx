MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;-----------------------------------------------------------------------
                      00002 ; 725.asm MkII
                      00003 ; 16 Channel Field Programmable RC5 Reciever
                      00004 ;-----------------------------------------------------------------------
                      00005 ; 001 06-06-02 00:31    Initial version
                      00006 ; 034 29-07-03 22:50    BiToggle and radio mode bugfixes. www release.
                      00007 ;
                      00008 ; Bugs :
                      00009 ; #001 02/12/04 Status : OPEN
                      00010 ;                               If power is removed while a monostable is high it will be
                      00011 ;                               recovered at power up.
                      00012 ; #002          OPEN
                      00013 ;                               Check that all i/o changes get a delayd save request
                      00014 ;
                      00015 
                      00016 
  00000001            00017 true                                    equ     1
  00000000            00018 false                                   equ     0
                      00019 
                      00020         ;;; Main build constants
                      00021         ;;; -------------------------------------------------------------
  00000024            00022 VERSION                                 equ     .036            ; Version id
  01312D00            00023 XTAL                                    equ     .20000000       ; in Hz
                      00024 
  00000001            00025 RELEASE                                 equ     1
  00000000            00026 STD_ICEBREAKER                          equ     0
  00000000            00027 SINGLE_PIN_ICEBREAKER           equ     0
                      00028 
  00000000            00029 IR_RECIEVER_ACTIVE_HIGH         equ     0
  00000001            00030 MODE_TABLE_CONF                         equ     .1
                      00031 
  00000001            00032 DELAYED_SAVE                            equ     1                       ; FIXIT : Make permanent
  00000064            00033 DELAYED_COUNT                           equ     .100
                      00034 
  00000001            00035 DELAYED_SETS                            equ     1
                      00036 
                      00037         if RELEASE == true
Message[301]: MESSAGE: (INFO: Release build)
                      00038                         messg "INFO: Release build"
                      00039         ifdef __16F877
                      00040         list p = 16f877
                      00041         endif
                      00042         ifdef __16F873
                      00043         list p = 16f873
                      00044         endif
                      00045                         
  00000000            00046 ICE                                                     set     false
  00000000            00047 RC5_NO_ERROR_CHECK                      equ     false
  00000000            00048 DEBUG_ISR_ALIVE                         equ     false
  00000000            00049 IR_DEBUG_SAMPLE_TIME            equ     false
  00000002            00050 IR_MIN_NOF_CODES                equ .2
  00000001            00051 FLASH_TABLE                                     equ     1
  00000001            00052 STANDARD_PINS                           equ     1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000000            00053 ALTERNATIVE_PINS                        equ     0
  00000000            00054 SINGLE_PIN                                      equ     0
                      00055         endif
                      00056 
                      00057 
                      00058         if STD_ICEBREAKER == true
                      00059                 messg "INFO: Debug ICE build"
                      00060                         list p = 16f877
                      00061 ICE                                                     set     true
                      00062 SERCOM_DEBUG_ENABLED            set     false
                      00063 RC5_NO_ERROR_CHECK                      equ     false
                      00064 DEBUG_ISR_ALIVE                         equ     false           ; Toggles led at each pass -> led should
                             run at 50:50
                      00065 IR_DEBUG_SAMPLE_TIME            equ     false           ; Pulses at IR sample times for scope (I think)
                      00066 IR_MIN_NOF_CODES                equ .2
                      00067 FLASH_TABLE                                     equ     1
                      00068 ALTERNATIVE_PINS                        equ     1                       ; Completely in the wild
                      00069 #define                                         REMOTE_DECODER_TRAPS_ON
                      00070         endif
                      00071 
                      00072         ; SINGLE_PIN_ICEBREAKER
                      00073         ; ---------------------------------------
                      00074         if SINGLE_PIN_ICEBREAKER == true
                      00075                 messg "INFO: Debug ICE build"
                      00076                         list p = 16f873
                      00077 ICE                                                     set     true
                      00078 SERCOM_DEBUG_ENABLED            set     false
                      00079 RC5_NO_ERROR_CHECK                      equ     false
                      00080 DEBUG_ISR_ALIVE                         equ     false           ; Toggles led at each pass -> led should
                             run at 50:50
                      00081 IR_DEBUG_SAMPLE_TIME            equ     false           ; Pulses at IR sample times for scope (I think)
                      00082 IR_MIN_NOF_CODES                equ .2
                      00083 FLASH_TABLE                                     equ     1
                      00084 STANDARD_PINS                           equ     0
                      00085 ALTERNATIVE_PINS                        equ     0                       ; Completely in the wild
                      00086 SINGLE_PIN                                      equ     1                       ; Completely in the wild
                      00087 #define                                         REMOTE_DECODER_TRAPS_ON
                      00088         endif
                      00089 
                      00090 
                      00091 
                      00092                 ifdef __16F873
                      00093                         include "P16F873.inc"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F873 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00500         LIST
                      00094                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00095                 ifdef __16F877
                      00096                         include "P16F877.inc"
                      00097                 endif
                      00098 
                      00099 
                      00100          ; Custom include files
                      00101          ;
                      00102                         include "PICDELAY.inc"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; P I C D E L A Y . I N C
                      00004 ; ------------------------------------------------------------------------
                      00005 ;
                      00006 ; Blocking delay macro where the timing are adjusted for xtal frequency.
                      00007 ;
                      00008 ; A XTAL definition must exist for processor frequency in MHz in order to
                      00009 ; make the timing calculations. The watchdog timer is kept cleared.
                      00010 ; The macro(s) are not intended for inlining, but should be made as subrutines.
                      00011 ; (i.e with a label before and a return statement after the macro)
                      00012 ; NOTE : If rom space is an issue then this macro won't do it better....
                      00013 ; ToDo : Not especially well checked for accuracy, but at least it do tend
                      00014 ; to make things slower.
                      00015 ;
                      00016 ; Version history
                      00017 ; 001  2004-08-19  Initial version.
                      00018 ; 002
                      00019 ; ========================================================================
                      00020 ;
                      00106         list
  00000002            00103 NOF_PROGRAM_PAGES       equ     2
                      00104                         include "COMMON.inc"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; COMMON.INC
                      00004 ; Matching at least the processors 16F84 16C73 16F873
                      00005 ; Version history
                      00006 ; 001   Initial merge of old include files.
                      00007 ; ========================================================================
                      00008 ;
Message[301]: MESSAGE: (Processor target is 16f873)
                      00545                 list
                      00546 
                      00105                         include "16F873.inc"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; 1 6 F 8 7 3 . I N C                              Claus Bjerre 2002-04-22
                      00004 ;
                      00005 ; Version history
                      00006 ; 001   Initial merge of old include files.
                      00007 ; ========================================================================
                      00008 ;
                      00033         LIST
                      00106 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00107 
                      00108                 ; PIC configuration settings
                      00109 
2007   3F36           00110                         __CONFIG        _HS_OSC & _WDT_ON & _PWRTE_ON & _WRT_ENABLE_ON & _DEBUG_OFF & _L
                            VP_OFF & _BODEN_OFF
                      00111 
                      00112 
                      00113                         ; Custom macro libraries
                      00114                         ; ----------------------
                      00115                         ;
                      00116 
                      00117                         include "RC5.asm"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; R C 5 . A S M                                    Claus Bjerre 2002-05-28
                      00004 ;
                      00005 ; Statemachine for decoding of Phillips RC5, Sony Sircs & Panasonic REC-80
                      00006 ; infrared remote signals.
                      00007 ; Originally a strict sampling RC5 decoder only, Sony and Panasonic have been
                      00008 ; added later leaving the implementation in a mess. Not suitable for futher
                      00009 ; development.
                      00010 ;
                      00011 ; Version history
                      00012 ; 001   Initial.
                      00013 ; ========================================================================
                      00014 ; ToDo : Sony code must be reversed
                      00015 ;
                      00016 
                      01219                 LIST
                      01220 
                      01221 
                      01222 
                      01223 
                      01224 
                      01225 
                      01226 
                      01227 
                      01228 
                      01229 
                      01230 
                      01231 
                      01232 
                      01233 
                      01234 
                      00118 
                      00119                         ; i2c
                      00120                         ; ----------------------
                      00121                         ;
                      00122                         include "I2C_DEFS.inc"
                      00001 ;;;-----------------------------------------------------------------------
                      00002 ;;; i2c_defs.inc
                      00003 ;;; Global defines for i2c library file "i2c.inc" and a common exchange
                      00004 ;;; file for device adresses.
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00005 ;;;-----------------------------------------------------------------------
                      00006 ;;; Author  : Claus Bjerre
                      00007 ;;; Target  : PIC16F87x series.
                      00008 ;;; Licence : Free for noncommercial use. Not free for commercial use,
                      00009 ;;; Version : 1
                      00010 ;;; Contact : -
                      00011 ;;;-----------------------------------------------------------------------
                      00012 ;;; See i2c.inc
                      00013 ;;;
                      00014 ;;; I2C_Status are I2C_Public are flag registers that might share same
                      00015 ;;  physical adress.
                      00016 ;;;
                      00017 ;;; Remember to have SDA and SCL tris'd to inputs.
                      00018 ;;;-----------------------------------------------------------------------
                      00019 ;;;
                      00020 ;;; History
                      00021 ;;; 001 27-09-02        Initial version
                      00022 ;;;
                      00023 ;;;-----------------------------------------------------------------------
                      00024 
                      00025 ; I2C_Status
  00000000            00026 I2C_ERROR_NACK                  equ     BIT0
                      00027 
                      00028 ; I2C_Public
  00000001            00029 I2C_RX_COMPLETE                 equ     BIT1
  00000002            00030 I2C_TX_START                    equ     BIT2
                      00031 
                      00032 ; Addresses
  00000034            00033 I2C_725_BROADCAST_ADDRESS       equ     0x34    ;12
                      00034 
                      00035 ; Commands (remember to update I2C_GetNofBytesFromCommand() in i2c.inc)
                      00036 
  00000000            00037 I2C_725_CMD_LEVEL_LOW           equ     .0
  00000001            00038 I2C_725_CMD_LEVEL_HIGH          equ     .1
  00000003            00039 I2C_725_LEVEL_CHANGED_CMD_LEN   equ     .3
                      00040 
                      00041 
                      00123 #define I2C_MASTER_ASYNC
                      00124 
                      00125 
                      00126 ;;;-----------------------------------------------------------------------
                      00127 ;;; M E M O R Y  M A P   -   R A M
                      00128 ;;;-----------------------------------------------------------------------
                      00129 ;;; Words are low byte at low adress
                      00130 
                      00131 
  00000020            00132 ram                                             set     RAM_BANK0_START
  00000020            00133 t1                                              equ     ram + .0
  00000021            00134 t2                                              equ     ram + .1
  00000022            00135 t3                                              equ     ram + .2
                      00136 
  00000023            00137 RealtimeTickCounter     equ     ram + .3
                      00138 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000024            00139 Flags                                   equ     ram + .4
  00000000            00140 IR_WAITING_FOR_TIMEOUT  equ      BIT0           ; RT. High whenever a pin goes high to disable
                      00141                                                                                 ; scanning of a user pro
                            gramming request
  00000001            00142 PROGRAM_MODE_ON                 equ  BIT1               ; Can only be cleared with a reset.
  00000002            00143 WAITING_FOR_DEBOUNCE    equ      BIT2
  00000003            00144 EXTENDED_PIN_SET                equ      BIT3
  00000024            00145 LedFlags                                equ     ram + .4
  00000004            00146 LED_ON                                  equ      BIT4
  00000005            00147 LED_CLOSING                             equ      BIT5
                      00148 
  00000025            00149 Counter                                 equ     ram + .5
                      00150 
                      00151         ; OutputsMask32
                      00152         ; The source for the actual state of the output pins. Diffences between
                      00153         ; this register and the physical outputs are regarded as manual user inputs.
                      00154         ; This register is logically organized as the pins 0-31 from lsb to msb.
                      00155         ; Restored at boot time with 'ReadTableOutputLevels()'
  00000026            00156 OutputsMask32                   equ     ram + .6        ; Quad 6..9. 4 bytes, std. pins 1-16 and extende
                            d 17-32
                      00157 
  0000002A            00158 LedPreset                               equ     ram + .10
  0000002B            00159 LedPrescaler                    equ     ram + .11
  0000002C            00160 ISRSlowPrescalerCnt             equ     ram + .12
                      00161 
  0000002D            00162 Read_Low                                equ     ram + .13       ; Used by rutines in "Rc5Util.asm"
  0000002E            00163 Read_High                               equ     ram + .14
                      00164 
  0000002F            00165 TempIndex                               equ     ram + .15       ; Realtime scope
  00000030            00166 Pin                                             equ     ram + .16
                      00167 
  00000031            00168 NewIrLowByte                    equ     ram + .17
  00000032            00169 NewIrHighByte                   equ     ram + .18
                      00170 
  00000033            00171 ShiftTempQuad                   equ     ram + .19       ; Quad. 19..22
                      00172 
  00000037            00173 RadioPinActivated               equ     ram + .23       ; Storage for the pin worked on in activate (for
                             deactivate)
  00000038            00174 RadioPrescaler                  equ     ram + .24
                      00175 
  00000039            00176 TablePointer                    equ     ram + .25
  0000003A            00177 Write_Low                               equ     ram + .26
  0000003B            00178 Write_High                              equ     ram + .27
                      00179 
  0000003C            00180 Write_Conf_Mode                 equ     ram + .28
  0000003D            00181 Read_Conf_Mode                  equ     ram + .29
  0000003E            00182 Write_Conf_Pin                  equ     ram + .30
  0000003F            00183 Read_Conf_Pin                   equ     ram + .31
                      00184 
  00000040            00185 CurrentConf                             equ     ram + .32
  00000041            00186 MasterCounter                   equ     ram + .33
                      00187 
  00000042            00188 Counter2                                equ     ram + .34
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000043            00189 TempIndex2                              equ     ram + .35
                      00190 
  00000044            00191 RtccReloadValue                 equ     ram + .36
  00000045            00192 SleepSemaphore                  set     ram + .37
                      00193 
  00000046            00194 LocalTemp                               equ     ram + .38
                      00195 
  00000047            00196 SubCallParameter        equ ram + .39
                      00197 
  00000048            00198 I2C_Public              equ ram + .40
  00000049            00199 I2C_TxJumpVector        equ ram + .41
  0000004A            00200 I2C_TxIndex             equ ram + .42
  0000004B            00201 I2C_TxNofBytes          equ ram + .43
  0000004C            00202 I2C_TxAddress           equ ram + .44
  0000004D            00203 I2C_TxCommand           equ ram + .45
  0000004E            00204 I2C_TxData              equ ram + .46
                      00205 
                      00206         ; SerOutputsMaskCopy32
                      00207         ; This is continously compared to 'OutputsMask32' and diffences are
                      00208         ; transmitted over the I2C bus and the SerOutputsMaskCopy32 is updated accordingly.
                      00209         ; This register is logically organized as the pins 0-31 from lsb to msb.
  0000004F            00210 SerOutputsMaskCopy32    equ     ram + .47       ; Quad. 47..50
                      00211 
                      00212         ; Contains a high bit at the pin currently beeing checked in 'SerOutputsMaskCopy32'
  00000053            00213 SerBitMask32            equ     ram + .51       ; Quad. 51..54
                      00214 
  00000057            00215 SER_Index               equ     ram + .55
                      00216 
                      00217         cblock  SER_Index+1
                      00218         endc
                      00219                                                 include "PICFLASH.inc"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; P I C F L A S H . I N C
                      00004 ; ------------------------------------------------------------------------
                      00005 ; Supports 8 and 14 bit read/writes to pic program flash memory.
                      00006 ; Verified on : 16F873. Misses the 4 byte block mode for 'A' devices.
                      00007 ; 001 - 2002-05-07 : Initial version
                      00008 ; 002
                      00009 ; ========================================================================
                      00010 ;
                      00236         list
                      00237 
                      00238 
                      00239 
                      00220                                                 PicFlashVariables8bit
                          M 
  00000003                M PicFlashDataSize                equ     .3
                          M 
                          M         cblock
  00000058                M         FLASH_FILE:PicFlashDataSize
                          M         endc
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000058                M FlashAdrLow                             equ     FLASH_FILE + .0
  00000059                M FlashAdrHigh                    equ     FLASH_FILE + .1
  0000005A                M FlashDataLow                    equ     FLASH_FILE + .2
                          M 
                      00221 
  0000005B            00222 Temporary                               equ     ram + .59       ; Realtime.
                      00223 
  0000005C            00224 TempStack               equ ram + .60
                      00225 
  0000005D            00226 CurrentPin                              equ     ram + .61
                      00227 
  0000005E            00228 SerialCopyTemp                  equ     ram + .62
  0000005F            00229 OutputMaskTemp                  equ     ram + .63
  00000060            00230 SerialMaskTemp                  equ     ram + .64
                      00231 
                      00232 ; BiToggleRegister[3:0] is bi-toggle active on pin 11, 10, 9 and 8 respectively
  00000061            00233 BiToggleRegister        equ ram + .65
  00000062            00234 BiToggleTemp            equ ram + .66
                      00235 
                      00236         if DELAYED_SAVE
  00000063            00237 DelayedSaveTimer                equ     ram + .67
                      00238         endif
                      00239 
  00000064            00240 KeyReleaseCnt                   equ     ram + .68
                      00241 
                      00242         ; A bit set in BiToggleRegBootDelay[3:0] means that the pin is in its boot inhibit time.
                      00243         ; This register will be cleared when the inhibit time expires and the information is obsolete.
                      00244         ; A bit set in BiToggleRegBootDelay also have the same bit set in 'BiToggleRegister'
                      00245         ; (which is permanent).
  00000065            00246 BiToggleRegBootDelay    equ ram + .69
                      00247 
  00000066            00248 BiToggleCntBootDelay    equ ram + .70
                      00249 
                      00250         ifdef CONF_RADIO_NEXT
                      00251 RadioModeNextPin                equ     ram + .71
                      00252 RadioModePrevPin                equ ram + .72
                      00253 RadioModeNextPrevFlags  equ ram + .73
                      00254 PRESCALER_PRESCALER             equ      BIT0
                      00255         endif
                      00256 
  0000006A            00257 DelayedSetCount                 equ     ram + .74
                      00258 
  0000006B            00259 next_ram                                set     ram + .75
                      00260 
                      00261                         ; Include IR variables
                      00262 
                      00263                         IR_Variables
                          M                                         list
                          M 
                          M ; External equates
                          M ; RC5_TICKS_PER_BIT
                          M ; RC5_TIMEOUT_PRESET
                          M ; RC5PORT, RC5PIN
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M ; External defines
                          M ; IR_MIN_NOF_CODES
                          M 
                          M 
                          M 
  0000006B                M IRJumpVector            equ     next_ram + .0
  0000006C                M RC5Counter                      equ     next_ram + .1
  0000006D                M RC5Low                          equ     next_ram + .2   ; RC data recieved - lo
  0000006E                M RC5High                         equ     next_ram + .3   ; RC data recieved - hi
  0000006F                M RC5Presc                        equ     next_ram + .4
                          M 
                          M 
  00000070                M IRPrivateFlags          equ     next_ram + .5   ; Private flags. Read-only access !
  00000000                M FIRST_BIPHASE_HALF      equ      BIT0           ; A First sample level
  00000001                M RC5_TIMEOUTTEST         equ      BIT1           ; B Test for timeout (in idle state)
                          M                                                                         ;   Set high after sampling comp
                            lete
                          M                                                                         ;   Clear on timeout or next RC5
                             start
                          M         ; Used to detect whether a timeout or a abort should signal a "timeout"
                          M         ; in order to let the listener clear its outputs. This would be that the
                          M         ; last signal was "RC5_READY"
  00000002                M IR_DATA_SENT            equ      BIT2           ; F Set high when a sample is flagged
                          M                                                                         ;   Cleared on timeout or abort.
  00000003                M SONY_TEST                       equ      BIT3
  00000004                M IR_READY_PENDING        equ      BIT4
                          M ;
  00000006                M RC5_TOGGLE_BIT          equ      BIT6
  00000007                M RC5_PREV_TOGGLE_BIT     equ      BIT7
                          M 
                          M 
  00000071                M IRPublicFlags           equ     next_ram + .6   ; Public flags. Not used for state controls.
  00000000                M IP_P_FORMAT_L       equ  BIT0
  00000001                M IP_P_FORMAT_H       equ  BIT1
  00000002                M IR_TIMEOUT                      equ      BIT2           ; C Set on timeout
  00000003                M IR_BUSY                 equ      BIT3           ; D Set when leaving idle.
                          M                                                                         ;   Cleared when IR code is samp
                            led
  00000004                M IR_READY                        equ      BIT4           ; E New data available
                          M ;
  00000006                M SECOND_LAST                     equ      BIT6
                          M 
                          M 
  00000072                M IRPrivateFlags_2        equ     next_ram + .7
  00000000                M IR_FORMAT_LO            equ      BIT0           ; IR_FORMAT must be rightadjusted (or code breaks)
  00000001                M IR_FORMAT_HIGH          equ      BIT1           ; - 00 RC5 01 Sony 10 Panasonic 11 Chrashed..
                          M ;                                       equ      BIT2
  00000003                M IR_NEW_CODE                     equ      BIT3
                          M 
                          M 
  00000073                M IRTimeoutHigh           equ     next_ram + .8
  00000074                M IRTimeoutLow            equ     next_ram + .9
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
  00000075                M IR_PrevLow                      equ     next_ram + .10
  00000076                M IR_PrevHigh                     equ     next_ram + .11
                          M 
  00000077                M IR_PanaCount            equ     next_ram + .12
                          M 
  00000078                M IR_PanaAdjVal           equ     next_ram + .13
                          M 
  00000079                M IR_HitCounter           equ     next_ram + .14
                          M  ;
                          M  ; Remember to change next line if adding new entries !!!!!!!
                          M  ;
  0000000F                M RC5_RAM_USAGE           equ     IR_HitCounter - IRJumpVector + 1
                          M 
                      00264 
  0000007A            00265 next_ram                                set     next_ram + RC5_RAM_USAGE
                      00266 
  0000007C            00267 IntrContextS                    equ     RAM_BANK0_LAST - .3     ; ISR context save - Must be in both ban
                            ks !!
  0000007D            00268 IntrContextW                    equ     RAM_BANK0_LAST - .2     ; ISR context save
  0000007E            00269 IntrContextP                    equ     RAM_BANK0_LAST - .1     ; ISR context save
  0000007F            00270 ReservedIceBreaker              equ     RAM_BANK0_LAST          ; Reserved for ICE
                      00271 
                      00272         if next_ram >= IntrContextS
                      00273                 error "FATAL : Ram overwrite"
                      00274         endif
                      00275 
                      00276 
                      00277 ;;;-----------------------------------------------------------------------
                      00278 ;;; M E M O R Y  M A P   -   E E P R O M   &   F L A S H
                      00279 ;;;-----------------------------------------------------------------------
                      00280 ; 16F873 has 128 bytes eeprom
                      00281 
                      00282                 cblock  0
  00000000            00283         EepFirstRunTest                         :1
  00000001            00284         EepOutputPinsQuad                       :4
                      00285                 endc
                      00286 
                      00287 
                      00288         ; Assignments table layout in flash
                      00289         ; --------------------------
                      00290         ; [0] IR code low byte
                      00291         ; [1] IR code high byte
                      00292         ; [2] Conf byte         Conf<5:4> IR standard  Conf<3:0> Mode
                      00293         ; [3] Pin number        Pin<4:0> Pin 0-15 & extended pins 16-31
  00000020            00294 TABLE_NOF_CELLS                                 equ     .32
  00000004            00295 TABLE_CELL_BYTES                                equ     .4
                      00296 
  00000900            00297 FLASH_CODE_PAGE                                 equ     0x900
                      00298 #define RELATIVE_FLASH_ADDRESS_CODE
                      00299 
  00000800            00300 FAR_CODE_PAGE                                   equ 0x800
                      00301 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00302 
                      00303 ;;;-----------------------------------------------------------------------
                      00304 ;;; M O D E   C O N S T A N T S
                      00305 ;;;-----------------------------------------------------------------------
                      00306 ;;;
                      00307 ; CONF_BI_TOGGLE_MODE_BOOT_DELAY
                      00308 ; As CONF_BI_TOGGLE_MODE except that it remains low a few seconds after
                      00309 ; startup. This is for a delayed 'play' or '(inverted) mute' relay.
                      00310 
                      00311 ; CONF_RADIO_NEXT, CONF_RADIO_PREV
                      00312 ; Will be inputs (ext pullup) selecting either next or previous radio channel.
                      00313 ; There are no changes on the pins while the next/prev is active, (i.e. has not
                      00314 ; experienced a extended time timeout). First after the extended timeout will
                      00315 ; the radio group shift to the newly selected by a make-before-break.
                      00316 
                      00317 ; Default values
  00000000            00318 NOF_CONF_MODES                          set     .0
                      00319 
                      00320         ; Standard table
                      00321                 if MODE_TABLE_CONF == 1
Message[301]: MESSAGE: (MODE_TABLE_CONF == 1)
                      00322                 messg "MODE_TABLE_CONF == 1"
  00000005            00323 NOF_CONF_MODES                          set     .5
  00000000            00324 CONF_NORMAL_MODE                        equ     .0      ;Standard
  00000001            00325 CONF_TOGGLE_MODE                        equ     .1      ;Toggle
  00000002            00326 CONF_RADIO_MODE                         equ     .2      ;Radio
  00000003            00327 CONF_BI_TOGGLE_MODE                     equ     .3      ;BiToggle
  00000004            00328 CONF_BI_TOGGLE_MODE_BOOT_DELAY  equ     .4      ;BiToggleBootDelay
                      00329                 endif
                      00330 
                      00331         ; Test table. Do not expect this one to work.
                      00332                 if MODE_TABLE_CONF == .100
                      00333                 messg "DEVELOPMENT : MODE_TABLE_CONF == 100"
                      00334 NOF_CONF_MODES                          set     .7
                      00335 CONF_NORMAL_MODE                        equ     .0      ;Standard
                      00336 CONF_TOGGLE_MODE                        equ     .1      ;Toggle
                      00337 CONF_RADIO_MODE                         equ     .2      ;Radio
                      00338 CONF_BI_TOGGLE_MODE                     equ     .3      ;BiToggle
                      00339 CONF_BI_TOGGLE_MODE_BOOT_DELAY  equ     .4      ;BiToggleBootDelay
                      00340 CONF_RADIO_NEXT                                 equ     .5              ;NextRadio (hardcoded to PIN0)
                      00341 CONF_RADIO_PREV                                 equ     .6              ;PrevRadio (hardcoded to PIN1)
                      00342                 endif
                      00343 
                      00344 
                      00345 ;;;-----------------------------------------------------------------------
                      00346 ;;; B I T O G G L E   C O N S T A N T S
                      00347 ;;;-----------------------------------------------------------------------
                      00348 ;;;
                      00349 
                      00350 ; These will be boolean which are allways defined :
  00000000            00351 VALUE_CONF_BI_TOGGLE_MODE               set     0
Warning[208]: Label truncated at 32 characters. (VALUE_CONF_BI_TOGGLE_MODE_BOOT_DELAY)
  00000000            00352 VALUE_CONF_BI_TOGGLE_MODE_BOOT_DELAY    set     0
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00353 
                      00354 ; Next part defines 'BI_TOGGLE_DEFINED' if one or both bitoggle modes exists.
                      00355 
                      00356                 ifdef CONF_BI_TOGGLE_MODE
                      00357 #define BI_TOGGLE_DEFINED
  00000003            00358 VALUE_CONF_BI_TOGGLE_MODE               set     CONF_BI_TOGGLE_MODE
                      00359                 endif
                      00360 
                      00361                 ifdef CONF_BI_TOGGLE_MODE_BOOT_DELAY
                      00362         ifndef BI_TOGGLE_DEFINED
                      00363 #define BI_TOGGLE_DEFINED
                      00364         endif
Warning[208]: Label truncated at 32 characters. (VALUE_CONF_BI_TOGGLE_MODE_BOOT_DELAY)
  00000004            00365 VALUE_CONF_BI_TOGGLE_MODE_BOOT_DELAY    set     CONF_BI_TOGGLE_MODE_BOOT_DELAY
                      00366                 endif
                      00367 
                      00368         if ICE
                      00369 BITOGGLE_BOOT_DELAY_sec                 equ     4
                      00370         else
  00000003            00371 BITOGGLE_BOOT_DELAY_sec                 equ     3
                      00372         endif
                      00373 
                      00374 ;;;-----------------------------------------------------------------------
                      00375 ;;; C O N S T A N T S
                      00376 ;;;-----------------------------------------------------------------------
                      00377 ;;;
  00000004            00378 MAKE_BEFORE_BREAK_TICKS                 equ     .4      ; Time overlap between radio mode pins
  0000000F            00379 MAKE_BEFORE_BREAK_RADIO_NEXT    equ     .15
                      00380 
  00000003            00381 FATAL_ALLREADY_EXISTS                   equ     .3
  00000004            00382 FATAL_NO_MORE_ROOM                              equ     .4
  00000005            00383 FATAL_ILLEGAL                                   equ     .5
  00000006            00384 FATAL_TRAP                              equ     .6
  00000007            00385 FATAL_REALTIME_STARVATION               equ     .7
                      00386 
                      00387 
                      00388 
                      00389 ;;;-----------------------------------------------------------------------
                      00390 ;;; R C 5  &  S O N Y   C O N S T A N T S
                      00391 ;;;-----------------------------------------------------------------------
                      00392 
                      00393 
                      00394 ; RC5 standard. This is the fixed RC5 base clock.
  00008CA0            00395 RC5_DATA_CLOCK_Hz               equ     .36000
                      00396 
                      00397 ; RC5 standard. Equals 1.778 msec
  000006F1            00398 RC5_BIT_TIME_us                 equ     (.1000000 * .64 ) / RC5_DATA_CLOCK_Hz
                      00399 
                      00400 ; Time to tranmit a code.
                      00401 ; Corrected for the invinsible low level during first sync start bit.
  00005DB5            00402 RC5_AIR_TIME_us                 equ     (RC5_BIT_TIME_us * .27) / 2
                      00403 
                      00404 ; 113.778ms
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0001BC40            00405 RC5_REPEAT_INTERVAL_us  equ     RC5_BIT_TIME_us * .64
                      00406 
  00000008            00407 SAMPLES_PER_BIT                 equ     8
                      00408 
  000363AD            00409 SAMPLE_PERIOD_ns                equ     (.1000*RC5_BIT_TIME_us) / SAMPLES_PER_BIT
                      00410 
                      00411 
                      00412 
                      00413 ;;; ---------------------------------------------------------------------------
                      00414 ;;; AUTOCALC.INC
                      00415 ;;; INLINE CALCULATION OF RTCC RELOAD VALUE TO GET A GIVEN ISR FREQUENCY
                      00416 ;;; ---------------------------------------------------------------------------
                      00417 ;;;
                      00418 ;;;                     ---- MANUAL DEFINES ----
                      00419 
                      00420 ; Select the wanted interupt frequency in Hz
  00001195            00421 REQUESTED_ISR_FREQ_Hz   equ     .1000000000 / SAMPLE_PERIOD_ns
                      00422                 if REQUESTED_ISR_FREQ_Hz < 0
                      00423                         messg "FATAL: REQUESTED_ISR_FREQ_Hz is negative"
                      00424                 endif
                      00425 
                      00426 ; Acceptable plus/minus tolerence in promille (1 percent = 10 !)
  00000014            00427 MAX_ISR_TOLL_PROMILLE   equ     .20
                      00428 
                      00429 ; Define the selected TMR0 prescaler value.
                      00430 ; TMR0_PRESC_VAL = (2^(presc#+1) [presc#=0,1,2,3...] = 2,4,8,...
                      00431                 if XTAL == .4000000
                      00432 TMR0_PRESC_VAL                  equ     .2      ; 4 MHz
                      00433                 else
  00000008            00434 TMR0_PRESC_VAL                  equ     .8      ; 20 MHz
                      00435                 endif
                      00436 
                      00437 ;;;                     ---- CALCULATIONS ----
                      00438 
                      00439                 include "AUTOCALC.inc"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; A U T O C A L C . I N C                          Claus Bjerre 2002-05-28
                      00004 ;
                      00005 ; Version history
                      00006 ; 001   Initial.
                      00007 ; ========================================================================
                      00008 ;
                      00009 
                      00010 
                      00011 ;;; Requires these constants to be defined in advance :
                      00012 
                      00013 ; XTAL                          Typ. fixed by design
                      00014 ; REQUESTED_ISR_FREQ_Hz         Typ, fixed by design
                      00015 ; MAX_ISR_TOLL_PROMILLE
                      00016 ; TMR0_PRESC_VAL                Adjust this to get a pass build (2,4,... if presc on TMR0)
                      00017 
                      00018 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019 ; Warning suppressors
                      00020 ; NO_WARN_TMR0_PRESC_VAL        Quiet on non-fatal values
                      00021 
                      00022 
                      00023 ; The time per instruction
  004C4B40            00024 INSTRUCTION_FREQ_Hz             equ     XTAL / .4
  000000C8            00025 INSTRUCTION_PERIOD_ns   equ     .1000000000 / INSTRUCTION_FREQ_Hz
                      00026 
                      00027 
                      00028         ifdef TMR0_PRESC_VAL
                      00029 
                      00030 
                      00031 ; The RTCC counter frequency in Hz
  00098968            00032 RTCC_FREQ_Hz                    equ     XTAL / (TMR0_PRESC_VAL * .4)
                      00033 
  00000640            00034 RTCC_PERIOD_ns                  equ     .1000000000 / RTCC_FREQ_Hz
                      00035 
                      00036 ; Free running ISR frequency (without RTCC reload in ISR part)
  00000989            00037 ISR_FREERUN_FREQ_Hz             equ     RTCC_FREQ_Hz / .256
                      00038 
                      00039                 ; Catch a too large TMR0 prescaler as it can make
                      00040                 ; it impossible to reach the requested ISR frequency
                      00041                 if ISR_FREERUN_FREQ_Hz > REQUESTED_ISR_FREQ_Hz
                      00042                         error "ERROR: RTCC counter too fast. Increase TMR0_PRESC_VAL"
                      00043                 endif
                      00044 
                      00045 ; Calculate RTCC reload value to reach the "ISR_FREQ_Hz"
                      00046 ; Note that the RTCC is an upcounter
  0000752B            00047 RTCC_RELOAD_256                 equ     .256 * 0x100 - (.256 * 0x100 * ISR_FREERUN_FREQ_Hz) / REQUESTED_
                            ISR_FREQ_Hz
                      00048 
                      00049 
  00000075            00050 RTCC_RELOAD                             equ     RTCC_RELOAD_256 / 0x100
                      00051 
                      00052                 if RTCC_RELOAD > 0x100
                      00053                         error "ERROR: TMR0 reload overflow (Decrease TMR0_PRESC_VAL)"
                      00054         else
                      00055                         if RTCC_RELOAD > .128 && TMR0_PRESC_VAL > .2
                      00056                                 ifndef NO_WARN_TMR0_PRESC_VAL
                      00057                                 messg "TIP: Decrease TMR0_PRESC_VAL"
                      00058                             endif
                      00059                         endif
                      00060                 endif
                      00061 
                      00062 
  0000008B            00063 RTCC_SUB_LOAD                   equ     (0x100 - RTCC_RELOAD)
                      00064 
                      00065 ; This is the actual ISR frequency. It should ideally equal the requested "ISR_FREQ_Hz".
                      00066 ; Used for an rudimentary test too detect if something went heywire above or if specs
                      00067 ; are not met.
  00001190            00068 ISR_FREQ_Hz                             equ     RTCC_FREQ_Hz / (.256 - RTCC_RELOAD)
                      00069 
                      00070 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00071 ; The frequency of a freerunning 8 bit prescaler inside ISR.
  00000011            00072 ISR_FREQ_MOD_256_Hz             equ     ISR_FREQ_Hz / 0x100
                      00073 
                      00074 
  FFFFFFFF            00075 ACTUAL_ISR_ERR_PROMILLE equ     (.1000 * (ISR_FREQ_Hz - REQUESTED_ISR_FREQ_Hz)) / REQUESTED_ISR_FREQ_Hz
                      00076 
                      00077                 ; The multiplication is just to ensure positive figures
                      00078                 ifdef MAX_ISR_TOLL_PROMILLE
                      00079                         if ACTUAL_ISR_ERR_PROMILLE*ACTUAL_ISR_ERR_PROMILLE > MAX_ISR_TOLL_PROMILLE * MAX
                            _ISR_TOLL_PROMILLE
                      00080                         messg "ERROR : ISR frequency out of tolerence"
                      00081                         endif
                      00082                 endif
                      00083 
                      00084 
                      00085 
  000011B0            00086 ISR_FREQ_HIGH_Hz                equ     RTCC_FREQ_Hz / (.255 - RTCC_RELOAD)
                      00087 
  00001170            00088 ISR_FREQ_LOW_Hz                 equ     RTCC_FREQ_Hz / (.257 - RTCC_RELOAD)
                      00089 
                      00090 ; Time between interupts.
  000364D3            00091 ISR_PERIOD_ns                   equ     (.1000000000 / ISR_FREQ_Hz )
                      00092 
  0000DE6B            00093 ISR_PERIOD_MOD_256_us   equ     (ISR_PERIOD_ns * 0x100) / .1000
                      00094 
  00000000            00095 ISR_REQ_PERIOD_ns               equ     REQUESTED_ISR_FREQ_Hz / .1000000000
                      00096 
  FFFC9B2D            00097 ISR_PERIOD_ERROR_ns             equ     ISR_REQ_PERIOD_ns - ISR_PERIOD_ns
                      00098 
                      00099 ; The number of instructions that is executed between interupts. (Assuming one instruction per clock)
                      00100 ; A basic problem is when the ISR code part eats up all available instructions.
  00000458            00101 INSTRUCTIONS_BETW_INTR  equ     ISR_PERIOD_ns / INSTRUCTION_PERIOD_ns
                      00102 
                      00103                 ; Try to detect a starved system.
                      00104                 if  INSTRUCTIONS_BETW_INTR < .40
                      00105                         messg "WARNING: System might be heavily loaded"
                      00106                 endif
                      00107 
                      00108 
                      00109 
                      00110 
                      00199         list
                      00200 
                      00201 
                      00202         endif ;; TMR0_PRESC_VAL
                      00440 
                      00441 
                      00442 
                      00443                 ; SLOW TIMER
                      00444                 ; ----------------------------------------------------
                      00445                 ; Used for LED blinking, manual inputs reading, radio mode delays etc.
                      00446                 ; The timer code is located in main loop and the timer is ticked by ISR.
                      00447 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001E            00448 ISR_SLOW_TIMER_Hz               equ     .30
                      00449 
  00000095            00450 ISR_SLOW_PRESCALER              equ     ISR_FREQ_Hz / ISR_SLOW_TIMER_Hz
                      00451 
  00000005            00452 KEY_DEBOUNCE_TIME               equ     ISR_SLOW_TIMER_Hz / .6
                      00453 
                      00454         if ISR_SLOW_PRESCALER > 0xFF
                      00455                 error "LED_ISR_PRESCALER overflow"
                      00456         endif
                      00457 
                      00458 
                      00459 
                      00460                         IR_Timing
                          M 
                          M                 list
                          M 
                          M                 list
                          M 
                          M ; Statemachine starts with resolution of one RC5 tick = 1/8 bit = 0.221 msec.
                          M 
                          M ; #A 1.77 msec. The first RC5_HALF pass here.
                          M ;       Will find a SONY_TEST == T and advance the timing by 1/8 RC5 bitperiod and sets SECOND_LAST = T
                          M ;
                          M ; #B 1.99 msec. Will find SECOND_LAST = T.
                          M ;       If valid RC5 then the missing 1/8 bitperiod from #A is added.
                          M ;       If invalid RC5 then init Sony sampling. Install a delay of #C - #B = 0.7 msec
                          M ;
                          M ;
                          M ; #C 2.7 msec. First sample in Sony mode.
                          M ;       If it fails (carrier) then goto Panasonic mode.
                          M ;
                          M ; #D 4.2 msec - Panasonic mode.
                          M 
                          M 
                          M 
                          M ; Sampling Sony
  00000002                M SONY_SAMPLES_PER_BIT            equ     2
  000000BA                M SONY_TO_SONY_RTCC_COUNTS                set     (.300000 / RTCC_PERIOD_ns) - 1
                          M 
                          M ; Re #B. Used to get from RC5 (#B) to Sony (#C)
  00000002                M SONY_ALIGN_SAMPLES_PER_BIT      equ     2
  000000D9                M SONY_ALIGN_RTCC_COUNTS          set     (.350000 / RTCC_PERIOD_ns) - 1
                          M 
                          M         if SONY_ALIGN_RTCC_COUNTS >= 0x100 || SONY_TO_SONY_RTCC_COUNTS >= 0x100
                          M          error "Sony overflow #0202"
                          M         endif
                          M 
                          M 
                          M ; Sampling Panasonic (0x8B)
  00000002                M PANA_SAMPLES_PER_BIT            equ     2
  00000088                M PANA_TO_PANA_RTCC_COUNTS                set     ((.435000/PANA_SAMPLES_PER_BIT) / RTCC_PERIOD_ns) - 1 + 
                            2
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ; Re #D. Used to get from Sony (#C) to Panasonic (#D)
  00000004                M PANA_ALIGN_SAMPLES_PER_BIT      equ     4
  000000D9                M PANA_ALIGN_RTCC_COUNTS          set     ((.1400000/PANA_ALIGN_SAMPLES_PER_BIT) / RTCC_PERIOD_ns) - 1
                          M 
                          M                 if PANA_ALIGN_RTCC_COUNTS >= 0x100 || PANA_TO_PANA_RTCC_COUNTS >= 0x100
                          M                         error "Panasonic overflow #0211"
                          M         endif
                          M 
                          M 
                          M 
                          M 
                          M 
  00000005                M ZERO_TIME_ms            equ     .5
  0000000A                M DEAD_TIME_ms            equ     .10
  00000062                M RC5_TIMEOUT_ms          equ     .113 - ZERO_TIME_ms - DEAD_TIME_ms
  00000032                M SONY_TIMEOUT_ms         equ     .65 - ZERO_TIME_ms - DEAD_TIME_ms
  00000069                M PANA_TIMEOUT_ms         equ     .120 - ZERO_TIME_ms - DEAD_TIME_ms
                          M 
                          M 
                          M 
  00000004                M ZERO_PRESC                      equ     4
  00000005                M ZERO_PASSES                     equ     (.1000 * .8 * ZERO_TIME_ms) / (RC5_BIT_TIME_us * ZERO_PRESC)
                          M 
                          M 
  0000002D                M DEAD_PASSES                     equ     (.1000 * .8 * DEAD_TIME_ms) / RC5_BIT_TIME_us
  0000002D                M DEAD_PRESC                      equ     DEAD_PASSES
                          M 
  000001B9                M RC5_TIMEOUT_PASSES      equ     (.1000 * .8 * RC5_TIMEOUT_ms) / RC5_BIT_TIME_us         ; Presc = 1
  000000E1                M SONY_TIMEOUT_PASSES     equ     (.1000 * .8 * SONY_TIMEOUT_ms) / RC5_BIT_TIME_us        ; Presc = 1
  000001D8                M PANA_TIMEOUT_PASSES     equ     (.1000 * .8 * PANA_TIMEOUT_ms) / RC5_BIT_TIME_us        ; Presc = 1
  00000001                M IDLE_PRESC                      equ     1
                          M 
  00000043                M ABORT_PRESC                     equ     (.1000 * .8 * .15) / RC5_BIT_TIME_us
                          M 
                          M                 ;nolist
                          M 
                          M 
                          M         if IR_DEBUG_SAMPLE_TIME
                          M                 messg "INFO: Remote decoder sample clock enabled on RC5DEBUGPORT"
                          M         endif
                          M 
                          M         ifdef REMOTE_DECODER_TRAPS_ON
                          M                 messg "INFO: Remote trap code included"
                          M         endif
                          M 
                      00461 
                      00462 
                      00463                 ; Sleep timing
                      00464                 ; ----------------------------------------------------
                      00465 
  000001F4            00466 SLEEP_RX_STABLE_us              equ     .500
  0001FBD0            00467 SLEEP_TIMEOUT_us                equ     .130000
                      00468 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            00469 SLEEP_ISR_PRESC                 equ     .4
                      00470 
  00000379            00471 SLEEP_ISR_PERIOD_us             equ     (ISR_PERIOD_ns * SLEEP_ISR_PRESC) / .1000
                      00472 
  00000000            00473 SLEEP_RX_STABLE_CNT             equ     SLEEP_RX_STABLE_us / SLEEP_ISR_PERIOD_us
  00000092            00474 SLEEP_TIMEOUT_CNT               equ     SLEEP_TIMEOUT_us / SLEEP_ISR_PERIOD_us
                      00475 
                      00476 
                      00477 
                      00478 ;;;-----------------------------------------------------------------------
                      00479 ;;; P O R T S
                      00480 ;;;-----------------------------------------------------------------------
                      00481 ;
                      00482 ; There are 2 different pin layouts, ICE and not ICE, i.e. release. The
                      00483 ; difference is that the ICE is a 16F877 and some pins on the normal 16F873
                      00484 ; are reserved when running ICE. The fix throughout is to remove the pins
                      00485 ; from the project when in ICE mode. (as opposed to just remapping them)
                      00486 ; A subclass to ICE mode is ALTERNATIVE_PINS. This is just a temporary
                      00487 ; development playground.
                      00488 ;
                      00489 
                      00490         if ICE
                      00491 
                      00492         if ALTERNATIVE_PINS
                      00493         messg "INFO : ICE ALTERNATIVE_PINS"
                      00494 TrisA                   equ     b'00000000'
                      00495 TrisB                   equ     b'01010000'
                      00496 TrisC                   equ     b'00011000'     ; Includes I2C pins at 3 & 4
                      00497 
                      00498 LED_PORT                equ     PORTC
                      00499 LED_PIN                 equ      BIT1
                      00500 LED_INV_PORT    equ     PORTA
                      00501 LED_INV_PIN             equ      BIT4
                      00502 RC5PORT                 equ     PORTB
                      00503 RC5PIN                  equ      BIT4
                      00504 RC5DEBUGPORT    equ     PORTC
                      00505 RC5DEBUGPIN             equ      BIT2
                      00506         endif
                      00507 
                      00508 
                      00509         if STANDARD_PINS
                      00510         messg "INFO : ICE - STANDARD_PINS"
                      00511 TrisA                   equ     b'00000000'
                      00512 TrisB                   equ     b'00100000'
                      00513 TrisC                   equ     b'00011000'
                      00514 
                      00515 LED_PORT                equ     PORTA
                      00516 LED_PIN                 equ      BIT0
                      00517 
                      00518 RC5PORT                 equ     PORTB
                      00519 RC5PIN                  equ      BIT5           ; IR state machine relies on int-on-pb<7:4> change funct
                            ion.
                      00520 RC5DEBUGPORT    equ     PORTA
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00521 RC5DEBUGPIN             equ      BIT2
                      00522         endif
                      00523 
                      00524         if SINGLE_PIN
                      00525         messg "INFO : ICE - SINGLE_PIN"
                      00526 TrisA                   equ     b'00000000'
                      00527 TrisB                   equ     b'00111000'
                      00528 TrisC                   equ     b'00011000'
                      00529 
                      00530 LED_PORT                equ     PORTC
                      00531 LED_PIN                 equ      BIT0
                      00532 
                      00533 RC5PORT                 equ     PORTB           ; IR state machine relies on int-on-pb<7:4> change funct
                            ion.
                      00534 RC5PIN                  equ      BIT4
                      00535 ;RC5DEBUGPORT   equ     PORTA
                      00536 ;RC5DEBUGPIN            equ      BIT2
                      00537         endif
                      00538 
                      00539         else ; not ICE
                      00540 
Message[301]: MESSAGE: (INFO : Release)
                      00541           messg "INFO : Release"
  00000000            00542 TrisA                   equ     b'00000000'
  00000040            00543 TrisB                   equ     b'01000000'
  00000018            00544 TrisC                   equ     b'00011000'     ; Includes I2C pins at 3 & 4
                      00545 
  00000006            00546 LED_PORT                equ     PORTB
  00000007            00547 LED_PIN                 equ      BIT7
  00000005            00548 LED_INV_PORT    equ     PORTA
  00000000            00549 LED_INV_PIN             equ      BIT0
  00000006            00550 RC5PORT                 equ     PORTB           ; IR state machine relies on int-on-pb<7:4> change funct
                            ion.
  00000006            00551 RC5PIN                  equ      BIT6
                      00552         endif ; if ICE
                      00553 
                      00554 
                      00555         if SINGLE_PIN
                      00556 PIN0_PORT               equ     PORTB
                      00557 PIN0                    equ      BIT2
                      00558 ;PIN1_PORT              equ     PORTC
                      00559 ;PIN1                   equ      BIT4
                      00560         endif
                      00561 
                      00562 
                      00563         if ALTERNATIVE_PINS
                      00564 PIN0_PORT               equ     PORTB
                      00565 PIN0                    equ      BIT0
                      00566 PIN1_PORT               equ     PORTB
                      00567 PIN1                    equ      BIT1
                      00568 PIN2_PORT               equ     PORTB
                      00569 PIN2                    equ      BIT2
                      00570 PIN3_PORT               equ     PORTB
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00571 PIN3                    equ  BIT3
                      00572         endif
                      00573 
                      00574 
                      00575         if STANDARD_PINS                ; Ch Pin  16F873       16F877
  00000007            00576 PIN0_PORT               equ     PORTC
  00000002            00577 PIN0                    equ      BIT2   ;  0 RC2  Pin13[873]   Pin17[877]
  00000007            00578 PIN1_PORT               equ     PORTC
  00000005            00579 PIN1                    equ      BIT5   ;  1 RC5
  00000007            00580 PIN2_PORT               equ     PORTC
  00000001            00581 PIN2                    equ      BIT1   ;  2 RC1
  00000007            00582 PIN3_PORT               equ     PORTC
  00000006            00583 PIN3                    equ  BIT6   ;  3 RC6
                      00584 
  00000007            00585 PIN4_PORT               equ     PORTC
  00000000            00586 PIN4                    equ      BIT0   ;  5 RC0
  00000007            00587 PIN5_PORT               equ     PORTC
  00000007            00588 PIN5                    equ  BIT7   ;  6 RC7  Pin18[873]   Pin26[877]
  00000006            00589 PIN6_PORT               equ     PORTB
  00000000            00590 PIN6                    equ      BIT0   ;  6 RB0  Pin21[873]   Pin33[877]
  00000006            00591 PIN7_PORT               equ     PORTB
  00000001            00592 PIN7                    equ      BIT1   ;  7 RB1  Pin22[873]   Pin34[877]
                      00593 
  00000005            00594 PIN8_PORT               equ     PORTA
  00000005            00595 PIN8                    equ      BIT5   ;  8 RA5  Pin7[873]    Pin7[877]
  00000006            00596 PIN9_PORT               equ     PORTB
  00000002            00597 PIN9                    equ      BIT2   ;  9 RB2  Pin??[873]   Pin35[877]
  00000006            00598 PIN10_PORT              equ     PORTB
  00000003            00599 PIN10                   equ      BIT3   ; 10 RB3  Pin??[873]   Pin36[877]
  00000005            00600 PIN11_PORT              equ     PORTA
  00000003            00601 PIN11                   equ      BIT3   ; 11 A3
                      00602 
  00000006            00603 PIN12_PORT              equ     PORTB
  00000004            00604 PIN12                   equ      BIT4   ; 12 RB4  Pin25[873]   Pin37[877]
                      00605         if ICE == false
  00000005            00606 PIN13_PORT              equ     PORTA
  00000002            00607 PIN13                   equ      BIT2   ; 13 A2         This one is IR debug on ICE !
  00000006            00608 PIN14_PORT              equ     PORTB
  00000005            00609 PIN14                   equ      BIT5   ; 14 B5         This one is IR input on ICE !
  00000005            00610 PIN15_PORT              equ     PORTA
  00000001            00611 PIN15                   equ      BIT1   ; 15 A1         This one is IR power on ICE !
                      00612         endif
                      00613         endif
                      00614 
                      00615 
                      00616 
                      00617 
                      00618 
                      00619 ;;;-----------------------------------------------------------------------
                      00620 ;;; M A C R O S
                      00621 ;;;-----------------------------------------------------------------------
                      00622 
                      00623 LedOn           macro
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00624                         nop
                      00625                         bsf             LED_PORT, LED_PIN
                      00626                 ifdef LED_INV_PORT
                      00627                         nop
                      00628                         bcf             LED_INV_PORT, LED_INV_PIN
                      00629                 endif
                      00630                         endm
                      00631 
                      00632 LedOff          macro
                      00633                         nop
                      00634                         bcf             LED_PORT, LED_PIN
                      00635                 ifdef LED_INV_PORT
                      00636                         nop
                      00637                         bsf             LED_INV_PORT, LED_INV_PIN
                      00638                 endif
                      00639                         endm
                      00640 
                      00641 
                      00642 LedToggle       macro
                      00643                         local   led_on, led_ends
                      00644                         btfss   LED_PORT, LED_PIN
                      00645                         goto    led_on
                      00646                         LedOff
                      00647                         goto    led_ends
                      00648 led_on          LedOn
                      00649 led_ends
                      00650                 endm
                      00651 
                      00652 
                      00653 
                      00654 ;;;-----------------------------------------------------------------------
                      00655 ;;;-----------------------------------------------------------------------
                      00656 ;;;
                      00657 ;;;             C O D E  S T A R T S
                      00658 ;;;
                      00659 ;;;-----------------------------------------------------------------------
                      00660 ;;;-----------------------------------------------------------------------
                      00661 
0000                  00662 ColdStart       org     RESET
0000   0000           00663                         nop
0001   0000           00664                         nop
0002   2855           00665                         goto    Cont
                      00666 
0004                  00667                         org     INTERUPT
                      00668                         ; Context saving
                      00669                         ; W register and status are saved in reversed order...
                      00670                         ; ------------------------------------------------
0004   00FD           00671                         movwf   IntrContextW            ; Save W reg
0005   0E03           00672                         swapf   STATUS, W
0006   0183           00673                         clrf    STATUS
0007   00FC           00674                         movwf   IntrContextS            ; Save swapped STATUS
0008   080A           00675                         movf    PCLATH, W
0009   00FE           00676                         movwf   IntrContextP            ; Save PCLATH
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A   018A           00677                         clrf    PCLATH
                      00678                         ; Don't want to clutter up the code by dumping the ISR body here.
000B   2B37           00679                         goto    IntrRutine
                      00680 
                      00681         ;;;-----------------------------------------------------
                      00682         ;;; BOOT CODE
                      00683         ;;;-----------------------------------------------------
                      00684 
                      00685                         ; Becomes readable header in programmer ascii view
000C   2020 2020 2020 00686                         data    "             ( C ) c b p   2 0 0 3"
       2020 2020 2020 
       2028 2043 2029 
       2063 2062 2070 
       2020 2032 2030 
       2030 2033 
001D   2046 2070 2072 00687                         data    " F p r c 5 r x  "
       2063 2035 2072 
       2078 2020 
                      00688 
                      00689                         InlineAsciiHeader               ; Version, processor etc. as ascii in hexfile
                          M 
                          M                 ifdef RELEASE
                          M                         if RELEASE
0025   2052 2065 206C     M                                 data    " R e l e a s e  "
       2065 2061 2073 
       2065 2020 
                          M                 else
                          M                                 data    " D e b u g      "
                          M                 endif
                          M                 endif
                          M 
                          M                 ifdef __16F84
                          M                         data    " 1 6 F 8 4      "
                          M                 endif
                          M 
                          M                 ifdef __16C73A
                          M                         data    " 1 6 C 7 3      "
                          M                 endif
                          M 
                          M                 ifdef __16F873
002D   2031 2036 2046     M                         data    " 1 6 F 8 7 3    "
       2038 2037 2033 
       2020 2020 
                          M                 endif
                          M 
                          M                 ifdef __16F877
                          M                         data    " 1 6 F 8 7 7    "
                          M                 endif
                          M 
                          M                 ifdef XTAL
0035   2058 2074 2061     M                         data    " X t a l"
       206C 
  00000002                M xtal_hi         equ     XTAL / .10000000
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0039   0032               M                         data    '0' + xtal_hi
  00000000                M xtal_mill       equ     (XTAL - xtal_hi * .10000000) / .1000000
003A   0030               M                         data    '0' + xtal_mill
003B   002E               M                         data    '.'
003C   0030               M                         data    '0' + (XTAL - xtal_hi * .10000000 - xtal_mill * .1000000) / .100000
                          M                 endif
                          M 
                          M 
                          M                 ifdef VERSION
003D   2056 2065 2072     M                         data    " V e r  "
       2020 
0041   0030               M                         data    '0' + VERSION / .100
  00000003                M decade          equ     (VERSION - .100*(VERSION / .100)) / .10
0042   0033               M                         data    '0' + decade
0043   0036               M                         data    '0' + (VERSION - .100*(VERSION/.100) - decade*.10)
0044   2020               M                         data    "  "
                          M                 endif
                          M 
                          M 
                          M                 ifdef SERIAL_NUMBER
                          M                         data    " S e r  "
                          M                         data    SERIAL_NUMBER + '0'
                          M                         data    "      "
                          M                 endif
                          M 
                          M                 ifdef ICE
                          M                 if ICE == true
                          M                                 data    " i c e b r k e r"
                          M                 endif
                          M                 endif
                          M 
                      00690 
                      00691                 if IR_RECIEVER_ACTIVE_HIGH
                      00692                         data    " A c t . H i g h"
                      00693                         else
0045   2041 2063 2074 00694                         data    " A c t . L o w  "
       202E 204C 206F 
       2077 2020 
                      00695                 endif
                      00696 
                      00697                 if MODE_TABLE_CONF == 1
004D   204D 206F 2064 00698                         data            " M o d e T a b 1"
       2065 2054 2061 
       2062 2031 
                      00699                 else
                      00700                         if MODE_TABLE_CONF == 2
                      00701                                 data        " M o d e T a b 2"
                      00702                         else
                      00703                                 data    " M o d e T a b ?"
                      00704                         endif
                      00705                 endif
                      00706 
                      00707                         ; Reset vector continued
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00708                         ; -------------------------------------------------------
0055                  00709 Cont
                      00710                         MZeroFileRegs                   ; Macro to clear ram files
  0000                    M                         local   next_cell
                          M                          ;
0055   3020               M                         movlw   RAM_BANK0_START
0056   0084               M                         movwf   FSR
                          M                          ;
0057   305F               M                         movlw   RAM_BANK0_SIZE-1
0058   00FF               M                         movwf   RAM_BANK0_LAST  ; Adress of last cell
                          M                  ;
0059   0180               M next_cell       clrf    INDF
005A   0A84               M                         incf    FSR, F
005B   0BFF               M                         decfsz  RAM_BANK0_LAST, F
005C   2859               M                         goto    next_cell
                          M                         ;
005D   01FF               M                         clrf    RAM_BANK0_LAST
                          M                         ;
                          M                 ifdef ICE
                          M                         if ICE
                          M                         nop
                          M                         nop
                          M                         endif
                          M                 endif
                      00711 
005E   018B           00712                         clrf    INTCON                  ; A stray "ei" in init part will have no effect.
                            ..
                      00713 
                      00714                          ; No A/D channels
                      00715                          ;
005F   3006           00716                         movlw   0x06
                      00717                         SetBnkF ADCON1
  00000001                M CURRENT_BANK    set     (ADCON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
0060   1683               M                         bsf     STATUS, RP0
0061   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0062   009F           00718                         movwf   ADCON1 & FORCE_7_BIT_ADR
                      00719                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
0063   1283               M                         bcf     STATUS, RP0
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                      00720 
                      00721                          ; Define i/o pins
                      00722                          ;
0064   2277           00723                         call    InitializeAllOutputs
0065   1386           00724                         bcf             LED_PORT, LED_PIN
                      00725 
                      00726                          ; Check if user requests a pin delete
                      00727 
0066   21E5           00728                         call    CheckForDeleteRequest
                      00729 
                      00730 
                      00731                          ; This shouldn't be nescessary? Inserted to get port C
                      00732                          ; working running ICE.
                      00733                         SetBnkF T1CON
  00000000                M CURRENT_BANK    set     (T1CON    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
0067   1283               M                         bcf     STATUS, RP0
0068   1303               M                         bcf     STATUS, RP1
  00000000                M __bank          set     0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0069   0190           00734                         clrf    T1CON
                      00735                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                      00736 
                      00737             ; Delay for delayed BiToggle mode pins
                      00738 
006A   305A           00739             movlw   BITOGGLE_BOOT_DELAY_sec * ISR_SLOW_TIMER_Hz
006B   00E6           00740             movwf   BiToggleCntBootDelay
                      00741 
                      00742                          ; Ensure a valid eeprom if this is first power on ever
                      00743                          ;
006C   228C           00744                         call    FirstRunSetups
                      00745 
                      00746                          ; Restore output pins
                      00747                          ;
006D   272C           00748                         call    RestoreOutputLevelMask
                      00749 
                      00750              ; Update BiToggle information
                      00751              ;
006E   222D           00752             call    LocateBiTogglePins
                      00753 
                      00754                 if ICE  ; -------------------------------------
                      00755                         nop             ; Breakpoint : RadioNext / Prev
                      00756                         nop             ;
                      00757                 endif   ; -------------------------------------
                      00758 
006F   2276           00759                         call    LocateRadioNextPrevPins
                      00760 
                      00761              ; Use the bitoggle register to set the slave inputs high in OutputsMask32+1
                      00762 
0070   0E61           00763             swapf   BiToggleRegister, W
0071   39F0           00764             andlw   0xF0
0072   04A7           00765             iorwf   OutputsMask32+1, F
                      00766 
0073   2271           00767             call    FilterHighBiToggleBootDelayPins
                      00768 
0074   276C           00769                         call    SetOutputsFromMasks
                      00770 
                      00771                          ; HelloWorld - Flash LED
                      00772                          ;
                      00773                         LedOn
0075   0000               M                         nop
0076   1786               M                         bsf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
0077   0000               M                         nop
0078   1005               M                         bcf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
0079   3096           00774                         movlw   .150
007A   229C           00775                         call    msDelay
                      00776                         LedOff
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007B   0000               M                         nop
007C   1386               M                         bcf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
007D   0000               M                         nop
007E   1405               M                         bsf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
                      00777 
                      00778              ;
                      00779              ; Initialize i2c serial
                      00780              ;
007F   22D6           00781             call    I2C_MasterAsyncInit
                      00782 
                      00783              ; Force a complete serial update from start
                      00784              ;
0080   0926           00785             comf    OutputsMask32+0, W
0081   00CF           00786             movwf   SerOutputsMaskCopy32+0
0082   0927           00787             comf    OutputsMask32+1, W
0083   00D0           00788             movwf   SerOutputsMaskCopy32+1
0084   0928           00789             comf    OutputsMask32+2, W
0085   00D1           00790             movwf   SerOutputsMaskCopy32+2
0086   0929           00791             comf    OutputsMask32+3, W
0087   00D2           00792             movwf   SerOutputsMaskCopy32+3
                      00793 
                      00794              ; Initialize I2C serial monitor
                      00795              ;
0088   21FB           00796             call        ResetSerialTestMask
                      00797 
                      00798 
                      00799                         ; IR initialize
                      00800                 ;
0089   3000           00801                         movlw   IR_PRE_IDLE
008A   00EB           00802                         movwf   IRJumpVector
                      00803 
008B   30FF           00804                         movlw   0xFF
008C   00F6           00805                         movwf   IR_PrevHigh
                      00806 
                      00807 
                      00808 
008D                  00809 RunTime     ; Initialize first sync period
                      00810 
008D   308B           00811                         movlw   RTCC_SUB_LOAD
008E   00C4           00812                         movwf   RtccReloadValue
                      00813 
008F   0181           00814                         clrf    TMR0
                      00815 
                      00816                          ; Includes "TMR0_PRESC_VAL"
                      00817                 if XTAL == .4000000
                      00818                         movlw   b'10000000'     ; 4 MHz
                      00819                 else
0090   3082           00820                         movlw   b'10000010'     ; 20 MHz
                      00821                 endif
                      00822 
                      00823                 if ALTERNATIVE_PINS
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00824                         movlw   b'00000010'     ; 20 MHz and int. pullups
                      00825                 endif
                      00826                         setoption
                          M                         SetBnkF OPTION_REG
  00000001                M CURRENT_BANK    set     (OPTION_REG & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
0091   1683               M                         bsf     STATUS, RP0
0092   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0093   0081               M                         movwf   OPTION_REG & FORCE_7_BIT_ADR
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
0094   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                      00827 
0095   30A0           00828                         movlw   b'10100000'             ; Timer 0 intr. enabled
0096   008B           00829                         movwf   INTCON
                      00830 
                      00831 
                      00832 
                      00833 ;;;-----------------------------------------------------------------------
                      00834 ;;;-----------------------------------------------------------------------
                      00835 ;;;
                      00836 ;;;     Realtime loop
                      00837 ;;;
                      00838 ;;;-----------------------------------------------------------------------
                      00839 ;;;-----------------------------------------------------------------------
                      00840 
                      00841 
                      00842 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0097                  00843 MainLoop
                      00844 
                      00845                          ; New IR code recieved ?
                      00846                          ; --------------------------------------------------
                      00847                          ; Set corresponding bit(s) high if the code is found in table
                      00848                          ; Assumes a cleared mask at entry
                      00849 
0097   1E71           00850                         btfss   IRPublicFlags, IR_READY
0098   28B4           00851                         goto    RT_RC5_Ends
                      00852 
0099   1824           00853                         btfsc   Flags, IR_WAITING_FOR_TIMEOUT   ; wtf
009A   28B4           00854                         goto    RT_RC5_Ends
                      00855 
                      00856                          ; Yes, New IR code flagged.
                      00857                          ; Save IR code. The copies are used later at the timeout as well
                      00858                          ;
009B   086D           00859                         movf    RC5Low, W
009C   00B1           00860                         movwf   NewIrLowByte
009D   086E           00861                         movf    RC5High, W
009E   00B2           00862                         movwf   NewIrHighByte
                      00863 
                      00864                          ; ToDo save IR flags and enable IR here
                      00865                          ; Loop through entire table to find any matches and effectuate them
                      00866 
009F   26BB           00867                         call    GetFirstPinNumberFromIRCode     ; Pin number in W
                      00868 
                      00869                 if ICE  ; -------------------------------------
                      00870                         nop             ; Breakpoint :
                      00871                         nop             ;
                      00872                 endif   ; -------------------------------------
                      00873 
00A0   1C03           00874                         skpc
00A1   28B3           00875                         goto    RT_RC5_Clr
                      00876 
                      00877 
                      00878                         ; IR code were in table
                      00879                         ; ---------------------------------
                      00880                         ; FIXIT - merge with "radio_bingo"
                      00881                         ;
00A2   1424           00882                         bsf             Flags, IR_WAITING_FOR_TIMEOUT
                      00883 
00A3   00DD           00884 add_pin         movwf   CurrentPin
                      00885 
00A4   083D           00886                         movf    Read_Conf_Mode, W
00A5   00C0           00887                         movwf   CurrentConf
                      00888 
                      00889                          ; Program output pin
                      00890                          ;
00A6   26DE           00891                         call    ActivateOutputMask
                      00892                          ;
                      00893                 if ICE  ; -------------------------------------
                      00894                         nop             ; Breakpoint :
                      00895                         nop             ;
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00896                 endif   ; -------------------------------------
                      00897 
00A7   26D4           00898                         call    GetNextPinNumberFromIRCode
                      00899 
                      00900                 if ICE  ; -------------------------------------
                      00901                         nop             ; Breakpoint :
                      00902                         nop             ;
                      00903                 endif   ; -------------------------------------
                      00904 
00A8   1803           00905                         skpnc
00A9   28A3           00906                         goto    add_pin
                      00907 
                      00908                          ; Start LED blinker
00AA   3022           00909                         movlw   0x22
00AB   2203           00910                         call    LedEnable
                      00911 
                      00912                 if !DELAYED_SETS
                      00913                         call    SetOutputsFromMasks
                      00914                 else
00AC   3023           00915                         movlw   .35
00AD   00EA           00916                         movwf   DelayedSetCount
                      00917                 endif
                      00918 
                      00919                          ; Dont save output state if radio button, that is done in radio release part
                      00920                          ; (two radio buttons here in make-before-break)
                      00921                 ifdef CONF_RADIO_MODE
00AE   0840           00922                         movf    CurrentConf, W
00AF   26DA           00923                         call    ModeConf2Int
00B0   3C02           00924                         sublw   CONF_RADIO_MODE
00B1   1903           00925                         skpnz
00B2   28B3           00926                         goto    no_save_at_start
                      00927                 endif
                      00928 
                      00929                 ifdef CONF_RADIO_NEXT
                      00930                         movf    CurrentConf, W
                      00931                         call    ModeConf2Int
                      00932                         sublw   CONF_RADIO_NEXT
                      00933                         skpnz
                      00934                         goto    no_save_at_start
                      00935                 endif
                      00936 
                      00937                 ifdef CONF_RADIO_PREV
                      00938                         movf    CurrentConf, W
                      00939                         call    ModeConf2Int
                      00940                         sublw   CONF_RADIO_PREV
                      00941                         skpnz
                      00942                         goto    no_save_at_start
                      00943                 endif
                      00944 
                      00945                 if ICE  ; -------------------------------------
                      00946                         nop             ; Breakpoint :
                      00947                         nop             ;
                      00948                 endif   ; -------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00949 
                      00950                          ; Save
                      00951                 if !DELAYED_SAVE
                      00952                         call    SaveCurrentOutputLevels
                      00953                 endif
                      00954 
00B3                  00955 no_save_at_start
                      00956 
00B3                  00957 RT_RC5_Clr
00B3   1271           00958                         bcf             IRPublicFlags, IR_READY
                      00959 
00B4                  00960 RT_RC5_Ends
                      00961 
                      00962 
                      00963 
                      00964 
                      00965 
                      00966                  ; IR timeout flagged ?
                      00967                  ; --------------------------------------------------
                      00968                  ; All outputs low
00B4                  00969 RT_TimeoutTest
00B4   1D71           00970                         btfss   IRPublicFlags, IR_TIMEOUT
00B5   28CF           00971                         goto    RT_no_timeout
                      00972 
00B6   1C24           00973                         btfss   Flags, IR_WAITING_FOR_TIMEOUT
00B7   28CE           00974                         goto    AcknTimout
                      00975 
                      00976                 if DELAYED_SETS
00B8   01EA           00977                         clrf    DelayedSetCount
                      00978                 endif
                      00979 
                      00980 
                      00981                         ; IR timeout on a previously accepted code
                      00982 
                      00983                 if ICE  ; -------------------------------------
                      00984                         nop             ; Breakpoint :
                      00985                 endif   ; -------------------------------------
                      00986 
00B9   220C           00987                         call    LedDisable
                      00988 
00BA   26BB           00989                         call    GetFirstPinNumberFromIRCode     ; Pin number in W
00BB   1C03           00990                         skpc
00BC   28C4           00991                         goto    T_RC5_Ends
                      00992 
00BD                  00993 ir_dis_loop
00BD   00DD           00994                         movwf   CurrentPin
00BE   083D           00995                         movf    Read_Conf_Mode, W
00BF   00C0           00996                         movwf   CurrentConf
                      00997 
                      00998                         ; Figure out which output type this one have
                      00999                         ;
00C0   2700           01000                         call    DeactivateOutputMask
00C1   26D4           01001                         call    GetNextPinNumberFromIRCode
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C2   1803           01002                         skpnc
00C3   28BD           01003                         goto    ir_dis_loop
                      01004 
                      01005 
00C4                  01006 T_RC5_Ends
                      01007 
00C4   276C           01008                         call    SetOutputsFromMasks
                      01009 
                      01010                 if ICE  ; -------------------------------------
                      01011                         nop             ; Breakpoint :
                      01012                 endif   ; -------------------------------------
00C5   1024           01013                         bcf             Flags, IR_WAITING_FOR_TIMEOUT
                      01014 
                      01015                 if DELAYED_SAVE
00C6   3064           01016                         movlw   DELAYED_COUNT
00C7   00E3           01017                         movwf   DelayedSaveTimer
                      01018                 endif
                      01019                          ; Dont save output state if radio button, that is done in radio release part
                      01020                          ; (two radio buttons here in make-before-break)
                      01021                  ; ToDo : Double code
                      01022                 ifdef CONF_RADIO_MODE
00C8   0840           01023                         movf    CurrentConf, W
00C9   26DA           01024                         call    ModeConf2Int
00CA   3C02           01025                         sublw   CONF_RADIO_MODE
00CB   1903           01026                         skpnz
00CC   28CE           01027                         goto    save_at_exit
                      01028                 endif
                      01029 
                      01030                 ifdef CONF_RADIO_NEXT
                      01031                         movf    CurrentConf, W
                      01032                         call    ModeConf2Int
                      01033                         sublw   CONF_RADIO_NEXT
                      01034                         skpnz
                      01035                         goto    save_at_exit
                      01036         endif
                      01037 
                      01038                 ifdef CONF_RADIO_PREV
                      01039                         movf    CurrentConf, W
                      01040                         call    ModeConf2Int
                      01041                         sublw   CONF_RADIO_PREV
                      01042                         skpnz
                      01043                         goto    save_at_exit
                      01044         endif
                      01045 
00CD   28CE           01046                         goto    no_save_at_exit
                      01047 
                      01048                 ; Save.
00CE                  01049 save_at_exit
                      01050                 if ICE  ; -------------------------------------
                      01051                         nop             ; Breakpoint :
                      01052                         nop             ;
                      01053                 endif   ; -------------------------------------
                      01054 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01055                 if !DELAYED_SAVE
                      01056                         call    SaveCurrentOutputLevels
                      01057                 endif
00CE                  01058 no_save_at_exit
                      01059 
00CE                  01060 AcknTimout
                      01061 
00CE   1171           01062                         bcf             IRPublicFlags, IR_TIMEOUT
                      01063 
00CF                  01064 RT_no_timeout
                      01065 
                      01066 
                      01067 
                      01068 
                      01069                 ; I2C engine call
                      01070                 ; --------------------------------------------------
                      01071                 ;
00CF   22E4           01072                         call    I2C_MasterAsyncEngine
                      01073 
                      01074 
                      01075 
                      01076                 ; I2C Serial Monitor
                      01077                 ; --------------------------------------------------
                      01078                 ; Transmit information about level changes over I2C bus
                      01079 
00D0   1948           01080                 btfsc   I2C_Public, I2C_TX_START
00D1   290B           01081                 goto    I2C_UpdateEnds
                      01082                  ;
                      01083 
                      01084                  ; Loop for all 16 outputs
                      01085                  ;
00D2   1003           01086                 clrc
00D3   0CD6           01087                 rrf     SerBitMask32+3, F
00D4   0CD5           01088                 rrf     SerBitMask32+2, F
00D5   0CD4           01089                 rrf     SerBitMask32+1, F
00D6   0CD3           01090                 rrf     SerBitMask32+0, F
                      01091 
00D7   03D7           01092                         decf    SER_Index, F
00D8   1FD7           01093                         btfss   SER_Index, BIT7
00D9   28DB           01094                         goto    no_wrap_yet
                      01095 
                      01096              ; "SER_Index" became -1, install channel 31
                      01097              ;
00DA   21FB           01098             call        ResetSerialTestMask
                      01099 
00DB                  01100 no_wrap_yet
                      01101 
                      01102                          ; Get bytes to work on
                      01103 
00DB   0D57           01104                         rlf     SER_Index, W
00DC   00AF           01105                         movwf   TempIndex
00DD   0EAF           01106                         swapf   TempIndex, F
00DE   3003           01107                         movlw   b'00000011'
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DF   05AF           01108                         andwf   TempIndex, F
                      01109 
00E0   3026           01110                         movlw   OutputsMask32
00E1   072F           01111                         addwf   TempIndex, W
00E2   0084           01112                         movwf   FSR
00E3   0800           01113                         movf    INDF, W
00E4   00DF           01114                         movwf   OutputMaskTemp          ; The current state of PIC outputs (16phys+16vir
                            t)
                      01115 
00E5   3053           01116                         movlw   SerBitMask32
00E6   072F           01117                         addwf   TempIndex, W
00E7   0084           01118                         movwf   FSR
00E8   0800           01119                         movf    INDF, W
00E9   00E0           01120                         movwf   SerialMaskTemp          ; The current bit mask (1 high in 32 bit registe
                            r)
                      01121 
00EA   304F           01122                         movlw   SerOutputsMaskCopy32
00EB   072F           01123                         addwf   TempIndex, W
00EC   0084           01124                         movwf   FSR
00ED   0800           01125                         movf    INDF, W
00EE   00DE           01126                         movwf   SerialCopyTemp          ; The current state of serial outputs (32)
                      01127 
                      01128              ; Test byte
                      01129              ; ------------------------------
                      01130              ;
00EF   085E           01131             movf    SerialCopyTemp, W
00F0   065F           01132             xorwf   OutputMaskTemp, W
00F1   0560           01133             andwf   SerialMaskTemp, W
                      01134 
                      01135              ; W=0 if SER_OutputsCopyLow[SER_Index] == OutputsMaskLow[SER_Index]
                      01136              ; then no action
                      01137              ;
00F2   1903           01138             skpnz
00F3   290B           01139             goto    I2C_UpdateEnds
                      01140 
                      01141              ; Level has changed, invert "SER_OutputsCopyLow[SER_Index]"
                      01142              ;
00F4   085E           01143             movf    SerialCopyTemp, W
00F5   0560           01144             andwf   SerialMaskTemp, W
00F6   1D03           01145             skpz
00F7   28FD           01146             goto    SerLowIsHigh
                      01147 
                      01148              ; SER_OutputsCopyLow[SER_Index] == 0, now set it high
                      01149              ;
00F8   0860           01150             movf    SerialMaskTemp, W
00F9   04DE           01151             iorwf   SerialCopyTemp, F
00FA   3001           01152             movlw       I2C_725_CMD_LEVEL_HIGH
00FB   00CD           01153             movwf       I2C_TxCommand
00FC   2902           01154             goto    SaveNewSerialState
                      01155 
00FD                  01156 SerLowIsHigh
                      01157              ; SER_OutputsCopyLow[SER_Index] == 1, now clear it
                      01158              ;
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00FD   0960           01159             comf    SerialMaskTemp, W
00FE   05DE           01160             andwf   SerialCopyTemp, F
00FF   3000           01161             movlw       I2C_725_CMD_LEVEL_LOW
0100   00CD           01162             movwf       I2C_TxCommand
0101   2902           01163             goto    SaveNewSerialState
                      01164 
                      01165 
                      01166 
0102                  01167 SaveNewSerialState
                      01168                         ; Save temporary back again
                      01169                         ; --------------------
0102   085E           01170                         movf    SerialCopyTemp, W
0103   0080           01171                         movwf   INDF
                      01172 
                      01173 
                      01174                         ; Install transmission
                      01175                         ; --------------------
                      01176                         ;
0104   0857           01177                         movf    SER_Index, W
0105   00CE           01178                         movwf   I2C_TxData
                      01179 
0106   3068           01180                 movlw   I2C_725_BROADCAST_ADDRESS * 2
0107   00CC           01181                 movwf   I2C_TxAddress
                      01182                  ;
0108   3003           01183                 movlw   I2C_725_LEVEL_CHANGED_CMD_LEN
0109   00CB           01184                 movwf   I2C_TxNofBytes
                      01185                  ;
010A   1548           01186                 bsf     I2C_Public, I2C_TX_START
                      01187 
                      01188 
010B                  01189 I2C_UpdateEnds
                      01190 
                      01191 
                      01192 
                      01193 
                      01194                         ;
                      01195                         ;
                      01196                         ; --------------------------------------------------
                      01197                         ; Timed code - "ISR Slow Timer"
                      01198                         ; --------------------------------------------------
                      01199                         ; Ticked by isr counter "RealtimeTickCounter"
                      01200                         ;
                      01201                         ;
                      01202                         updatez RealtimeTickCounter
010B   0103               M                         clrw
010C   0723               M                         addwf   RealtimeTickCounter, W
010D   1903           01203                         skpnz
010E   297B           01204                         goto    TimedCodeEnds
                      01205 
                      01206 
                      01207                 if DELAYED_SETS
                      01208                         updatez DelayedSetCount
010F   0103               M                         clrw
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0110   076A               M                         addwf   DelayedSetCount, W
0111   1903           01209                         skpnz
0112   2917           01210                         goto    dsasda
0113   0BEA           01211                         decfsz  DelayedSetCount, F
0114   2917           01212                         goto    dsasda
                      01213 
0115   0000           01214                         nop
0116   276C           01215                         call    SetOutputsFromMasks
0117                  01216 dsasda
                      01217                 endif
                      01218 
                      01219 
                      01220                 if DELAYED_SAVE
                      01221                         ; Check if the delayed save counter is active
                      01222                         updatez DelayedSaveTimer
0117   0103               M                         clrw
0118   0763               M                         addwf   DelayedSaveTimer, W
0119   1903           01223                         skpnz
011A   2921           01224                         goto    no_delayed
                      01225 
                      01226                         ; Counter is active. Reset it here if the IR is active
011B   3064           01227                         movlw   DELAYED_COUNT
011C   19F1           01228                         btfsc   IRPublicFlags, IR_BUSY
011D   00E3           01229                         movwf   DelayedSaveTimer
                      01230 
011E   0BE3           01231                         decfsz  DelayedSaveTimer, F
011F   2921           01232                         goto    no_delayed
                      01233 
                      01234                 if ICE  ; -------------------------------------
                      01235                         nop             ; Breakpoint :
                      01236                         nop             ;
                      01237                 endif   ; -------------------------------------
0120   270D           01238                         call    SaveCurrentOutputLevels
0121                  01239 no_delayed
                      01240                 endif
                      01241 
                      01242                          ;
0121   03A3           01243                         decf    RealtimeTickCounter, F
                      01244 
                      01245                 if !RELEASE
                      01246                          btfss  RealtimeTickCounter, BIT4
                      01247                          goto   no_tick_ovf
                      01248 
                      01249                          movlw  FATAL_REALTIME_STARVATION
                      01250                          call   FatalStop
                      01251 
                      01252 no_tick_ovf
                      01253                 endif
                      01254 
                      01255 
                      01256 
                      01257 
                      01258                         ; Maintain BiToggleRegBootDelay - delayed on
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01259                         ; ------------------------------
                      01260                         ;
                      01261             updatez BiToggleRegBootDelay
0122   0103               M                         clrw
0123   0765               M                         addwf   BiToggleRegBootDelay, W
0124   1903           01262             skpnz
0125   292C           01263             goto    BT_done
                      01264              ;
0126   0BE6           01265             decfsz  BiToggleCntBootDelay, F
0127   292C           01266             goto    BT_done
                      01267                         ;
                      01268                         ; Set the delayed outputs high and clear delay register
                      01269                         ; See 'FilterHighBiToggleBootDelayPins()'
                      01270                         ;
0128   0865           01271             movf    BiToggleRegBootDelay, W
0129   04A7           01272             iorwf   OutputsMask32+1, F
012A   01E5           01273             clrf    BiToggleRegBootDelay
                      01274              ;
012B   276C           01275             call    SetOutputsFromMasks
012C                  01276 BT_done
                      01277 
                      01278 
                      01279 
                      01280 
                      01281                         ; Check for programming mode request
                      01282                         ; ------------------------------
                      01283 
012C   1CA4           01284                         btfss   Flags, PROGRAM_MODE_ON
012D   293C           01285                         goto    CheckForPgmMode
                      01286 
                      01287                         ; ----------------------
                      01288                         ; Programming mode enabled
                      01289                         ; ----------------------
                      01290 
                      01291                 if ICE  ; -------------------------------------
                      01292                         nop             ; Breakpoint :
                      01293                         nop             ;
                      01294                 endif   ; -------------------------------------
                      01295 
                      01296                         ; If LED pin is high again when allready in programming
                      01297                         ; mode then use extended pin numbers 16-31
                      01298 
012E   1F86           01299                         btfss   LED_PORT, LED_PIN
012F   2935           01300                         goto    NoExtended
0130   1A24           01301                         btfsc   LedFlags, LED_ON
0131   2935           01302                         goto    NoExtended
                      01303 
                      01304                 if EXTENDED_PIN_SET == BIT3
0132   3008           01305                         movlw   b'00001000'
0133   06A4           01306                         xorwf   Flags, F
                      01307                 else
                      01308                         error "Fix bitmask @1259"
                      01309                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0134   2941           01310                         goto    SignalProgrammingMode
                      01311 
0135                  01312 NoExtended
                      01313 
                      01314 
0135   1824           01315                         btfsc   Flags, IR_WAITING_FOR_TIMEOUT
0136   2970           01316                         goto    UserPgmEnds
                      01317 
0137   2277           01318                         call    InitializeAllOutputs
                      01319 
                      01320                          ; A pin forced to wrong level ?
0138   2499           01321                         call    LookForShortedPins
                      01322 
0139   1803           01323                         skpnc
013A   2186           01324                         call    ProgrammingRequest
013B   2970           01325                         goto    UserPgmEnds
                      01326 
                      01327                         ; ----------------------
                      01328                         ; Programming mode test
                      01329                         ; ----------------------
013C                  01330 CheckForPgmMode
                      01331                         ; Check if power led is pulled to unexpectedly to vcc.
                      01332                         ; If not then proceed to the normal run mode part below.
                      01333                         ;
013C   1F86           01334                         btfss   LED_PORT, LED_PIN
013D   2947           01335                         goto    RunMode
                      01336 
013E   1A24           01337                         btfsc   LedFlags, LED_ON
013F   2970           01338                         goto    UserPgmEnds
                      01339 
                      01340 
                      01341                 ; Low Led output forced high -> enter programming mode
0140   14A4           01342                         bsf     Flags, PROGRAM_MODE_ON
                      01343 
0141                  01344 SignalProgrammingMode
                      01345                 ; Do a 2 sec very fast blinking
                      01346                         ;
0141   300F           01347                         movlw   .15
0142   19A4           01348                         btfsc   Flags, EXTENDED_PIN_SET
0143   301E           01349                         movlw   .30
                      01350 
0144   21D5           01351                         call    LedFlasher
                      01352 
0145   01A3           01353                         clrf    RealtimeTickCounter
0146   2970           01354                         goto    UserPgmEnds
                      01355 
                      01356 
                      01357 
                      01358                         ; ----------------------
                      01359                         ; Normal run mode
                      01360                         ; ----------------------
                      01361                         ; Intercept user shorts on the i/o pins (typ. radio or bitoggle related)
0147                  01362 RunMode
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01363 
0147   1924           01364                         btfsc   Flags, WAITING_FOR_DEBOUNCE
0148   296A           01365                         goto    WaitingForSwitchDebounce
                      01366 
                      01367                 if ICE  ; -------------------------------------
                      01368                         nop             ; Breakpoint :
                      01369                 endif   ; -------------------------------------
                      01370 
0149   2499           01371                         call    LookForShortedPins
                      01372 
014A   1C03           01373                         skpc
014B   2970           01374                         goto    UserPgmEnds
                      01375 
                      01376                 if ICE  ; -------------------------------------
                      01377                         nop             ; Breakpoint :
                      01378                         nop
                      01379                 endif   ; -------------------------------------
                      01380 
                      01381              ; User has shorted a pin. Figure out if this is part of a radiogroup ?
                      01382              ;
014C   2739           01383             call    GetFirstCodeAndConf
014D   1C03           01384 run_again   skpc
014E   2970           01385             goto    RunModeEnds
                      01386 
                      01387                         ; Got a assignment on this pin .. check for a 'complicated' mode
                      01388                         ;
014F   00C6           01389                         movwf   LocalTemp       ; save pin number
                      01390 
                      01391                 ifdef CONF_RADIO_MODE
0150   26DA           01392                         call    ModeConf2Int
0151   3C02           01393                         sublw   CONF_RADIO_MODE
0152   1903           01394                         skpnz
0153   2960           01395                         goto    radio_pin
                      01396                 endif
                      01397 
                      01398                 ifdef CONF_RADIO_PREV
                      01399                 movf    LocalTemp, W
                      01400                         call    ModeConf2Int
                      01401                         sublw   CONF_RADIO_PREV
                      01402                         skpnz
                      01403                         goto    radio_prev_pin
                      01404                 endif
                      01405 
                      01406                 ifdef CONF_RADIO_NEXT
                      01407                 movf    LocalTemp, W
                      01408                         call    ModeConf2Int
                      01409                         sublw   CONF_RADIO_NEXT
                      01410                         skpnz
                      01411                         goto    radio_next_pin
                      01412                 endif
                      01413 
                      01414         ifdef CONF_BI_TOGGLE_MODE
0154   0846           01415                 movf    LocalTemp, W
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0155   26DA           01416                 call    ModeConf2Int
0156   3C03           01417                 sublw   CONF_BI_TOGGLE_MODE
0157   1903           01418                 skpnz
0158   2960           01419                 goto    bitoggle_pin
                      01420         endif
                      01421 
                      01422                 ifdef CONF_BI_TOGGLE_MODE_BOOT_DELAY
0159   0846           01423             movf        LocalTemp, W
015A   26DA           01424             call    ModeConf2Int
015B   3C04           01425             sublw   CONF_BI_TOGGLE_MODE_BOOT_DELAY
015C   1903           01426             skpnz
015D   2960           01427             goto    bitoggle_boot_delay_pin
                      01428                 endif
                      01429 
                      01430                  ;
015E   274D           01431                         call    GetNextCodeAndConf
015F   294D           01432                         goto    run_again
                      01433 
                      01434 
                      01435 
                      01436 
                      01437                 ; Shorted pin belongs to radio or bitoggle group
                      01438                 ; ------------------------------
                      01439                 ; First set the new pin high here.
                      01440                 ; FIXIT - merge with new IR code
                      01441                 ;
0160                  01442 radio_pin
0160                  01443 bitoggle_pin
0160                  01444 bitoggle_boot_delay_pin
0160                  01445 radio_prev_pin
0160                  01446 radio_next_pin
                      01447 
                      01448 
0160   083F           01449                         movf    Read_Conf_Pin, W
0161   00DD           01450                         movwf   CurrentPin
                      01451                 ;
0162   083D           01452                         movf    Read_Conf_Mode, W
0163   00C0           01453                         movwf   CurrentConf
                      01454                          ;
0164   26DE           01455                         call    ActivateOutputMask
                      01456 
0165   276C           01457                         call    SetOutputsFromMasks
                      01458 
0166   1524           01459                         bsf             Flags, WAITING_FOR_DEBOUNCE
0167   3005           01460 reload_wait     movlw   KEY_DEBOUNCE_TIME
0168   00E4           01461                         movwf   KeyReleaseCnt
                      01462 
0169   2970           01463                         goto    RunModeEnds
                      01464 
                      01465 
                      01466 
016A                  01467 WaitingForSwitchDebounce
                      01468 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

016A   2499           01469                         call    LookForShortedPins
016B   1803           01470                         skpnc
016C   2967           01471                         goto    reload_wait
                      01472 
016D   0BE4           01473                         decfsz  KeyReleaseCnt, F
016E   2970           01474                         goto    RunModeEnds
                      01475 
                      01476                          ; Waiting is over
016F   1124           01477                         bcf             Flags, WAITING_FOR_DEBOUNCE
                      01478 
                      01479 
0170                  01480 RunModeEnds
0170                  01481 UserPgmEnds
                      01482 
                      01483 
                      01484                          ; Signal LED
                      01485                          ; --------------------------------------------------
0170   2210           01486                         call    Led
                      01487 
                      01488 
                      01489                          ; Radio button - release of unselected pins
                      01490                          ; --------------------------------------------------
                      01491 
                      01492                         updatez RadioPrescaler
0171   0103               M                         clrw
0172   0738               M                         addwf   RadioPrescaler, W
0173   1903           01493                         skpnz
0174   297B           01494                         goto    no_radio
                      01495 
0175   0BB8           01496                         decfsz  RadioPrescaler, F
0176   297B           01497                         goto    no_radio
                      01498 
                      01499                          ; RadioPrescaler has reached zero
                      01500                 if ICE  ; -------------------------------------
                      01501                         nop             ; Breakpoint :
                      01502                 endif   ; -------------------------------------
                      01503 
                      01504                 ifdef CONF_RADIO_NEXT
                      01505                         btfss   RadioModeNextPrevFlags, PRESCALER_PRESCALER
                      01506                         goto    prepreend
                      01507 
                      01508                         bcf             RadioModeNextPrevFlags, PRESCALER_PRESCALER
                      01509                         movf    RadioPinActivated, W
                      01510                         call    SetBitInOutputMask
                      01511                         call    SetOutputsFromMasks
                      01512                         movlw   MAKE_BEFORE_BREAK_TICKS
                      01513                         movwf   RadioPrescaler
                      01514                         goto    no_radio
                      01515 prepreend
                      01516                 endif
                      01517 
0177   2688           01518                         call    ClearRadioChannels
0178   276C           01519                         call    SetOutputsFromMasks
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01520 
                      01521                 if ICE  ; -------------------------------------
                      01522                         nop             ; Breakpoint :
                      01523                         nop             ;
                      01524                 endif   ; -------------------------------------
                      01525 
                      01526                 if DELAYED_SAVE
0179   3064           01527                         movlw   DELAYED_COUNT
017A   00E3           01528                         movwf   DelayedSaveTimer
                      01529                 else
                      01530                         call    SaveCurrentOutputLevels
                      01531                 endif
017B                  01532 no_radio
                      01533 
                      01534 
017B                  01535 TimedCodeEnds
                      01536 
017B   2897           01537                         goto    MainLoop
                      01538 
                      01539 
                      01540 
                      01541 ;;;-----------------------------------------------------------------------
                      01542 ;;;-----------------------------------------------------------------------
                      01543 ;;;
                      01544 ;;;     Realtime ends
                      01545 ;;;
                      01546 ;;;-----------------------------------------------------------------------
                      01547 ;;;-----------------------------------------------------------------------
                      01548 
                      01549 
017C                  01550 WaitForRelease
                      01551 
017C                  01552 still_selected
017C   276C           01553                         call    SetOutputsFromMasks
                      01554 
                      01555                 if ICE  ; -------------------------------------
                      01556                         nop             ; Breakpoint :
                      01557                         nop             ;
                      01558                 endif   ; -------------------------------------
                      01559 
017D   2499           01560                         call    LookForShortedPins
017E   1803           01561                         skpnc
017F   297C           01562                         goto    still_selected
                      01563 
                      01564                 if ICE  ; -------------------------------------
                      01565                         nop             ; Breakpoint :
                      01566                         nop             ;
                      01567                 endif   ; -------------------------------------
                      01568 
0180   0008           01569                         return
                      01570 
0181                  01571 WaitForRequest
                      01572 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0181                  01573 no_selection
0181   276C           01574                         call    SetOutputsFromMasks
0182   2499           01575                         call    LookForShortedPins
0183   1C03           01576                         skpc
0184   2981           01577                         goto    no_selection
0185   0008           01578                         return
                      01579 
                      01580 
                      01581                 ; -------------------------------------------------------------------
                      01582                 ; ProgrammingRequest
                      01583                 ; -------------------------------------------------------------
                      01584                 ;
                      01585                 ;
0186                  01586 ProgrammingRequest
                      01587 
0186   00B0           01588                         movwf   Pin
                      01589 
0187   1271           01590                         bcf             IRPublicFlags, IR_READY
                      01591 
0188   01BC           01592                         clrf    Write_Conf_Mode
0189   01BE           01593                         clrf    Write_Conf_Pin
                      01594                          ;
                      01595                         LedOn
018A   0000               M                         nop
018B   1786               M                         bsf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
018C   0000               M                         nop
018D   1005               M                         bcf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
                      01596 
018E   217C           01597                         call    WaitForRelease
                      01598 
018F   30FA           01599                         movlw   .250
0190   229C           01600                         call    msDelay
0191   30FA           01601                         movlw   .250
0192   229C           01602                         call    msDelay
                      01603 
                      01604                  ; Get number of blinks plus one in counter
                      01605                  ;
0193                  01606 NewModeBlink
0193   083C           01607                         movf    Write_Conf_Mode, W
0194   26DA           01608                         call    ModeConf2Int
0195   3E01           01609                         addlw   1
0196   00C6           01610                         movwf   LocalTemp
                      01611 
0197                  01612 led_pulse_again
                      01613 
0197   30FA           01614                         movlw   .250
0198   229C           01615                         call    msDelay
                      01616                         LedOff
0199   0000               M                         nop
019A   1386               M                         bcf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

019B   0000               M                         nop
019C   1405               M                         bsf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
019D   3096           01617                         movlw   .150
019E   229C           01618                         call    msDelay
                      01619 
                      01620                 if ICE  ; -------------------------------------
                      01621                         nop             ; Breakpoint :
                      01622                         nop             ;
                      01623                 endif   ; -------------------------------------
                      01624 
019F   217C           01625                         call    WaitForRelease
                      01626                         LedOn
01A0   0000               M                         nop
01A1   1786               M                         bsf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
01A2   0000               M                         nop
01A3   1005               M                         bcf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
01A4   0BC6           01627                         decfsz  LocalTemp, F
01A5   2997           01628                         goto    led_pulse_again
                      01629                          ;
                      01630                          ; Loop until a IR code is flagged or a mode change request
                      01631                          ;
01A6                  01632 code_req_wait
                      01633                 if ICE  ; -------------------------------------
                      01634                         nop             ; Breakpoint :
                      01635                         nop             ;
                      01636                 endif   ; -------------------------------------
                      01637 
01A6   1A71           01638                         btfsc   IRPublicFlags, IR_READY
01A7   29B5           01639                         goto    got_a_code
                      01640                          ;
                      01641                          ; No code yet, check for a new programming pulse (change pin mode)
                      01642                          ;
01A8   276C           01643                         call    SetOutputsFromMasks
                      01644 
                      01645                 if ICE  ; -------------------------------------
                      01646                         nop             ; Breakpoint :
                      01647                         nop             ;
                      01648                 endif   ; -------------------------------------
                      01649 
01A9   2499           01650                         call    LookForShortedPins
01AA   1C03           01651                         skpc
01AB   29A6           01652                         goto    code_req_wait
                      01653 
                      01654                 if ICE  ; -------------------------------------
                      01655                         nop             ; Breakpoint :
                      01656                         nop             ;
                      01657                 endif   ; -------------------------------------
                      01658 
                      01659                          ; Next mode selected
                      01660                          ;
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01AC   083C           01661                         movf    Write_Conf_Mode, W
01AD   26DA           01662                         call    ModeConf2Int
01AE   3E01           01663                         addlw   1
                      01664                          ;
                      01665                          ; Restrict the upper mode number
                      01666                          ;
01AF   3C05           01667                         sublw   NOF_CONF_MODES
01B0   1D03           01668                         skpz
01B1   3C05           01669                         sublw   NOF_CONF_MODES
01B2   26DC           01670                         call    ModeInt2Conf
01B3   00BC           01671                         movwf   Write_Conf_Mode
                      01672 
01B4   2993           01673                         goto    NewModeBlink
                      01674 
                      01675 
                      01676 
                      01677 
01B5                  01678 got_a_code
                      01679                         LedOff
01B5   0000               M                         nop
01B6   1386               M                         bcf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
01B7   0000               M                         nop
01B8   1405               M                         bsf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
                      01680 
                      01681                          ; User has pressed a key - save IR code
                      01682                          ; ----------------------------------------
                      01683                          ;
                      01684                 if ICE  ; -------------------------------------
                      01685                         nop             ; Breakpoint :
                      01686                         nop             ;
                      01687                 endif   ; -------------------------------------
                      01688 
                      01689 
01B9   086D           01690                         movf    RC5Low, W
01BA   00BA           01691                         movwf   Write_Low
01BB   086E           01692                         movf    RC5High, W
01BC   00BB           01693                         movwf   Write_High
                      01694 
                      01695 
                      01696                          ; Define pin
                      01697                          ;
01BD   0830           01698                         movf    Pin, W
01BE   390F           01699                         andlw   0x0F
01BF   04BE           01700                         iorwf   Write_Conf_Pin, F
                      01701                          ;
01C0   19A4           01702                         btfsc   Flags, EXTENDED_PIN_SET
01C1   163E           01703                         bsf             Write_Conf_Pin, BIT4
                      01704 
                      01705 
                      01706                          ; Extract mode from IR flag register
                      01707                          ;
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C2   0E71           01708             swapf   IRPublicFlags, W
01C3   3930           01709             andlw   b'00110000'
01C4   04BC           01710             iorwf   Write_Conf_Mode, F
                      01711 
                      01712                          ; If exists allready then call fatal
                      01713                          ;
01C5   262B           01714                         call    FindCodeAndConfAndPinInTable
01C6   1803           01715                         skpnc
01C7   21D2           01716                         call    FatalExists
                      01717 
                      01718 
                      01719                 if ICE  ; -------------------------------------
                      01720                         nop             ; Breakpoint :
                      01721                         nop             ;
                      01722                 endif   ; -------------------------------------
                      01723 
01C8   261A           01724                         call    AddPinDataToTable
01C9   1C03           01725                         skpc
01CA   21CF           01726                         call    FatalNoRoomLeft
                      01727 
                      01728                 if ICE  ; -------------------------------------
                      01729                         nop             ; Breakpoint :
                      01730                         nop             ;
                      01731                 endif   ; -------------------------------------
                      01732 
                      01733                          ; Define the output state to exit programming with
                      01734                          ;
01CB   2726           01735                         call    ClearTableOutputLevels
01CC   272C           01736                         call    RestoreOutputLevelMask
01CD   276C           01737                         call    SetOutputsFromMasks
                      01738 
                      01739                 if !RELEASE
                      01740                         clrf    RealtimeTickCounter
                      01741                 endif
                      01742 
01CE   0008           01743                         return
                      01744 
                      01745 
                      01746 
01CF                  01747 FatalNoRoomLeft
01CF   3004           01748                         movlw   FATAL_NO_MORE_ROOM
01D0   22B3           01749                         call    FatalStop
01D1   0008           01750                         return
                      01751 
01D2                  01752 FatalExists
01D2   3003           01753                         movlw   FATAL_ALLREADY_EXISTS
01D3   22B3           01754                         call    FatalStop
01D4   0008           01755                         return
                      01756 
                      01757 
                      01758 
                      01759 
01D5   00AF           01760 LedFlasher      movwf   TempIndex
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01761 flash_loop      LedOn
01D6   0000               M                         nop
01D7   1786               M                         bsf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
01D8   0000               M                         nop
01D9   1005               M                         bcf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
01DA   3032           01762                         movlw   .50
01DB   229C           01763                         call    msDelay
                      01764                         LedOff
01DC   0000               M                         nop
01DD   1386               M                         bcf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
01DE   0000               M                         nop
01DF   1405               M                         bsf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
01E0   3032           01765                         movlw   .50
01E1   229C           01766                         call    msDelay
01E2   0BAF           01767             decfsz  TempIndex, F
01E3   29D6           01768             goto    flash_loop
01E4   0008           01769             return
                      01770 
                      01771 
                      01772 
                      01773                 ; -------------------------------------------------------------------
                      01774                 ;       CheckForDeleteRequest
                      01775                 ;       -------------------------------------------------------------
                      01776                 ;       A output pin forced to high level while cold-starting means
                      01777                 ;       that all assignments on this pin is deleted, and a high driven
                      01778                 ;       led pin erases everything...
                      01779                 ;
01E5                  01780 CheckForDeleteRequest
                      01781 
                      01782                 if ICE  ; -------------------------------------
                      01783                         nop             ; Breakpoint :
                      01784                         nop             ;
                      01785                 endif   ; -------------------------------------
                      01786 
01E5   1F86           01787                         btfss   LED_PORT, LED_PIN
01E6   0008           01788                         return
                      01789 
                      01790                 ; User pulled LED pin high, enter delete mode
                      01791                 ; This part will newer return
                      01792                         di
  0000                    M                         local   __di_fail__
01E7   138B               M __di_fail__     bcf     INTCON, GIE
01E8   1B8B               M                         btfsc   INTCON, GIE
01E9   29E7               M                         goto    __di_fail__
01EA   3032           01793                 movlw   .50
01EB   21D5           01794                 call    LedFlasher
                      01795                 ; The short should have been removed by now ! (and LED low)
                      01796 
01EC                  01797 DeleteModeHome
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01EC   0064           01798                         clrwdt
                      01799 
                      01800                 if ICE  ; -------------------------------------
                      01801                         nop             ; Breakpoint :
                      01802                         nop             ;
                      01803                 endif   ; -------------------------------------
                      01804 
01ED   2286           01805                         call    ClearAllOutputs
01EE   1F86           01806                         btfss   LED_PORT, LED_PIN
01EF   29F4           01807                         goto    CheckPinDelete
                      01808 
                      01809                 if ICE  ; -------------------------------------
                      01810                         nop             ; Breakpoint :
                      01811                         nop             ;
                      01812                 endif   ; -------------------------------------
                      01813 
                      01814                 ; Delete all and enter a blink forever
                      01815                 ;
01F0   2298           01816                         call    ClearSystem
                      01817                         ;
01F1   30C8           01818 forev           movlw   .200
01F2   21D5           01819                         call    LedFlasher
01F3   29F1           01820                 goto    forev
                      01821 
                      01822 
01F4                  01823 CheckPinDelete
                      01824 
01F4   2499           01825                         call    LookForShortedPins
01F5   1C03           01826                         skpc
01F6   29EC           01827                         goto    DeleteModeHome
                      01828 
                      01829                 if ICE  ; -------------------------------------
                      01830                         nop             ; Breakpoint :
                      01831                         nop             ;
                      01832                 endif   ; -------------------------------------
                      01833 
01F7   266C           01834                         call    ClearPinFromTable
01F8   3014           01835                         movlw   .20
01F9   21D5           01836                         call    LedFlasher
                      01837 
                      01838                 if ICE  ; -------------------------------------
                      01839                         nop             ; Breakpoint :
                      01840                         nop             ;
                      01841                 endif   ; -------------------------------------
                      01842 
01FA   29EC           01843                         goto    DeleteModeHome
                      01844 
                      01845 
                      01846 
                      01847 
                      01848 
01FB                  01849 ResetSerialTestMask
                      01850 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01FB   3080           01851             movlw   0x80
01FC   00D6           01852             movwf   SerBitMask32+3
01FD   01D5           01853             clrf    SerBitMask32+2
01FE   01D4           01854             clrf    SerBitMask32+1
01FF   01D3           01855             clrf    SerBitMask32+0
0200   301F           01856             movlw   .31
0201   00D7           01857             movwf   SER_Index
0202   0008           01858                         return
                      01859 
                      01860 
                      01861 
                      01862 
                      01863 ;;;-----------------------------------------------------------------------
                      01864 ;;; S U B R U T I N E S
                      01865 ;;;-----------------------------------------------------------------------
                      01866 
                      01867 
                      01868         ; Signal LED blinker
                      01869         ; ----------------------------------------------------------
                      01870         ; The purpose is to get a LED blinker that is somewhat decoupled from
                      01871         ; the calling code regarding call order, and to get one that do not have
                      01872         ; abrubt pulses.
                      01873         ;
                      01874         ; LedEnable. Rate in W reg, Led high time in W[7..4] (1..15) and led low time in W[3..0] (1..15)
                      01875         ; LedDisable
                      01876         ; Led. Called unconditionally with a fixed frequency.
                      01877         ;
                      01878 
0203                  01879 LedEnable
                      01880 
                      01881 
0203   00AA           01882                         movwf   LedPreset
0204   0AC5           01883                         incf    SleepSemaphore, F
                      01884 
0205   3001           01885                         movlw   1
0206   0245           01886                         subwf   SleepSemaphore, W
                      01887 
0207   1D03           01888                         skpz
0208   0008           01889                         return
                      01890 
0209   12A4           01891                         bcf             LedFlags, LED_CLOSING
020A   1624           01892                         bsf             LedFlags, LED_ON
020B   2A22           01893                         goto    led_high
                      01894 
                      01895 
020C                  01896 LedDisable
                      01897 
020C   0BC5           01898                         decfsz  SleepSemaphore, F
020D   0008           01899                         return
                      01900 
020E   16A4           01901                         bsf             LedFlags, LED_CLOSING
020F   0008           01902                         return
                      01903 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01904 
                      01905 
                      01906                          ; The main body. This code should be called with a
                      01907                          ; frequency of about 30 Hz.
                      01908 
0210   1E24           01909 Led                     btfss   LedFlags, LED_ON
0211   0008           01910                         return
                      01911 
0212   0BAB           01912                         decfsz  LedPrescaler, F
0213   0008           01913                         return
                      01914 
                      01915                 if ICE  ; -------------------------------------
                      01916                         nop             ; Breakpoint :
                      01917                         nop             ;
                      01918                 endif   ; -------------------------------------
                      01919 
0214   1F86           01920                         btfss   LED_PORT, LED_PIN
0215   2A22           01921                         goto    led_high
                      01922 
                      01923                          ; Led is high, turn it off
                      01924                          ; ------------------------------
                      01925                          ;
                      01926                         LedOff
0216   0000               M                         nop
0217   1386               M                         bcf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
0218   0000               M                         nop
0219   1405               M                         bsf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
                      01927                          ;
                      01928                          ; Check if there are a close request pending
                      01929                          ;
021A   1AA4           01930                         btfsc   LedFlags, LED_CLOSING
021B   2A2A           01931                         goto    led_close
                      01932                          ;
                      01933                          ;
021C   300F           01934                         movlw   0x0F
021D   052A           01935                         andwf   LedPreset, W
021E   00AB           01936                         movwf   LedPrescaler
021F   0008           01937                         return
                      01938 
                      01939                          ; Led is low, turn it on
                      01940                          ; ------------------------------
                      01941                          ;
                      01942                          ; Check if there are a close request pending
                      01943                          ;
0220   1AA4           01944                         btfsc   LedFlags, LED_CLOSING
0221   2A2A           01945                         goto    led_close
                      01946 
0222                  01947 led_high
                      01948                         LedOn
0222   0000               M                         nop
0223   1786               M                         bsf             LED_PORT, LED_PIN
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 ifdef LED_INV_PORT
0224   0000               M                         nop
0225   1005               M                         bcf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
0226   0E2A           01949                         swapf   LedPreset, W
0227   390F           01950                         andlw   0x0F
0228   00AB           01951                         movwf   LedPrescaler
0229   0008           01952                         return
                      01953 
                      01954                          ; The blink sequence is at a time where we can stop
                      01955 
022A                  01956 led_close
022A   1224           01957                         bcf     LedFlags, LED_ON
022B   12A4           01958                         bcf     LedFlags, LED_CLOSING
022C   0008           01959                         return
                      01960 
                      01961 
                      01962 
                      01963 
                      01964 
                      01965                 ; -------------------------------------------------------------
                      01966                 ; LocateBiTogglePins
                      01967                 ; -------------------------------------------------------------
                      01968                 ; Traverse assignmentstable and find any running in bitoggle mode.
                      01969                 ; Initialises 'BiToggleRegister' and 'BiToggleRegBootDelay'
                      01970                 ;
                      01971                 ;
022D                  01972 LocateBiTogglePins
                      01973 
                      01974                 ifdef BI_TOGGLE_DEFINED
                      01975 
                      01976              ; First the looping where any bitoggle pins get a bit set in
                      01977              ; the "BiToggleRegister"
                      01978              ; Loop goes from pin 11 -> 8
                      01979 
022D   3004           01980             movlw   .4
022E   00E2           01981             movwf   BiToggleTemp            ; Loop counter
                      01982 
022F   01E1           01983             clrf    BiToggleRegister
                      01984 
0230                  01985 LoopAllFour
0230   3007           01986             movlw   .7
0231   0762           01987             addwf   BiToggleTemp, W
0232   2739           01988             call    GetFirstCodeAndConf     ; Param : Pin in W
                      01989 
0233                  01990 BiToggleLoop
0233   1C03           01991                         skpc
0234   2A6E           01992                         goto    BiToggleSearchEnds
                      01993 
                      01994              ; Got a assignment ...
                      01995              ;
0235   26DA           01996             call    ModeConf2Int
0236   3C03           01997             sublw   VALUE_CONF_BI_TOGGLE_MODE
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0237   1D03           01998             skpz
0238   2A59           01999             goto    TestForBootDelay
                      02000 
                      02001 
                      02002              ; Found a bitoggle pin.
                      02003              ; ------------------------------------------------------------
                      02004              ; Set "BiToggleRegister" bit.
                      02005              ; Actions are the slave pin as input pins, and the output mask
                      02006              ; should be set high on slave to catch user shorts to gnd.
                      02007              ;
0239                  02008 BiToggleJump
0239   3002           02009                         movlw   BiToggleJump / 0x100
023A   008A           02010                         movwf   PCLATH
                      02011                          ;
023B   0362           02012                         decf    BiToggleTemp, W         ; BiToggleTemp runs from 4 to 1
023C   0782           02013                         addwf   PCL, F
                      02014 
023D   2A53           02015             goto    BiTogglePin9
023E   2A4D           02016             goto    BiTogglePin10
023F   2A47           02017             goto    BiTogglePin11
0240   2A41           02018             goto    BiTogglePin12
                      02019 
                      02020                 if BiToggleJump / 0x0100 != $ / 0x0100
                      02021                         error "Page fault in 725.asm #1724"
                      02022                 endif
                      02023 
0241                  02024 BiTogglePin12
                      02025                 ifdef PIN15_PORT
                      02026                         SetBnkF TRISA                           ; Note : Absolute reference !
  00000001                M CURRENT_BANK    set     (TRISA    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
0241   1683               M                         bsf     STATUS, RP0
0242   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0243   1485           02027                         bsf             PIN15_PORT, PIN15
                      02028                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
0244   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
0245   15E1           02029                 bsf     BiToggleRegister, BIT3
                      02030                 endif
0246   2A6E           02031                         goto    BiToggleSearchEnds
                      02032 
0247                  02033 BiTogglePin11
                      02034                 ifdef PIN14_PORT
                      02035                         SetBnkF TRISA                           ; Note : Absolute reference !
  00000001                M CURRENT_BANK    set     (TRISA    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
0247   1683               M                         bsf     STATUS, RP0
0248   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0249   1686           02036                         bsf             PIN14_PORT, PIN14
                      02037                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
024A   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
024B   1561           02038                         bsf     BiToggleRegister, BIT2
                      02039                 endif
024C   2A6E           02040                 goto    BiToggleSearchEnds
                      02041 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

024D                  02042 BiTogglePin10
                      02043                 ifdef PIN13_PORT
                      02044                         SetBnkF TRISA                           ; Note : Absolute reference !
  00000001                M CURRENT_BANK    set     (TRISA    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
024D   1683               M                         bsf     STATUS, RP0
024E   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
024F   1505           02045                         bsf             PIN13_PORT, PIN13
                      02046                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
0250   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
0251   14E1           02047                         bsf     BiToggleRegister, BIT1
                      02048                 endif
0252   2A6E           02049                         goto    BiToggleSearchEnds
                      02050 
0253                  02051 BiTogglePin9
                      02052                 ifdef PIN12_PORT
                      02053                         SetBnkF TRISA                           ; Note : Absolute reference !
  00000001                M CURRENT_BANK    set     (TRISA    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
0253   1683               M                         bsf     STATUS, RP0
0254   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0255   1606           02054                         bsf             PIN12_PORT, PIN12
                      02055                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
0256   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
0257   1461           02056             bsf     BiToggleRegister, BIT0
                      02057                 endif
0258   2A6E           02058                         goto    BiToggleSearchEnds
                      02059 
                      02060 
                      02061                 ; W = mode - CONF_BI_TOGGLE_MODE
0259                  02062 TestForBootDelay
0259   3E01           02063             addlw   VALUE_CONF_BI_TOGGLE_MODE_BOOT_DELAY - VALUE_CONF_BI_TOGGLE_MODE
025A   1D03           02064             skpz
025B   2A6C           02065             goto    BiToggleNextPass
                      02066 
                      02067 
                      02068                         ; Found a bitoggle boot delay pin.
                      02069                         ; ------------------------------------------------------------
                      02070                         ; Set "BiToggleRegBootDelay" bit.
                      02071                         ; Reuses code from bitoggle above
                      02072                         ;
025C                  02073 BiToggleJump2
025C   3002           02074                         movlw   BiToggleJump2 / 0x100
025D   008A           02075                         movwf   PCLATH
                      02076                          ;
025E   0362           02077                         decf    BiToggleTemp, W         ; BiToggleTemp runs from 4 to 1
025F   0782           02078                         addwf   PCL, F
                      02079 
0260   2A6A           02080             goto    BiToggleBootDelayPin9
0261   2A68           02081             goto    BiToggleBootDelayPin10
0262   2A66           02082             goto    BiToggleBootDelayPin11
0263   2A64           02083             goto    BiToggleBootDelayPin12
                      02084 
0264                  02085 BiToggleJumpEnds2
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02086                 if BiToggleJump2 / 0x0100 != BiToggleJumpEnds2 / 0x0100
                      02087                         error "Page fault in 725.asm #1797"
                      02088                 endif
                      02089 
0264                  02090 BiToggleBootDelayPin12
0264   15E5           02091             bsf     BiToggleRegBootDelay, BIT3
0265   2A41           02092             goto    BiTogglePin12
                      02093 
0266                  02094 BiToggleBootDelayPin11
0266   1565           02095             bsf     BiToggleRegBootDelay, BIT2
0267   2A47           02096             goto    BiTogglePin11
                      02097 
0268                  02098 BiToggleBootDelayPin10
0268   14E5           02099             bsf     BiToggleRegBootDelay, BIT1
0269   2A4D           02100             goto    BiTogglePin10
                      02101 
026A                  02102 BiToggleBootDelayPin9
026A   1465           02103             bsf     BiToggleRegBootDelay, BIT0
026B   2A53           02104             goto    BiTogglePin9
                      02105 
                      02106 
                      02107 
026C                  02108 BiToggleNextPass
026C   274D           02109             call    GetNextCodeAndConf
026D   2A33           02110             goto    BiToggleLoop
                      02111 
                      02112 
026E                  02113 BiToggleSearchEnds
                      02114 
026E   0BE2           02115             decfsz  BiToggleTemp, F
026F   2A30           02116             goto    LoopAllFour
                      02117 
                      02118                 if ICE  ; -------------------------------------
                      02119                         nop             ; Breakpoint :
                      02120                         nop             ;
                      02121                 endif   ; -------------------------------------
                      02122 
                      02123                 endif ; ifdef CONF_BI_TOGGLE_MODE
                      02124 
0270   0008           02125                         return
                      02126 
                      02127 
                      02128 
                      02129 
                      02130 
                      02131                 ; -------------------------------------------------------------------
                      02132                 ; FilterHighBiToggleBootDelayPins
                      02133                 ; -------------------------------------------------------------
                      02134                 ; Remove any high levels on delayed bitoggle pins in output mask,
                      02135                 ; modify 'BiToggleRegBootDelay' to contain queued bits only.
                      02136                 ;
                      02137                 ; Dependency : LocateBiTogglePins() must have defined
                      02138 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0271                  02139 FilterHighBiToggleBootDelayPins
                      02140 
                      02141                 if ICE  ; -------------------------------------
                      02142                         nop             ; Breakpoint :
                      02143                         nop             ;
                      02144                 endif   ; -------------------------------------
                      02145 
                      02146              ; Find boot delay pins which should be delayed high level
                      02147              ;
0271   0827           02148             movf    OutputsMask32+1, W
0272   05E5           02149             andwf   BiToggleRegBootDelay, F
                      02150 
                      02151              ; Now clear these in current output mask
                      02152 
0273   0965           02153             comf    BiToggleRegBootDelay, W
0274   05A7           02154             andwf   OutputsMask32+1, F
                      02155 
                      02156              ; After timer expires the BiToggleRegBootDelay now should be
                      02157              ; or'd into OutputsMask32+1
                      02158 
0275   0008           02159             return
                      02160 
                      02161 
                      02162 
                      02163                 ; -------------------------------------------------------------
                      02164                 ; LocateRadioNextPrevPins
                      02165                 ; -------------------------------------------------------------
                      02166                 ; Traverse assignmentstable and find any RadioNext or RadioPrev
                      02167                 ; pins.
                      02168                 ;
0276                  02169 LocateRadioNextPrevPins
                      02170         ifdef CONF_RADIO_NEXT
                      02171         asd
                      02172                         movlw   CONF_RADIO_NEXT
                      02173                         call    FindModePinInTable
                      02174                         skpc
                      02175                         goto    lrnpp_check_prev
                      02176                         ; Found a radio next pin
                      02177                         movwf   RadioModeNextPin
                      02178                         bsf             RadioModeNextPin, BIT7
                      02179 
                      02180                         SetBnkF TRISC                                           ; Just the tris bank in 
                            general
                      02181                         bsf             PIN0_PORT, PIN0
                      02182                         SetBank0Auto
                      02183                         bsf             OutputsMask32+.0, BIT0
                      02184 
                      02185 lrnpp_check_prev
                      02186 
                      02187                         movlw   CONF_RADIO_PREV
                      02188                         call    FindModePinInTable
                      02189                         skpc
                      02190                         goto    lrnpp_check_exit
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02191                         ; Found a radio prev pin
                      02192                         movwf   RadioModePrevPin
                      02193                         bsf             RadioModePrevPin, BIT7
                      02194 
                      02195                         SetBnkF TRISC                                           ; Just the tris bank in 
                            general
                      02196                         bsf             PIN1_PORT, PIN1
                      02197                         SetBank0Auto
                      02198                         bsf             OutputsMask32+.0, BIT1
                      02199 
                      02200 lrnpp_check_exit
                      02201                 if ICE  ; -------------------------------------
                      02202                         nop             ; Breakpoint :
                      02203                         nop             ;
                      02204                 endif   ; -------------------------------------
                      02205 
                      02206             endif
0276   0008           02207                         return
                      02208 
                      02209 
                      02210                 ; -------------------------------------------------------------------
                      02211                 ; InitializeAllOutputs
                      02212                 ; ClearAllOutputs
                      02213                 ; -------------------------------------------------------------
                      02214                 ; This rutine is needed both at boot but also when entering
                      02215                 ; programming mode. All the 16 decoder pins are set to low-level outputs.
                      02216                 ; Note that this must be succeded with "LocateBiTogglePins"
                      02217                 ; if bitoggle mode is enabled.
                      02218                 ;
0277                  02219 InitializeAllOutputs
                      02220 
                      02221                         ; Port A and B programmed
0277   3000           02222                         movlw   TrisA
                      02223                         settris TRISA
                          M                         SetBnkF TRISA
  00000001                M CURRENT_BANK    set     (TRISA    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
0278   1683               M                         bsf     STATUS, RP0
0279   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
027A   0085               M                         movwf   TRISA & FORCE_7_BIT_ADR
                          M                         SetBank0Auto
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
027B   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
027C   3040           02224                         movlw   TrisB
                      02225                         settris TRISB
                          M                         SetBnkF TRISB
  00000001                M CURRENT_BANK    set     (TRISB    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
027D   1683               M                         bsf     STATUS, RP0
027E   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
027F   0086               M                         movwf   TRISB & FORCE_7_BIT_ADR
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
0280   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
0281   3018           02226                         movlw   TrisC
                      02227                         settris TRISC
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         SetBnkF TRISC
  00000001                M CURRENT_BANK    set     (TRISC    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
0282   1683               M                         bsf     STATUS, RP0
0283   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0284   0087               M                         movwf   TRISC & FORCE_7_BIT_ADR
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
0285   1283               M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                      02228 
0286                  02229 ClearAllOutputs
                      02230                         ; Low output pins
                      02231                         ;
0286   01A6           02232                         clrf    OutputsMask32+0
0287   01A7           02233                         clrf    OutputsMask32+1
0288   01A8           02234                         clrf    OutputsMask32+2
0289   01A9           02235                         clrf    OutputsMask32+3
                      02236 
028A   276C           02237                 call    SetOutputsFromMasks
                      02238 
028B   0008           02239                 return
                      02240 
                      02241 ;;;-----------------------------------------------------------------------
                      02242 ;;; D E B U G
                      02243 ;;;-----------------------------------------------------------------------
                      02244 
                      02245 
028C                  02246 FirstRunSetups
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02247 
                      02248                         di
  0000                    M                         local   __di_fail__
028C   138B               M __di_fail__     bcf     INTCON, GIE
028D   1B8B               M                         btfsc   INTCON, GIE
028E   2A8C               M                         goto    __di_fail__
                      02249 
                      02250                         ; Check for first run
028F   3000           02251                         movlw   EepFirstRunTest
0290   2327           02252                         call    EepromReadW
0291   3CAA           02253                         sublw   0xAA
                      02254 
                      02255                 if ICE  ; -------------------------------------
                      02256                         nop             ; Breakpoint :
                      02257                         nop             ;
                      02258                 endif   ; -------------------------------------
                      02259 
0292   1903           02260                         skpnz
0293   0008           02261                         return
                      02262 
                      02263                          ; First run
                      02264                          ;
0294   3000           02265                         movlw   EepFirstRunTest
0295   2332           02266                         call    EepromSetAddress
0296   30AA           02267                         movlw   0xAA
0297   2313           02268                         call    EepromWriteW
                      02269 
0298                  02270 ClearSystem
                      02271 
                      02272                          ; Reset Table and EepTable
                      02273                          ;
                      02274                 if ICE  ; -------------------------------------
                      02275                         nop             ; Breakpoint :
                      02276                         nop             ;
                      02277                 endif   ; -------------------------------------
                      02278 
0298   265B           02279                         call    ResetTable
                      02280 
                      02281                 if ICE  ; -------------------------------------
                      02282                         nop             ; Breakpoint :
                      02283                         nop             ;
                      02284                 endif   ; -------------------------------------
                      02285 
0299   2726           02286                         call    ClearTableOutputLevels
                      02287 
                      02288                 if ICE  ; -------------------------------------
                      02289                         nop             ; Breakpoint :
                      02290                         nop             ;
                      02291                 endif   ; -------------------------------------
                      02292 
029A   276C           02293                         call    SetOutputsFromMasks
                      02294 
                      02295                 if ICE  ; -------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02296                         nop             ; Breakpoint :
                      02297                         nop             ;
                      02298                 endif   ; -------------------------------------
                      02299 
029B   0008           02300                         return
                      02301 
                      02302 
                      02303 
                      02304 ;;;-----------------------------------------------------------------------
                      02305 ;;; M A C R O    S U B R U T I N E S
                      02306 ;;;-----------------------------------------------------------------------
                      02307 
                      02308 
                      02309 msDelay         MDelay_Xms      1, t1, t2, t3
                          M 
  0000                    M                     local   lop1, lop2, lop3
                          M 
029C   00A0               M                     movwf   t1
                          M 
029D   3001               M lop3            movlw   1
029E   00A2               M                     movwf       t3
                          M 
029F                      M lop1        ; Loop the next 4 us loop 250 times = 1 msec
029F   30FA               M                 movlw   .250
02A0   00A1               M                 movwf   t2
                          M 
                          M lop2            MDelay_4us_sequence
                          M 
02A1   0064               M             clrwdt
  00000010                M STATES_PER_4us  set     STATES_PER_4us - 4      ; one for clrwdt, three for decfsz
                          M 
                          M 
                          M             WHILE STATES_PER_4us >= 2
02A2   2AA3               M             goto $+1
  0000000E                M STATES_PER_4us  set     STATES_PER_4us - 2
02A3   2AA4               M             goto $+1
  0000000C                M STATES_PER_4us  set     STATES_PER_4us - 2
02A4   2AA5               M             goto $+1
  0000000A                M STATES_PER_4us  set     STATES_PER_4us - 2
02A5   2AA6               M             goto $+1
  00000008                M STATES_PER_4us  set     STATES_PER_4us - 2
02A6   2AA7               M             goto $+1
  00000006                M STATES_PER_4us  set     STATES_PER_4us - 2
02A7   2AA8               M             goto $+1
  00000004                M STATES_PER_4us  set     STATES_PER_4us - 2
02A8   2AA9               M             goto $+1
  00000002                M STATES_PER_4us  set     STATES_PER_4us - 2
02A9   2AAA               M             goto $+1
  00000000                M STATES_PER_4us  set     STATES_PER_4us - 2
                          M             ENDW
                          M 
                          M             if STATES_PER_4us == 1
                          M             clrwdt
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M STATES_PER_4us  set     STATES_PER_4us - 1
                          M             endif
                          M 
                          M             if STATES_PER_4us != 0
                          M                 error "Delay did not compute"
                          M             endif
                          M 
02AA   0BA1               M                     decfsz  t2,  F
02AB   2AA1               M                     goto    lop2
                          M 
02AC   0BA2               M                     decfsz      t3,  F
02AD   2A9F               M                     goto        lop1
                          M 
02AE   0BA0               M                     decfsz  t1,  F
02AF   2A9D               M                     goto    lop3
                          M 
                          M                         ifdef ICE       ; -------------------------------------
02B0   0000               M                         nop                     ; In Circuit Emulator Breakpoint
02B1   0000               M                         nop                     ;
                          M                         endif           ; -------------------------------------
                          M 
02B2   0008           02310                         return
                      02311 
                      02312 
                      02313 
                      02314                 ; FatalStop
                      02315                 ; -------------------------------------------------------------
                      02316                 ; FatalHalt from 'Common.inc'
                      02317 
02B3                  02318 FatalStop
                      02319                         FatalHalt
                          M 
                          M 
                          M ; These can be located anywhere, they are only active once the system has entered infinite error loop.
  0000007C                M FatalErrorMaster        equ     IntrContextS
  0000007D                M FatalErrorCnt           equ     IntrContextS + .1
  0000007E                M FatalErrorFlags         equ     IntrContextS + .2
                          M 
                          M 
                          M 
02B3                      M FatalError
                          M 
02B3                      M fatal_loop
                          M                         di
  0000                    M                         local   __di_fail__
02B3   138B               M __di_fail__     bcf     INTCON, GIE
02B4   1B8B               M                         btfsc   INTCON, GIE
02B5   2AB3               M                         goto    __di_fail__
02B6   00FC               M                         movwf   FatalErrorMaster
                          M 
02B7   3001               M                         movlw   1
02B8   00FE               M                         movwf   FatalErrorFlags
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02B9                      M fatal_forever
                          M 
02B9   087C               M                         movf    FatalErrorMaster, W
02BA   00FD               M                         movwf   FatalErrorCnt
                          M 
                          M anotherblink    LedOn
02BB   0000               M                         nop
02BC   1786               M                         bsf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
02BD   0000               M                         nop
02BE   1005               M                         bcf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
02BF   3064               M                         movlw   .100
02C0   229C               M                         call    msDelay
                          M 
                          M                         LedOff
02C1   0000               M                         nop
02C2   1386               M                         bcf             LED_PORT, LED_PIN
                          M                 ifdef LED_INV_PORT
02C3   0000               M                         nop
02C4   1405               M                         bsf             LED_INV_PORT, LED_INV_PIN
                          M                 endif
02C5   30FA               M                         movlw   .250
02C6   229C               M                         call    msDelay
                          M 
02C7   0BFD               M                         decfsz  FatalErrorCnt, F
02C8   2ABB               M                         goto    anotherblink
                          M 
02C9   30FA               M                         movlw   .250
02CA   229C               M                         call    msDelay
02CB   30FA               M                         movlw   .250
02CC   229C               M                         call    msDelay
02CD   30FA               M                         movlw   .250
02CE   229C               M                         call    msDelay
02CF   30FA               M                         movlw   .250
02D0   229C               M                         call    msDelay
02D1   30FA               M                         movlw   .250
02D2   229C               M                         call    msDelay
                          M 
                          M                         if ICE  ; -------------------------------------
                          M                         nop             ; Breakpoint :
                          M                         nop             ;
                          M                         endif   ; -------------------------------------
                          M 
02D3   1C7E               M                         btfss   FatalErrorFlags, BIT0
02D4   0008               M                         return
                          M 
02D5   2AB9               M                         goto    fatal_forever
                      02320 
                      02321                         include "I2C.inc"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; i2c.inc
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ; i2c library file
                      00005 ; 001 27-09-02 Source from http://www.piclist.com/techref/microchip/i2c87xjs.htm (John Sand)
                      00006 ; 002
                      00007 ; ========================================================================
                      00008 ;
                      00009 
                      00010 ;
                      00011 ; See i2c_def.inc
                      00012 ;
                      00013 ; External provides :
                      00014 ; I2C_Start
                      00015 ; I2C_Address
                      00016 ; I2C_Status (flags)
                      00017 ;
                      00018 ; The terms sync and async are used here to distinguish between a busy
                      00019 ; waiting implementation (exits when all data ready) and a state machine
                      00020 ; implementation to be inserted in-the-loop (i.e. typically as would be
                      00021 ; nescessary in a ISR).
                      00022 ;
                      00023 ;
                      00024 ; Remember to have SDA and SCL tris'd to inputs.
                      00025 ;-----------------------------------------------------------------------
                      00026 
                      00027 
02D6                  00028 CODE_SIZE_I2C_START
                      00029 
                      00030 
                      00031 
                      00032                         ; ---------------------------------------------------
                      00033                         ; M A S T E R    S Y N C
                      00034                         ; ---------------------------------------------------
                      00035 
                      00036 
                      00037         ifdef Iwer2C_MASTER_SYNC_2
                      00038 
                      00039 I2C_Start
                      00040                         SetBank0
                      00041                         bcf     PIR1,SSPIF
                      00042                         SetBank1
                      00043                         bsf     SSPCON2 & FORCE_7_BIT_ADR, SEN     ; send i2c START condition [S] bit
                      00044                         SetBank0
                      00045 
                      00046                         if ICE  ; -------------------------------------
                      00047                         nop             ; Breakpoint :
                      00048                         nop             ;
                      00049                         endif   ; -------------------------------------
                      00050 
                      00051             btfss   PIR1,SSPIF         ; start bit cycle complete?
                      00052             goto    $-1
                      00053 
                      00054             bcf     PIR1,SSPIF
                      00055 
                      00056             return
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00057 
                      00058 
                      00059 
                      00060 
                      00061 I2C_Stop
                      00062             SetBank0
                      00063             bcf     PIR1,SSPIF
                      00064             SetBank1
                      00065             bsf     SSPCON2 & FORCE_7_BIT_ADR, PEN         ;send i2c STOP [P] bit
                      00066             SetBank0
                      00067 
                      00068                         if ICE  ; -------------------------------------
                      00069                         nop             ; Breakpoint :
                      00070                         nop             ;
                      00071                         endif   ; -------------------------------------
                      00072 
                      00073             btfss   PIR1,SSPIF      ; Stop clock complete ?
                      00074             goto    $-1
                      00075 
                      00076                         if ICE  ; -------------------------------------
                      00077                         nop             ; Breakpoint :
                      00078                         nop             ;
                      00079                         endif   ; -------------------------------------
                      00080 
                      00081             bcf     PIR1,SSPIF
                      00082             return
                      00083 
                      00084 
                      00085 
                      00086 I2C_AckWait
                      00087             SetBank0
                      00088 
                      00089                         if ICE  ; -------------------------------------
                      00090                         nop             ; Breakpoint :
                      00091                         nop             ;
                      00092                         endif   ; -------------------------------------
                      00093 
                      00094             btfss   PIR1, SSPIF     ; 9th clock complete ?
                      00095             goto    $-1
                      00096 
                      00097                         if ICE  ; -------------------------------------
                      00098                         nop             ; Breakpoint :
                      00099                         nop             ;
                      00100                         endif   ; -------------------------------------
                      00101 
                      00102             bcf     PIR1, SSPIF
                      00103 
                      00104             return
                      00105 
                      00106 
                      00107 
                      00108 I2C_MasterInit
                      00109 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00110                         ; SSPCON<5>   SSPEN
                      00111                         ; SSPCON<3:0> '0110' = I2C Slave mode, 7-bit address
                      00112                         ; SSPCON<3:0> '1000' = I2C Master mode, clock = FOSC / (4 * (SSPADD+1))
                      00113                         ;
                      00114                         movlw   b'00101000'     ; Set SSPEN
                      00115                         movwf   SSPCON     ;=0x028
                      00116 
                      00117                         bcf     PIR1, SSPIF
                      00118 
                      00119                         SetBank1
                      00120                         movlw   b'10000000'
                      00121                         movwf   SSPSTAT & FORCE_7_BIT_ADR
                      00122 
                      00123                         movlw   b'01100000'
                      00124                         movwf   SSPCON2 & FORCE_7_BIT_ADR
                      00125 
                      00126                         movlw   b'00001010'
                      00127                         movwf   SSPADD & FORCE_7_BIT_ADR
                      00128 
                      00129                         SetBank0
                      00130                         return
                      00131 
                      00132 
                      00133 
                      00134 I2C_Test
                      00135 
                      00136                         if ICE  ; -------------------------------------
                      00137                         nop             ; Breakpoint :
                      00138                         nop             ;
                      00139                         endif   ; -------------------------------------
                      00140 
                      00141             SetBnkF SSPCON2
                      00142             setc
                      00143             btfss   SSPCON2 & FORCE_7_BIT_ADR, ACKSTAT
                      00144             clrc
                      00145             SetBank0
                      00146              ;
                      00147             skpnc
                      00148             bsf     I2C_TxStatus, I2C_ERROR_NACK
                      00149             return
                      00150 
                      00151 
                      00152 
                      00153 
                      00154 
                      00155                 ; I2C_MasterSyncWrite
                      00156                 ; ---------------------------------------------------
                      00157                 ; Transmits databyte to specified address.
                      00158 
                      00159 I2C_MasterSyncWrite
                      00160             call    I2C_Start
                      00161             movf    I2C_TxAddress, W
                      00162             movwf   SSPBUF
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00163 
                      00164             call    I2C_AckWait
                      00165             call    I2C_Test
                      00166 
                      00167                         if ICE  ; -------------------------------------
                      00168                         nop             ; Breakpoint :
                      00169                         nop             ;
                      00170                         endif   ; -------------------------------------
                      00171 
                      00172             movf    I2C_TxCommand, W
                      00173             movwf   SSPBUF
                      00174             call    I2C_AckWait
                      00175             call    I2C_Test
                      00176 
                      00177                         if ICE  ; -------------------------------------
                      00178                         nop             ; Breakpoint :
                      00179                         nop             ;
                      00180                         endif   ; -------------------------------------
                      00181 
                      00182             decfsz  I2C_TxNofBytes, F
                      00183             goto    tx_data
                      00184 
                      00185 MSW_Ends
                      00186                         if ICE  ; -------------------------------------
                      00187                         nop             ; Breakpoint :
                      00188                         nop             ;
                      00189                         endif   ; -------------------------------------
                      00190 
                      00191             call    I2C_Stop
                      00192             return
                      00193 
                      00194 tx_data
                      00195             movf    I2C_TxData, W
                      00196             movwf   SSPBUF
                      00197             call    I2C_AckWait
                      00198             call    I2C_Test
                      00199             goto    MSW_Ends
                      00200 
                      00201                 endif
                      00202 
                      00203 
                      00204 
                      00205 
                      00206         ifdef I2C_MASTER_SYNC
                      00207 
                      00208 I2C_MasterSyncInit
                      00209 
                      00210              ; SSPCON<5>   SSPEN
                      00211              ; SSPCON<3:0> '0110' = I2C Slave mode, 7-bit address
                      00212              ; SSPCON<3:0> '1000' = I2C Master mode, clock = FOSC / (4 * (SSPADD+1))
                      00213              ;
                      00214             movlw   b'00101000'     ; Set SSPEN
                      00215             movwf   SSPCON     ;=0x028
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00216 
                      00217             bcf     PIR1, SSPIF
                      00218 
                      00219             SetBank1
                      00220             movlw   b'10000000'
                      00221             movwf   SSPSTAT & FORCE_7_BIT_ADR
                      00222 
                      00223             movlw   b'01100000'
                      00224             movwf   SSPCON2 & FORCE_7_BIT_ADR
                      00225 
                      00226             movlw   b'00001010'
                      00227             movwf   SSPADD & FORCE_7_BIT_ADR
                      00228 
                      00229             SetBank0
                      00230             return
                      00231 
                      00232 
                      00233 #define I2C_MASTER_ASYNC
                      00234 
                      00235 
                      00236 I2C_MasterSyncWrite
                      00237 
                      00238                         bsf     I2C_Public, I2C_TX_START
                      00239 
                      00240 MSW_loop
                      00241             clrwdt
                      00242             call    I2C_MasterAsyncEngine
                      00243 
                      00244             btfsc   I2C_Public, I2C_TX_START
                      00245             goto    MSW_loop
                      00246 
                      00247             return
                      00248 
                      00249                 endif
                      00250 
                      00251 
                      00252                 ; ---------------------------------------------------
                      00253                 ; M A S T E R    A S Y N C
                      00254                 ; ---------------------------------------------------
                      00255 
                      00256 
                      00257         ifdef I2C_MASTER_ASYNC
                      00258 
                      00259 ; Storage used :
                      00260 ;I2C_Public
                      00261 ;I2C_TxJumpVector
                      00262 ;I2C_TxIndex
                      00263 ;I2C_TxNofBytes         ; Nof bytes out including the address, I2C_TxNofBytes < 128d
                      00264 ;I2C_TxAddress
                      00265 ;I2C_TxCommand          ; Indirectly for I2C_TxNofBytes > 1
                      00266 ;I2C_TxData             ; Indirectly for I2C_TxNofBytes > 2
                      00267 
                      00268 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D6                  00269 I2C_MasterAsyncInit
                      00270 
                      00271              ; SSPCON<5>   SSPEN
                      00272              ; SSPCON<3:0> '0110' = I2C Slave mode, 7-bit address
                      00273              ; SSPCON<3:0> '1000' = I2C Master mode, clock = FOSC / (4 * (SSPADD+1))
                      00274              ;
02D6   3028           00275             movlw   b'00101000'     ; Set SSPEN
02D7   0094           00276             movwf   SSPCON     ;=0x028
                      00277 
02D8   118C           00278             bcf     PIR1, SSPIF
                      00279 
                      00280             SetBank1
02D9   1683               M                         bsf     STATUS, RP0
02DA   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
02DB   3080           00281             movlw   b'10000000'
02DC   0094           00282             movwf   SSPSTAT & FORCE_7_BIT_ADR
                      00283 
02DD   3060           00284             movlw   b'01100000'
02DE   0091           00285             movwf   SSPCON2 & FORCE_7_BIT_ADR
                      00286 
02DF   300A           00287             movlw   b'00001010'
02E0   0093           00288             movwf   SSPADD & FORCE_7_BIT_ADR
                      00289 
                      00290             SetBank0
02E1   1283               M                         bcf     STATUS, RP0
02E2   1303               M                         bcf     STATUS, RP1
  00000000                M __bank          set     0
02E3   0008           00291             return
                      00292 
                      00293 
                      00294 
                      00295                 ; I2C_MasterAsyncEngine
                      00296                 ; ---------------------------------------------------
                      00297                 ;
                      00298                         ForcePageAlign  .10
                          M                 if $/0x100 != (.10-1+$)/0x100
                          M                         org     ((.10-1+$)/0x100          ) * 0x100
                          M                 endif
                      00299 
02E4                  00300 I2C_MasterAsyncEngine
                      00301 
02E4   3002           00302 I2C_MAW         movlw   I2C_MAW / 0x100
02E5   008A           00303                         movwf   PCLATH
                      00304                          ;
02E6   0849           00305                         movf    I2C_TxJumpVector, W
02E7   0782           00306                         addwf   PCL, F
                      00307                          ;
                      00308 
                      00309 
  00000000            00310 I2C_MAW_IDLE            equ     .0
02E8   2AEB           00311                                         goto    I2C_MawIdle
  00000001            00312 I2C_MAW_BUSY            equ     .1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02E9   2AF7           00313                                         goto    I2C_MawBusy
  00000002            00314 I2C_MAW_FINISHING       equ     .2
02EA   2B0C           00315                         goto    I2C_MawFinishing
                      00316 
                      00317                 if I2C_MAW / 0x0100 != $ / 0x0100
                      00318                         error "***** Page fault #0276 *****"
                      00319                 endif
                      00320 
                      00321                  ; I2C_MawIdle
                      00322                  ; ----------------------------------------
                      00323                  ; Wait for client flags to start
02EB                  00324 I2C_MawIdle
                      00325 
02EB   1D48           00326             btfss   I2C_Public, I2C_TX_START
02EC   2B12           00327             goto    I2C_MawEnds
                      00328 
                      00329              ; User go. Initiate i2c start
                      00330 
02ED   118C           00331             bcf     PIR1,SSPIF
                      00332             SetBank1
02EE   1683               M                         bsf     STATUS, RP0
02EF   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
02F0   1411           00333             bsf     SSPCON2 & FORCE_7_BIT_ADR, SEN     ; i2c START condition
                      00334             SetBank0
02F1   1283               M                         bcf     STATUS, RP0
02F2   1303               M                         bcf     STATUS, RP1
  00000000                M __bank          set     0
                      00335 
                      00336                         if ICE  ; -------------------------------------
                      00337                         nop             ; Breakpoint :
                      00338                         nop             ;
                      00339                         endif   ; -------------------------------------
                      00340 
02F3   01CA           00341             clrf    I2C_TxIndex
                      00342 
02F4   3001           00343             movlw   I2C_MAW_BUSY
02F5   00C9           00344             movwf   I2C_TxJumpVector
                      00345 
02F6   2B12           00346             goto    I2C_MawEnds
                      00347 
                      00348 
                      00349 
                      00350              ; I2C_MawBusy
                      00351              ; ----------------------------------------
                      00352              ; Transmitting and waiting....
                      00353 
02F7                  00354 I2C_MawBusy
02F7   1D8C           00355             btfss   PIR1,SSPIF         ;cycle complete?
02F8   2B12           00356             goto    I2C_MawEnds
                      00357 
02F9   118C           00358             bcf     PIR1,SSPIF
                      00359 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00360              ; Figure out if there are more data bytes
                      00361              ;
02FA   03CB           00362             decf    I2C_TxNofBytes, F
02FB   1BCB           00363             btfsc   I2C_TxNofBytes, BIT7    ; Stop when reaching -1 (this is the 128 limit)
02FC   2B04           00364             goto    setup_stop
                      00365 
                      00366 
                      00367              ; Load databyte and write to transmitter register "SSPBUF"
                      00368              ;
02FD   084A           00369             movf    I2C_TxIndex, W
02FE   3E4C           00370             addlw   I2C_TxAddress
02FF   0084           00371             movwf   FSR
0300   0800           00372             movf    INDF, W
0301   0093           00373             movwf   SSPBUF                  ; Data transmission starts
                      00374 
                      00375 
0302                  00376 setup_next
0302   0ACA           00377             incf    I2C_TxIndex, F
0303   2B12           00378             goto    I2C_MawEnds
                      00379 
                      00380 
                      00381 
0304                  00382 setup_stop
                      00383              ; No more data, start i2c STOP condition
                      00384 
                      00385             SetBank1
0304   1683               M                         bsf     STATUS, RP0
0305   1303               M                         bcf     STATUS, RP1
  00000001                M __bank          set     1
0306   1511           00386             bsf     SSPCON2 & FORCE_7_BIT_ADR, PEN         ;send i2c STOP [P] bit
                      00387             SetBank0
0307   1283               M                         bcf     STATUS, RP0
0308   1303               M                         bcf     STATUS, RP1
  00000000                M __bank          set     0
                      00388 
0309   3002           00389             movlw   I2C_MAW_FINISHING
030A   00C9           00390             movwf   I2C_TxJumpVector
030B   2B12           00391             goto    I2C_MawEnds
                      00392 
                      00393 
                      00394 
                      00395 
                      00396              ; I2C_MawFinishing
                      00397              ; ----------------------------------------
                      00398              ; Waiting for end of STOP, and then cleaning up.
                      00399              ; Clears "I2C_TX_START" to signal tx complete to host.
                      00400              ;
030C                  00401 I2C_MawFinishing
                      00402 
030C   1D8C           00403             btfss   PIR1,SSPIF      ; STOP complete ?
030D   2B12           00404             goto    I2C_MawEnds
                      00405 
                      00406              ; STOP is complete
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

030E   118C           00407             bcf     PIR1,SSPIF
030F   1148           00408             bcf     I2C_Public, I2C_TX_START
                      00409              ;
0310   3000           00410             movlw   I2C_MAW_IDLE
0311   00C9           00411             movwf   I2C_TxJumpVector
                      00412 
0312                  00413 I2C_MawEnds
0312   0008           00414                         return
                      00415 
                      00416 
                      00417         endif ; ifdef I2C_MASTER_ASYNC
                      00418 
                      00419 
                      00420 
                      00421 
                      00422 
                      00423 
                      00424 
                      00425 
                      00426 
                      00427                 ; ---------------------------------------------------
                      00428                 ; S L A V E    A S Y N C
                      00429                 ; ---------------------------------------------------
                      00430 
                      00431         ifdef   I2C_SLAVE_ASYNC
                      00432 
                      00433                         ; I2C_SlaveInit
                      00434                         ; ---------------------------------------------------
                      00435 
                      00436 I2C_SlaveInit
                      00437 
                      00438                         movlw   b'00110110'                     ; 7bit address slave
                      00439                         movwf   SSPCON     ;=0x028
                      00440 
                      00441                         bcf     PIR1, SSPIF
                      00442 
                      00443                         SetBank1
                      00444                         movlw   b'10000000'
                      00445                         movwf   SSPSTAT & FORCE_7_BIT_ADR
                      00446 
                      00447                         movlw   b'01100000'
                      00448                         movwf   SSPCON2 & FORCE_7_BIT_ADR
                      00449 
                      00450                         movlw   I2C_SLAVE_ADRESS
                      00451                         movwf   SSPADD & FORCE_7_BIT_ADR        ; 7 bit address
                      00452 
                      00453                         SetBank0Auto
                      00454 
                      00455                         movf    SSPBUF, W                       ; Clear any buffer full (BF) flag.
                      00456                         bcf     SSPCON, SSPOV                   ; Clear any overflow flag.
                      00457 
                      00458                          ; State machine
                      00459                          ;
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00460                         clrf    I2C_SarJumpvector
                      00461                         clrf    I2C_Public
                      00462 
                      00463                         return
                      00464 
                      00465 
                      00466 
                      00467 
                      00468         ; I2C_SlaveAsyncRead
                      00469                 ; ---------------------------------------------------
                      00470                 ; Supports 1 or 2 data bytes after address.
                      00471                 ; ToDo : Slave write
                      00472                 ; ToDo : Support for length field after command (Command with bit 7 set)
                      00473                 ;
                      00474 
                      00475 I2C_SlaveAsyncRead
                      00476 
                      00477 
                      00478 
                      00479 I2C_SAR         movlw   I2C_SAR / 0x100
                      00480                         movwf   PCLATH
                      00481                          ;
                      00482                         movf    I2C_SarJumpvector, W
                      00483                         addwf   PCL, F
                      00484                          ;
                      00485 
                      00486 
                      00487 I2C_SAR_STOPPED         equ             .0
                      00488                                         goto    I2C_SarStopped
                      00489 I2C_SAR_IDLE            equ             .1
                      00490                                         goto    I2C_SarIdle
                      00491 I2C_SAR_CMD             equ     .2
                      00492                         goto    I2C_SarCmd
                      00493 I2C_SAR_DATA            equ     .3
                      00494                         goto    I2C_SarData
                      00495 I2C_SAR_WAIT_STOP       equ     .4
                      00496                         goto    I2C_SarWaitStop
                      00497 
                      00498                 if I2C_SAR / 0x0100 != $ / 0x0100
                      00499                   messg "Page fault #0225"
                      00500                 endif
                      00501 
                      00502 
                      00503                         ; I2C_SarStopped
                      00504                         ; ----------------------------------------
                      00505                         ; Wait for client ready
                      00506 I2C_SarStopped
                      00507 
                      00508                          ; Stop receiving until previous data are processed by subscriber
                      00509                          ;
                      00510                         btfsc   I2C_Public, I2C_RX_COMPLETE
                      00511                         goto    I2C_SarEnds
                      00512 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00513                          ; Cleanup any junk flags (FIXIT)
                      00514                          ;
                      00515                         movf    SSPBUF, W                       ; Clear any buffer full (BF) flag.
                      00516                         bcf     SSPCON, SSPOV                   ; Clear any overflow flag.
                      00517                         bcf     PIR1, SSPIF
                      00518 
                      00519                         movlw   I2C_SAR_IDLE
                      00520                         movwf   I2C_SarJumpvector
                      00521 
                      00522                         goto    I2C_SarEnds
                      00523 
                      00524 
                      00525                          ; I2C_SarIdle
                      00526                          ; ----------------------------------------
                      00527                          ; Wait for address match
                      00528 I2C_SarIdle
                      00529 
                      00530                          ; Stop receiving until previous data are released
                      00531                          ;
                      00532                         btfss   PIR1, SSPIF
                      00533                         goto    I2C_SarEnds
                      00534 
                      00535                          ; Address match
                      00536                          ;
                      00537                         bcf     PIR1, SSPIF
                      00538                         movf    SSPBUF, W                       ; Clear any buffer full (BF) flag.
                      00539                          ;
                      00540                         movlw   I2C_SAR_CMD
                      00541                         movwf   I2C_SarJumpvector
                      00542 
                      00543 
                      00544 
                      00545 
                      00546                          ; I2C_SarCmd
                      00547                          ; ----------------------------------------
                      00548                          ; Load first data byte
                      00549 I2C_SarCmd
                      00550 
                      00551                         btfss   PIR1, SSPIF
                      00552                         goto    I2C_SarEnds
                      00553 
                      00554                         bcf     PIR1, SSPIF
                      00555 
                      00556                          ; Got command
                      00557 
                      00558                         movf    SSPBUF, W                       ; Clears BF
                      00559                         movwf   I2C_RxCommand
                      00560 
                      00561                          ; More bytes ??
                      00562                          ;
                      00563                         call    I2C_GetNofBytesFromCommand
                      00564                         movwf   I2C_RxNofBytes
                      00565 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00566                         decfsz  I2C_RxNofBytes, F
                      00567                         goto    more_bytes
                      00568 
                      00569                          ; No, we are done.
                      00570                          ;
                      00571                         movlw   I2C_SAR_WAIT_STOP
                      00572                         movwf   I2C_SarJumpvector
                      00573                         goto    I2C_SarEnds
                      00574 
                      00575 
                      00576 more_bytes
                      00577                         movlw   I2C_SAR_DATA
                      00578                         movwf   I2C_SarJumpvector
                      00579                         goto    I2C_SarEnds
                      00580 
                      00581 
                      00582 
                      00583                         ; I2C_SarData
                      00584                         ; ----------------------------------------
                      00585                         ; Load first data byte
                      00586 I2C_SarData
                      00587 
                      00588                         btfss   PIR1, SSPIF
                      00589                         goto    I2C_SarEnds
                      00590 
                      00591                          ; Got data
                      00592 
                      00593                         movf    SSPBUF, W                       ; Clears BF
                      00594                         movwf   I2C_RxData
                      00595 
                      00596                         bcf     PIR1, SSPIF
                      00597                         movlw   I2C_SAR_WAIT_STOP
                      00598                         movwf   I2C_SarJumpvector
                      00599                         goto    I2C_SarEnds
                      00600 
                      00601 
                      00602 
                      00603                          ; I2C_SarWaitStop
                      00604                          ; ----------------------------------------
                      00605 I2C_SarWaitStop
                      00606 
                      00607                         SetBnkF SSPSTAT
                      00608                         btfss   SSPSTAT & FORCE_7_BIT_ADR, P
                      00609                         goto    I2C_SarEndsBank0
                      00610                         SetBank0Auto
                      00611 
                      00612                          ; There were a stop condition, publish to user
                      00613                          ;
                      00614                         bsf     I2C_Public, I2C_RX_COMPLETE
                      00615 
                      00616                         MDisableI2CIntr
                      00617 
                      00618                         movlw   I2C_SAR_STOPPED
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00619                         movwf   I2C_SarJumpvector
                      00620 
                      00621                         goto    I2C_SarEnds
                      00622 
                      00623 
                      00624 I2C_SarEndsBank0
                      00625                         SetBank0Auto
                      00626 I2C_SarEnds
                      00627 
                      00628                         return
                      00629 
                      00630         endif
                      00631 
                      00632 
                      00633 
                      00634                 ; ---------------------------------------------------
                      00635                 ; S L A V E    A S Y N C
                      00636                 ; ---------------------------------------------------
                      00637 
                      00638         ifdef   I2C_SLAVE_ASYNC_ISR
                      00639 
                      00640                         ; I2C_SlaveInit
                      00641                         ; ---------------------------------------------------
                      00642 
                      00643 I2C_SlaveInit
                      00644 
                      00645             movlw   b'00110110'                     ; 7bit address slave
                      00646             movwf   SSPCON     ;=0x028
                      00647 
                      00648             bcf     PIR1, SSPIF
                      00649 
                      00650             SetBank1
                      00651             movlw   b'10000000'
                      00652             movwf   SSPSTAT & FORCE_7_BIT_ADR
                      00653 
                      00654             movlw   b'01100000'
                      00655             movwf   SSPCON2 & FORCE_7_BIT_ADR
                      00656 
                      00657             movlw   I2C_SLAVE_ADRESS * 2
                      00658             movwf   SSPADD & FORCE_7_BIT_ADR        ; 7 bit address
                      00659 
                      00660             SetBank0
                      00661 
                      00662              ; State machine
                      00663              ;
                      00664             clrf    I2C_SarJumpvector
                      00665             clrf    I2C_Public
                      00666 
                      00667 I2C_Restart
                      00668 
                      00669             movf    SSPBUF, W                       ; Clear any buffer full (BF) flag.
                      00670             bcf     SSPCON, SSPOV                   ; Clear any overflow flag.
                      00671 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00672             return
                      00673 
                      00674 
                      00675 
                      00676 
                      00677 
                      00678 
                      00679                 ; I2C_SlaveAsyncRead
                      00680                 ; ---------------------------------------------------
                      00681                 ; Supports 1 or 2 data bytes after address.
                      00682                 ; ToDo : Slave write
                      00683                 ; ToDo : Support for length field after command (Command with bit 7 set)
                      00684                 ;
                      00685 
                      00686 I2C_SlaveAsyncRead
                      00687 
                      00688 
                      00689 I2C_SAR         movlw   I2C_SAR / 0x100
                      00690                         movwf   PCLATH
                      00691                          ;
                      00692                         movf    I2C_SarJumpvector, W
                      00693                         addwf   PCL, F
                      00694                          ;
                      00695 
                      00696 
                      00697 I2C_SAR_IDLE            equ             .0
                      00698                                         goto    I2C_SarIdle
                      00699 I2C_SAR_CMD             equ     .1
                      00700                         goto    I2C_SarCmd
                      00701 I2C_SAR_DATA            equ     .2
                      00702                         goto    I2C_SarData
                      00703 I2C_SAR_WAIT_STOP       equ     .3
                      00704                         goto    I2C_SarWaitStop
                      00705 
                      00706                 if I2C_SAR / 0x0100 != $ / 0x0100
                      00707                   messg "Page fault #0225"
                      00708                 endif
                      00709 
                      00710 
                      00711 
                      00712                         ; I2C_SarIdle
                      00713                         ; ----------------------------------------
                      00714                         ; Wait for address match
                      00715 I2C_SarIdle
                      00716 
                      00717              ; Stop receiving until previous data are released
                      00718              ;
                      00719             btfss   PIR1, SSPIF
                      00720             goto    I2C_SarEnds
                      00721 
                      00722              ; Address match
                      00723              ;
                      00724             bcf     PIR1, SSPIF
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00725             movf    SSPBUF, W                       ; Clear any buffer full (BF) flag.
                      00726              ;
                      00727 
                      00728             SetBnkF SSPSTAT
                      00729             bcf     SSPSTAT & FORCE_7_BIT_ADR, P
                      00730             SetBank0
                      00731 
                      00732             movlw   I2C_SAR_CMD
                      00733             movwf   I2C_SarJumpvector
                      00734 
                      00735 
                      00736 
                      00737 
                      00738                         ; I2C_SarCmd
                      00739                         ; ----------------------------------------
                      00740                         ; Load first data byte
                      00741 I2C_SarCmd
                      00742 
                      00743             btfss   PIR1, SSPIF
                      00744             goto    I2C_SarEnds
                      00745 
                      00746              ; Got command
                      00747             bcf     PIR1, SSPIF
                      00748             movf    SSPBUF, W                       ; Clears BF
                      00749             movwf   I2C_RxCommand
                      00750 
                      00751              ; More bytes ??
                      00752              ;
                      00753             call    I2C_GetNofBytesFromCommand
                      00754             movwf   I2C_RxNofBytes
                      00755 
                      00756             decfsz  I2C_RxNofBytes, F
                      00757             goto    more_bytes
                      00758 
                      00759              ; No, we done.
                      00760              ;
                      00761             movlw   I2C_SAR_WAIT_STOP
                      00762             movwf   I2C_SarJumpvector
                      00763             goto    I2C_SarEnds
                      00764 
                      00765 
                      00766 more_bytes
                      00767             movlw   I2C_SAR_DATA
                      00768             movwf   I2C_SarJumpvector
                      00769             goto    I2C_SarEnds
                      00770 
                      00771 
                      00772 
                      00773                         ; I2C_SarData
                      00774                         ; ----------------------------------------
                      00775                         ; Load first data byte
                      00776 I2C_SarData
                      00777 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00778             btfss   PIR1, SSPIF
                      00779             goto    I2C_SarEnds
                      00780 
                      00781 
                      00782             bcf     PIR1, SSPIF
                      00783              ; Got data
                      00784 
                      00785             movf    SSPBUF, W                       ; Clears BF
                      00786             movwf   I2C_RxData
                      00787 
                      00788 
                      00789             bsf     I2C_Public, I2C_RX_COMPLETE
                      00790             MDisableI2CIntr
                      00791 
                      00792 
                      00793             movlw   I2C_SAR_IDLE            ; I2C_SAR_WAIT_STOP
                      00794             movwf   I2C_SarJumpvector
                      00795             goto    I2C_SarEnds
                      00796 
                      00797 
                      00798 
                      00799              ; I2C_SarWaitStop
                      00800              ; ----------------------------------------
                      00801 I2C_SarWaitStop
                      00802 
                      00803             SetBnkF SSPSTAT
                      00804             btfss   SSPSTAT & FORCE_7_BIT_ADR, P
                      00805             goto    I2C_SarEndsBank0
                      00806             SetBank0
                      00807 
                      00808              ; There were a stop condition, publish to user
                      00809              ;
                      00810 
                      00811 
                      00812 
                      00813              ; delete
                      00814             btfss   PIR1, SSPIF
                      00815             goto    NoFuzz2
                      00816 
                      00817             bcf     PIR1, SSPIF
                      00818 
                      00819                         if ICE  ; -------------------------------------
                      00820                         nop             ; Breakpoint :
                      00821                         nop             ;
                      00822                         endif   ; -------------------------------------
                      00823 
                      00824 NoFuzz2
                      00825                         movlw   I2C_SAR_IDLE
                      00826                         movwf   I2C_SarJumpvector
                      00827 
                      00828             goto    I2C_SarEnds
                      00829 
                      00830 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00831 I2C_SarEndsBank0
                      00832             SetBank0
                      00833 I2C_SarEnds
                      00834 
                      00835             return
                      00836 
                      00837 
                      00838 
                      00839 
                      00840 
                      00841         endif
                      00842 
                      00843 
                      00844 
                      00845 
                      00846 
                      00847 
                      00848         ifdef   I2C_RxCommand
                      00849 
                      00850         ; I2C_GetNofBytesFromCommand
                      00851                 ; ---------------------------------------------------
                      00852                 ; Returns nof bytes matching value in "I2C_RxCommand"
                      00853                 ; ToDo : Switch table as function of adress.
                      00854 
                      00855 I2C_GetNofBytesFromCommand
                      00856 
                      00857                         if ICE  ; -------------------------------------
                      00858                         nop             ; Breakpoint :
                      00859                         nop             ;
                      00860                         endif   ; -------------------------------------
                      00861 
                      00862                 if I2C_GetNofBytesFromCommand / 0x100 != I2C_SAR / 0x100
                      00863                 movlw   I2C_GetNofBytesFromCommand / 0x100
                      00864                         movwf   PCLATH
                      00865                 endif
                      00866 
                      00867             movf    I2C_RxCommand, W
                      00868             andlw   b'00000111'
                      00869 
                      00870                         addwf   PCL, F
                      00871 
                      00872             retlw I2C_725_LEVEL_CHANGED_CMD_LEN - 1             ;I2C_725_CMD_LEVEL_LOW
                      00873             retlw I2C_725_LEVEL_CHANGED_CMD_LEN - 1             ;I2C_725_CMD_LEVEL_HIGH
                      00874             retlw 0x01
                      00875             retlw 0x01
                      00876             retlw 0x01
                      00877             retlw 0x01
                      00878             retlw 0x01
                      00879             retlw 0x01
                      00880 
                      00881             if I2C_GetNofBytesFromCommand / 0x0100 != $ / 0x0100
                      00882               error "Page fault"
                      00883             endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00884 
                      00885         endif
                      00886 
                      00887 
                      00888 
                      00889 
  0000003D            00890 CODE_SIZE_I2C   equ     $ - CODE_SIZE_I2C_START
                      00891 
                      00892 
                      02322 
                      02323                 include "PICEEPROM.inc"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; PICEEPROM.INC
                      00004 ; ------------------------------------------------------------------------
                      00005 ; Common read/writes and utility macros to pic internal eeprom data.
                      00006 ; Default subrutine implementations are inlined unless actively disabled.
                      00007 ; RAM : None.
                      00008 ;
                      00009 ; Verified on : 16F873
                      00010 ; Requires common.inc
                      00011 ;
                      00012 ; NOTENOTENOTE : MANUALLY DISABLE INTERUPTS WHEN PERFORMING EEPROM WRITES !!!!
                      00013 ;
                      00014 ; 001 - 2002-05-07      : Versioning started
                      00015 ; ========================================================================
                      00016 ;
                      00097                         list
                      00098 
                      00099 
                      00100 ;;; --------------------------------------------------------------
                      00101 ;;;   E E P R O M   S U B R U T I N E   I M P L E M E N T A T I O N S
                      00102 ;;; --------------------------------------------------------------
                      00103 ;;;
                      00104 ;;; Expands to inline code unless 'EEPROM_NO_IMPLEMENTATION' is defined.
                      00105 ;;; Returns with ram bank 0
                      00106 ;;; See PIC_EEPROM_TRAPS for debug trap code
                      00107 
                      00108 
                      00109         ifndef EEPROM_NO_IMPLEMENTATION
                      00110 
                      00111         ; -------------------------------------------------------------
                      00112         ; EepromWriteW
                      00113         ; -------------------------------------------------------------
                      00114         ; Blocking write to internal EEPROM - waits for write cycle to complete.
                      00115         ; Input   : Data to write in W. See 'EepromSetAddress' for setting the address.
                      00116         ; NOTE NOTE NOTE - Interupts must be disabled during eeprom writes !!!
                      00117         ;
0313                  00118 EepromWriteW
                      00119 
                      00120                 ifdef PIC_EEPROM_TRAPS
                      00121                         nop
                      00122                         btfsc   INTCON, GIE
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00123                         goto    $-2
                      00124                 endif
                      00125                         SetBnkF EEDATA
  00000002                M CURRENT_BANK    set     (EEDATA   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
0313   1283               M                         bcf     STATUS, RP0
0314   1703               M                         bsf     STATUS, RP1
  00000002                M __bank          set     2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0315   008C           00126                         movwf   EEDATA & FORCE_7_BIT_ADR
                      00127                         WritePicEeprom
                          M 
                          M                         SetBnkF EECON1
  00000003                M CURRENT_BANK    set     (EECON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
0316   1683               M                         bsf     STATUS, RP0
0317   1703               M                         bsf     STATUS, RP1
  00000003                M __bank          set     3
                          M                 endif
                          M                 ifdef EEPGD
0318   138C               M                         bcf             EECON1 & FORCE_7_BIT_ADR, EEPGD
                          M                 endif
0319   150C               M                         bsf             EECON1 & FORCE_7_BIT_ADR, WREN
031A   3055               M                         movlw   0x55
031B   008D               M                         movwf   EECON2 & FORCE_7_BIT_ADR
031C   30AA               M                         movlw   0xAA
031D   008D               M                         movwf   EECON2 & FORCE_7_BIT_ADR
031E   148C               M                         bsf             EECON1 & FORCE_7_BIT_ADR, WR
                          M 
                          M                          ; disable eep write enable
                          M                          ;
031F   110C               M                         bcf             EECON1 & FORCE_7_BIT_ADR, WREN
                      00128                         WritePicWait
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                         local   eep_not_ready
                          M                         SetBnkF EECON1
  00000003                M CURRENT_BANK    set     (EECON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
0320   1683               M                         bsf     STATUS, RP0
0321   1703               M                         bsf     STATUS, RP1
  00000003                M __bank          set     3
                          M                 endif
                          M                         ;
0322                      M eep_not_ready
0322   188C               M                         btfsc   EECON1 & FORCE_7_BIT_ADR, WR
0323   2B22               M                         goto    eep_not_ready
                      00129                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
0324   1283               M                                 bcf     STATUS, RP0
0325   1303               M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
0326   0008           00130                         return
                      00131 
                      00132         ; -------------------------------------------------------------
                      00133         ; EepromReadW
                      00134         ; -------------------------------------------------------------
                      00135         ; Reads internal EEPROM
                      00136         ; Input   : Adress to be read in W.
                      00137         ;
                      00138 EepromReadW     SetBnkF EEADR
  00000002                M CURRENT_BANK    set     (EEADR    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
0327   1283               M                         bcf     STATUS, RP0
0328   1703               M                         bsf     STATUS, RP1
  00000002                M __bank          set     2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0329   008D           00139                         movwf   EEADR & FORCE_7_BIT_ADR
                      00140                         ReadPicEeprom
                          M 
                          M                         SetBnkF EECON1
  00000003                M CURRENT_BANK    set     (EECON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
032A   1683               M                         bsf     STATUS, RP0
032B   1703               M                         bsf     STATUS, RP1
  00000003                M __bank          set     3
                          M                 endif
                          M                 ifdef EEPGD
032C   138C               M                         bcf             EECON1 & FORCE_7_BIT_ADR, EEPGD
                          M                 endif
032D   140C               M                         bsf             EECON1 & FORCE_7_BIT_ADR, RD
                          M                         ;
                          M                         SetBnkA EEDATA
  00000002                M CURRENT_BANK    set     (EEDATA   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
                          M                         bsf     STATUS, RP1     ; 00 -> 10
                          M                 else
                          M                         if __bank == 1          ; 01 -> 10
                          M                                 bcf     STATUS, RP0
                          M                                 bsf     STATUS, RP1
                          M                         else
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         if __bank == 3
032E   1283               M                                 bcf     STATUS, RP0     ; 11 -> 10
                          M                         endif
                          M                         endif
                          M                 endif
  00000002                M __bank          set     2
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
032F   080C               M                         movf    EEDATA & FORCE_7_BIT_ADR, W
                          M 
                      00141                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
0330   1303               M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
0331   0008           00142                         return
                      00143 
                      00144 
                      00145         ; -------------------------------------------------------------
                      00146         ; EepromSetAddress
                      00147         ; -------------------------------------------------------------
                      00148         ; Sets the address for the next eeprom write.
                      00149         ; Input   : Adress in W.
                      00150         ;
0332                  00151 EepromSetAddress
                      00152                         SetBnkF EEADR
  00000002                M CURRENT_BANK    set     (EEADR    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
0332   1283               M                         bcf     STATUS, RP0
0333   1703               M                         bsf     STATUS, RP1
  00000002                M __bank          set     2
                          M                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0334   008D           00153                         movwf   EEADR & FORCE_7_BIT_ADR
                      00154                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
0335   1303               M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
0336   0008           00155                         return
                      00156 
                      00157 
                      00158         ; -------------------------------------------------------------
                      00159         ; EepromAdressAdvance
                      00160         ; -------------------------------------------------------------
                      00161         ; Sets the address for the next eeprom write.
                      00162         ; Input   : Adress in W.
                      00163         ;
                      00164         ifdef EnableEepromAdressAdvance
                      00165 EepromAdressAdvance
                      00166                         SetBnkF EEADR
                      00167                         incf    EEADR & FORCE_7_BIT_ADR, F
                      00168                         SetBank0Auto
                      00169                         return
                      00170         endif
                      00171 
                      00172 
                      00173         endif ; ifndef EEPROM_NO_IMPLEMENTATION
                      00174 
                      00175 ; ========================================================================
                      00176 ; End of PicEeprom.Inc
                      00177 ; ========================================================================
                      00178 
                      02324 
                      02325 
                      02326 ;;;-----------------------------------------------------------------------
                      02327 ;;;-----------------------------------------------------------------------
                      02328 ;;;
                      02329 ;;;     Interrupt service
                      02330 ;;;
                      02331 ;;;-----------------------------------------------------------------------
                      02332 ;;;-----------------------------------------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02333 ;
                      02334 ;
0337                  02335 IntrRutine
                      02336                         ; Context save is done at vector entry point
                      02337 
                      02338                 if DEBUG_ISR_ALIVE
                      02339                         btfss   RC5DEBUGPORT, RC5DEBUGPIN
                      02340                         goto    ghi
                      02341                         bcf             RC5DEBUGPORT, RC5DEBUGPIN
                      02342                         goto    gex
                      02343 ghi
                      02344                         bsf             RC5DEBUGPORT, RC5DEBUGPIN
                      02345 gex
                      02346                 endif
                      02347 
0337                  02348 LoopedISR
                      02349                         ; By clearing timer flag here a next interupt can be
                      02350                         ; registered while in the ISR pass here
0337   110B           02351                         bcf             INTCON, T0IF            ; INTCON is in all banks
                      02352                         SetBank0
0338   1283               M                         bcf     STATUS, RP0
0339   1303               M                         bcf     STATUS, RP1
  00000000                M __bank          set     0
033A   0064           02353                         clrwdt
                      02354 
                      02355                          ; Led Tick generator
                      02356                          ; ----------------------------------------
                      02357                          ;
033B   0BAC           02358                         decfsz  ISRSlowPrescalerCnt, F
033C   2B40           02359                         goto    led_signal_ends
                      02360                          ;
                      02361                          ; Signal a tick
                      02362                          ;
033D   0AA3           02363                         incf    RealtimeTickCounter, F
033E   3095           02364                         movlw   ISR_SLOW_PRESCALER
033F   00AC           02365                         movwf   ISRSlowPrescalerCnt
0340                  02366 led_signal_ends
                      02367 
                      02368 
                      02369                  ; RC5 reception state machine
                      02370                  ; ----------------------------------------
                      02371 
                      02372                 if ICE  ; -------------------------------------
                      02373                         nop             ; Breakpoint :
                      02374                         nop             ;
                      02375                 endif   ; -------------------------------------
                      02376 
                      02377                         IR_IsrCode
                          M 
                          M 
                          M                         list
                          M 
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0340   0BEF               M                         decfsz  RC5Presc, F
0341   2C8B               M                         goto    RC5_Ends
                          M 
0342   3003               M IR_mark         movlw   IR_mark / 0x100
0343   008A               M                         movwf   PCLATH
                          M                          ;
0344   086B               M                         movf    IRJumpVector, W
0345   0782               M                         addwf   PCL, F
                          M                  ;
0346                      M IR_Zero
                          M 
  00000000                M IR_PRE_IDLE             equ     $ - IR_Zero
0346   2B54               M                                 goto    IRPreIdle
  00000001                M IR_IDLE         equ     $ - IR_Zero
0347   2B5B               M                                 goto    IR_Idle
  00000002                M RC5_FIRST               equ     $ - IR_Zero
0348   2B84               M                                 goto    RC5_First
  00000003                M RC5_HALF                equ     $ - IR_Zero
0349   2B92               M                                 goto    RC5_Half
  00000004                M RC5_LAST                equ     $ - IR_Zero
034A   2B98               M                                 goto    RC5_Last
  00000005                M RC5_CHKSILENCE  equ     $ - IR_Zero
034B   2BC2               M                                 goto    RC5_CheckSilence
  00000006                M RC5_DEADTIME    equ     $ - IR_Zero
034C   2BEE               M                                 goto    RC5_DeadTime
  00000007                M SONY_INIT               equ     $ - IR_Zero
034D   2C15               M                                 goto    SonyInit
  00000008                M SONY_1                  equ     $ - IR_Zero
034E   2C1F               M                                 goto    Sony_1
  00000009                M SONY_2                  equ     $ - IR_Zero
034F   2C29               M                                 goto    Sony_2
  0000000A                M SONY_3                  equ     $ - IR_Zero
0350   2C38               M                                 goto    Sony_3
  0000000B                M PANA_INIT       equ     $ - IR_Zero
0351   2C4E               M                 goto    Pana_Init
  0000000C                M PANA_1          equ     $ - IR_Zero
0352   2C53               M                 goto    Pana1
  0000000D                M PANA_ADJ        equ     $ - IR_Zero
0353   2C77               M                 goto    Pana_Adj
                          M 
                          M 
                          M 
                          M                  ; IRPreIdle
                          M                  ; --------------------------------------------------
                          M                  ; Enables interupt on PORTB change, and then installs "IR_Idle"
                          M                  ;
0354                      M IRPreIdle
                          M                 if IR_mark / 0x0100 != IRPreIdle / 0x0100
                          M                         error "Page fault in RC5 #0294"
                          M                 endif
                          M 
                          M 
                          M                  ; Install interrupt on port B change
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                  ; Successor to dead time
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0354   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0355   2C80               M                         goto    IR_Ends
                          M 
                          M                  ; port B is now registered with an inactive level on IR input
                          M 
                          M                 if ICE  ; -------------------------------------
                          M                         nop             ; Breakpoint :
                          M                         nop             ;
                          M                 endif   ; -------------------------------------
                          M 
                          M                          ; clear a bogus interupt flag and enable port b interrupt on change
0356   100B               M                         bcf             INTCON, RBIF
0357   158B               M                         bsf             INTCON, RBIE
                          M                          ;
0358   3001               M                         movlw   IR_IDLE
0359   00EB               M                         movwf   IRJumpVector
                          M 
035A   1371               M                         bcf             IRPublicFlags, SECOND_LAST
                          M 
                          M                  ; IR_Idle
                          M          ; --------------------------------------------------
                          M          ;
                          M 
                          M 
035B                      M IR_Idle
                          M 
035B   1C0B               M                         btfss   INTCON, RBIF
035C   2B62               M                         goto    no_b
                          M 
                          M                          ; We are here because of interupt on port b change
                          M 
035D   100B               M                         bcf             INTCON, RBIF
035E   118B               M                         bcf             INTCON, RBIE
                          M 
035F   3051               M                         movlw   RTCC_SUB_LOAD - RTCC_RELOAD / 2
                          M 
                          M                 if RTCC_SUB_LOAD - RTCC_RELOAD / 2 > RTCC_SUB_LOAD
                          M                         error "RC5.ASM #0390. Sign error"
                          M                 endif
                          M 
0360   0081               M                         movwf   TMR0
0361   110B               M                         bcf             INTCON, T0IF
                          M 
0362                      M no_b
                          M 
                          M                         SkipRC5Active
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfss   RC5PORT, RC5PIN
                          M                 else
0362   1B06               M                         btfsc   RC5PORT, RC5PIN
                          M                 endif
0363   2B6F               M                         goto    test_timeout
                          M 
                          M 
                          M                  ; Idle -> Start reception
                          M                  ; ------------------------------
                          M                  ;
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf             RC5DEBUGPORT, RC5DEBUGPIN       ; Starting reception
                          M                 endif
                          M 
                          M                  ;
0364   01ED               M                         clrf    RC5Low  ; ends as high byte after shifting
                          M 
0365   15F1               M                         bsf             IRPublicFlags, IR_BUSY
0366   10F0               M                         bcf             IRPrivateFlags, RC5_TIMEOUTTEST
0367   15F0               M                         bsf             IRPrivateFlags, SONY_TEST
                          M 
                          M                          ; 14 bits in RC5
0368   300E               M                         movlw   .14
0369   00EC               M                         movwf   RC5Counter
                          M 
                          M                          ; The first biphase level in first start bit is per definition low.
                          M                          ;
036A   1070               M                         bcf             IRPrivateFlags, FIRST_BIPHASE_HALF
                          M 
036B   3004               M                         movlw   RC5_LAST
036C   00EB               M                         movwf   IRJumpVector
                          M 
036D   3003               M             movlw   .3
036E   2C84               M             goto    IR_EndsSetTicks
                          M 
                          M 
                          M                  ; Idle -> Test for timeout
                          M                  ; ------------------------------
                          M                  ;
036F                      M test_timeout
036F   0AEF               M                         incf    RC5Presc, F     ; Setting RC5Presc = 1
                          M 
                          M                          ; Break if not in timeout phase
                          M 
0370   1CF0               M                         btfss   IRPrivateFlags, RC5_TIMEOUTTEST
0371   2C8B               M                         goto    RC5_Ends
                          M 
                          M 
                          M                          ; If IR_READY_PENDING is true, then fire a RC5_READY
                          M                          ; when client clears IR_TIMEOUT
                          M 
0372   1E70               M                         btfss   IRPrivateFlags, IR_READY_PENDING
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0373   2B79               M                         goto    no_pending
                          M 
0374   1971               M                         btfsc   IRPublicFlags, IR_TIMEOUT
0375   2B79               M                         goto    no_pending
                          M 
                          M                 ifdef REMOTE_DECODER_TRAPS_ON
                          M                 btfsc   IRPublicFlags, IR_READY
                          M                 call    IR_TrapErrors
                          M                 endif
                          M 
                          M                 ifdef REMOTE_DECODER_TRAPS_ON
                          M                 btfsc   IRPrivateFlags, IR_DATA_SENT
                          M                 call    IR_TrapErrors
                          M                 endif
                          M 
                          M 
0376   1570               M                         bsf             IRPrivateFlags, IR_DATA_SENT
0377   1671               M                         bsf             IRPublicFlags, IR_READY                 ; IR_READY = 1
0378   1270               M                         bcf             IRPrivateFlags, IR_READY_PENDING        ; Clr:IR_READY_PENDING
0379                      M no_pending
                          M 
                          M                          ; Timeout counter
                          M 
0379   0BF4               M                         decfsz  IRTimeoutLow, F
037A   2C8B               M                         goto    RC5_Ends
                          M 
037B   0BF3               M                         decfsz  IRTimeoutHigh, F
037C   2C8B               M                         goto    RC5_Ends
                          M 
                          M                          ; Timeout
                          M                          ; -----------------
                          M 
037D   10F0               M                         bcf             IRPrivateFlags, RC5_TIMEOUTTEST
                          M 
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         nop
                          M                         bsf             RC5DEBUGPORT, RC5DEBUGPIN               ; Timeout
                          M                 endif
                          M 
                          M 
                          M                          ; Send a timeout to client if data is "on"
037E   1970               M                         btfsc   IRPrivateFlags, IR_DATA_SENT
037F   1571               M                         bsf             IRPublicFlags, IR_TIMEOUT
0380   1170               M                         bcf             IRPrivateFlags, IR_DATA_SENT
                          M 
                          M 
                          M                          ; Invalidate RC5 history
                          M                          ;
0381   30FF               M                         movlw   0xFF
0382   00F6               M                         movwf   IR_PrevHigh
                          M 
0383   2C8B               M                         goto    RC5_Ends
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M 
                          M 
                          M                 ; RC5_First
0384                      M RC5_First       ; --------------------------------------------------
                          M 
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf             RC5DEBUGPORT, RC5DEBUGPIN
                          M                 endif
                          M 
                          M 
                          M                          ;
0384   1070               M                         bcf             IRPrivateFlags, FIRST_BIPHASE_HALF
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0385   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0386   1470               M                         bsf             IRPrivateFlags, FIRST_BIPHASE_HALF
                          M 
0387   0AEB               M                         incf    IRJumpVector, F
                          M 
0388   2C83               M                         goto    IR_EndsSetTicksQuart
                          M 
                          M 
                          M 
                          M 
                          M                  ; The time advanced S2 second biphase sampling jumps to Sony here
0389                      M InstallSony
0389   1DF0               M                         btfss   IRPrivateFlags, SONY_TEST               ; ?
038A   2C12               M                         goto    SonyAbort
                          M 
038B   11F0               M                         bcf             IRPrivateFlags, SONY_TEST
                          M                          ;
038C   3007               M                         movlw   SONY_INIT
038D   00EB               M                         movwf   IRJumpVector
                          M 
                          M 
038E   30D9               M             movlw   SONY_ALIGN_RTCC_COUNTS
038F   00C4               M             movwf   RtccReloadValue
                          M 
0390   3002               M             movlw   SONY_ALIGN_SAMPLES_PER_BIT
0391   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
                          M 
                          M                 ; RC5_Half
0392                      M RC5_Half        ; --------------------------------------------------
                          M 
0392   0AEB               M                         incf    IRJumpVector, F
                          M 
                          M                          ; If SONY_TEST==true then advamce timing for next sample
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                          ;
0393   1DF0               M                         btfss   IRPrivateFlags, SONY_TEST
0394   2C83               M                         goto    IR_EndsSetTicksQuart
                          M 
0395   1771               M                         bsf             IRPublicFlags, SECOND_LAST
0396   3001               M                         movlw   1
0397   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
                          M                 ; RC5_Last
0398                      M RC5_Last        ; --------------------------------------------------
                          M                 ; Verify that we have a biphase bit, and save value
                          M                 ;
                          M 
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf     RC5DEBUGPORT, RC5DEBUGPIN
                          M                 endif
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0398   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0399   2B9E               M                         goto    first_on
                          M 
                          M                          ; Second biphase sample is off
                          M                          ; 10 ?
039A   1C70               M                         btfss   IRPrivateFlags, FIRST_BIPHASE_HALF
039B   2C08               M                         goto    RC5_Abort
                          M                          ; RC5 bit = 0
039C   1003               M                         clrc
039D   2BA1               M                         goto    level_ok
                          M 
                          M 
                          M                  ; Second biphase sample is on
039E                      M first_on
                          M                          ; 01 ?
039E   1870               M                         btfsc   IRPrivateFlags, FIRST_BIPHASE_HALF
039F   2B89               M                         goto    InstallSony             ; It was a '11' -> try Sony
                          M                          ; RC5 bit = 1
03A0   1403               M                         setc
                          M 
                          M                  ; Ok, opposite phases
03A1                      M level_ok
03A1   0DED               M                         rlf             RC5Low, F
03A2   0DEE               M                         rlf             RC5High, F
                          M 
                          M                          ; More bits ?
                          M 
03A3   0BEC               M                         decfsz  RC5Counter, F
03A4   2BB3               M                         goto    rc5_next_bit
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M                          ; RC5 complete, all 14 bits home
                          M                          ; ------------------------------
                          M                          ;
                          M                         ;bsf    IRPrivateFlags, RC5_FORMAT
03A5   30FC               M                         movlw   b'11111100'
03A6   05F2               M                         andwf   IRPrivateFlags_2, F
                          M 
                          M                         ;bsf    IRPublicFlags, IR_RC5_PROTOCOL
                          M 
                          M                          ; Save previous toggle bit in flags from old one
                          M                          ;
03A7   13F0               M                         bcf             IRPrivateFlags, RC5_PREV_TOGGLE_BIT
03A8   1B70               M                         btfsc   IRPrivateFlags, RC5_TOGGLE_BIT
03A9   17F0               M                         bsf             IRPrivateFlags, RC5_PREV_TOGGLE_BIT
                          M 
                          M                          ; Save new toggle bit in flags
                          M                          ;
03AA   1370               M                         bcf             IRPrivateFlags, RC5_TOGGLE_BIT
03AB   1A6E               M                         btfsc   RC5High, BIT4
03AC   1770               M                         bsf             IRPrivateFlags, RC5_TOGGLE_BIT
                          M 
                          M                          ; Pack to 12 bit (move second start bit)
                          M                          ;
03AD   11EE               M                         bcf             RC5High, BIT3
03AE   1A6E               M                         btfsc   RC5High, BIT4
03AF   15EE               M                         bsf             RC5High, BIT3
                          M 
03B0   300F               M                         movlw   0x0F
03B1   05EE               M                         andwf   RC5High, F
                          M 
03B2   2BBC               M                         goto    InstallSilence
                          M 
                          M 
                          M 
03B3                      M rc5_next_bit
03B3   3002               M                         movlw   RC5_FIRST
03B4   00EB               M                         movwf   IRJumpVector
                          M                          ;
03B5   1B71               M                         btfsc   IRPublicFlags, SECOND_LAST
03B6   11F0               M                         bcf             IRPrivateFlags, SONY_TEST
                          M 
03B7   3004               M                         movlw   SAMPLES_PER_BIT / 2
03B8   1B71               M                         btfsc   IRPublicFlags, SECOND_LAST
03B9   3E01               M                         addlw   1                               ; Fix timing, see #3. Next sample will b
                            e toggle bit
03BA   1371               M                         bcf             IRPublicFlags, SECOND_LAST
                          M 
03BB   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
                          M 
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M 
03BC                      M InstallSilence
                          M 
                          M                 if ICE  ; -------------------------------------
                          M                         nop             ; Breakpoint :
                          M                         nop             ;
                          M                 endif   ; -------------------------------------
                          M 
03BC   3005               M                         movlw   RC5_CHKSILENCE
03BD   00EB               M                         movwf   IRJumpVector
                          M 
03BE   3005               M                         movlw   ZERO_PASSES
03BF   00EC               M                         movwf   RC5Counter
                          M 
03C0   3004               M                         movlw   ZERO_PRESC
03C1   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
                          M 
                          M                 ; RC5_CheckSilence
                          M                 ; --------------------------------------------------
                          M 
03C2                      M RC5_CheckSilence
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
03C2   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
03C3   2C08               M                         goto    SilenceAbort
                          M 
03C4                      M level_is_low
03C4   0BEC               M                         decfsz  RC5Counter, F
03C5   2BEC               M                         goto    rc5_next_silence
                          M 
                          M 
                          M                 if ICE  ; -------------------------------------
                          M                         nop             ; Breakpoint :
                          M                         nop             ;
                          M                 endif   ; -------------------------------------
                          M 
                          M 
                          M 
                          M 
                          M                  ; Silence okay. New IR code is accepted
                          M                  ; -----------------------
                          M                  ;
                          M 
03C6   30FC               M             movlw   b'11111100'
03C7   05F1               M             andwf   IRPublicFlags, F
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03C8   3003               M                         movlw   b'00000011'
03C9   0572               M                         andwf   IRPrivateFlags_2, W
                          M 
03CA   04F1               M                         iorwf   IRPublicFlags, F
                          M 
                          M 
                          M 
                          M 
                          M                  ; Figure out if this is a new code or a duplicate to the previous recieved code
                          M                  ; ToDo : Include a test for different standards as well....
                          M                  ;
03CB   15F2               M             bsf     IRPrivateFlags_2, IR_NEW_CODE   ; take a wild guess - its new...
                          M 
03CC   086D               M                         movf    RC5Low, W
03CD   0275               M                         subwf   IR_PrevLow, W
03CE   1D03               M                         skpz
03CF   2BD4               M                         goto    code_is_new
                          M 
03D0   086E               M                         movf    RC5High, W
03D1   0276               M                         subwf   IR_PrevHigh, W
03D2   1903               M                         skpnz
03D3   11F2               M             bcf     IRPrivateFlags_2, IR_NEW_CODE   ; no, it was not new...
03D4                      M code_is_new
                          M              ; New or old code processing based on 'IR_NEW_CODE' flag
                          M              ;
03D4   3002               M             movlw   IR_MIN_NOF_CODES
03D5   19F2               M             btfsc   IRPrivateFlags_2, IR_NEW_CODE
03D6   00F9               M             movwf   IR_HitCounter
                          M 
                          M              ; Wait for enough hits
                          M                          ; -----------------------
                          M              ;
03D7   0BF9               M             decfsz  IR_HitCounter, F
03D8   2BE3               M             goto    not_enough
                          M 
03D9   1D70               M                         btfss   IRPrivateFlags, IR_DATA_SENT
03DA   2BDF               M                         goto    JustStarted
                          M 
                          M                         ; This is a new code in a otherwise continous IR stream (there were no timeout)
                          M                         ;
03DB   1571               M                         bsf             IRPublicFlags, IR_TIMEOUT                       ; IR_TIMEOUT = 1
03DC   1670               M                         bsf             IRPrivateFlags, IR_READY_PENDING        ; IR_READY_PENDING = 1
03DD   1170               M                         bcf             IRPrivateFlags, IR_DATA_SENT            ; IR_DATA_SENT = 0
                          M                              ;
03DE   2BE3               M                         goto    SaveNewData
                          M 
                          M                          ; This is a plain new code (previous state was timeout)
03DF                      M JustStarted
                          M 
03DF   1D70               M                         btfss   IRPrivateFlags, IR_DATA_SENT
03E0   1671               M                         bsf             IRPublicFlags, IR_READY                         ; IR_READY = 1
                          M 
03E1   1570               M                         bsf             IRPrivateFlags, IR_DATA_SENT            ; IR_DATA_SENT = 1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03E2   11F1               M                         bcf             IRPublicFlags, IR_BUSY                          ; IR_BUSY = 0
                          M 
03E3                      M not_enough
                          M                         ; IR_MIN_NOF_CODES is not received yet so no official new code is
                          M                         ; flagged yet.
                          M 
03E3                      M SaveNewData
                          M                          ; Save new IR code in 'Prev' variables
                          M                          ; ---------------------------------------------------
                          M                          ; - New and repeat code branches join here.
                          M 
03E3   086D               M                         movf    RC5Low, W
03E4   00F5               M                         movwf   IR_PrevLow
                          M 
03E5   086E               M                         movf    RC5High, W
03E6   00F6               M                         movwf   IR_PrevHigh
                          M 
                          M 
                          M                          ; Set timers for deadtime and timeout detection
                          M 
03E7                      M PresetTimers
03E7   14F0               M                         bsf     IRPrivateFlags, RC5_TIMEOUTTEST
                          M 
                          M                          ; Preset dead time timer
                          M                          ;
03E8   3006               M                         movlw   RC5_DEADTIME
03E9   00EB               M                         movwf   IRJumpVector
                          M 
03EA   302D               M                         movlw   DEAD_PRESC
03EB   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
                          M                          ; Prepare for next silence sample and exit
                          M                          ;
03EC                      M rc5_next_silence
03EC   3004               M                         movlw   ZERO_PRESC
03ED   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
                          M 
                          M 
                          M                 ; RC5_DeadTime
                          M                 ; --------------------------------------------------
03EE                      M RC5_DeadTime
                          M 
                          M                  ; Dead time complete - enter idle
                          M 
03EE   3003               M             movlw   b'00000011'
03EF   0572               M             andwf   IRPrivateFlags_2, W
                          M 
03F0   1903               M             skpnz
03F1   2BF6               M             goto    define_rc5
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03F2   3C02               M             sublw   2
03F3   1D03               M             skpz
03F4   2BFB               M             goto    define_sony
03F5   2C00               M             goto    define_pana
                          M 
                          M 
                          M                 ;btfss  IRPrivateFlags, RC5_FORMAT
                          M                 ;goto   define_sony
                          M 
                          M 
03F6                      M define_rc5
03F6   3002               M                         movlw   (RC5_TIMEOUT_PASSES/0x100) + 1
03F7   00F3               M                         movwf   IRTimeoutHigh
03F8   30B9               M                         movlw   RC5_TIMEOUT_PASSES & 0xFF
03F9   00F4               M                         movwf   IRTimeoutLow
03FA   2C04               M                         goto    install_idle
                          M 
03FB                      M define_sony
03FB   3001               M                         movlw   (SONY_TIMEOUT_PASSES/0x100) + 1
03FC   00F3               M                         movwf   IRTimeoutHigh
03FD   30E1               M                         movlw   SONY_TIMEOUT_PASSES & 0xFF
03FE   00F4               M                         movwf   IRTimeoutLow
03FF   2C04               M                         goto    install_idle
                          M 
                          M 
0400                      M define_pana
0400   3002               M                         movlw   (PANA_TIMEOUT_PASSES/0x100) + 1
0401   00F3               M                         movwf   IRTimeoutHigh
0402   30D8               M                         movlw   PANA_TIMEOUT_PASSES & 0xFF
0403   00F4               M                         movwf   IRTimeoutLow
                          M 
                          M 
                          M 
0404                      M install_idle
0404   3000               M                         movlw   IR_PRE_IDLE
0405   00EB               M                         movwf   IRJumpVector
0406   3001               M                         movlw   IDLE_PRESC
0407   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
                          M 
                          M 
                          M                  ; Exit points
                          M                  ; -----------------------
                          M                  ; A reception is terminated.
                          M 
0408                      M PanaAbort
                          M                         if ICE  ; -------------------------------------
                          M                         movlw   1
                          M                 nop
                          M                 nop
                          M                         goto    IR_Abort
                          M                 endif   ; -------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M 
0408                      M RC5_Abort
                          M                         if ICE  ; -------------------------------------
                          M                         movlw   2
                          M                         nop
                          M                         nop
                          M                         goto    IR_Abort
                          M                         endif   ; -------------------------------------
                          M 
0408                      M SilenceAbort
                          M                         if ICE  ; -------------------------------------
                          M                         movlw   3
                          M                 nop
                          M                 nop
                          M                         goto    IR_Abort
                          M                         endif   ; -------------------------------------
                          M 
                          M 
0408                      M FromSonyAbort
                          M                         if ICE  ; -------------------------------------
                          M                         movlw   4
                          M                 nop
                          M                 nop
                          M                         goto    IR_Abort
                          M                         endif   ; -------------------------------------
                          M 
                          M 
                          M 
                          M 
0408                      M IR_Abort
0408   11F1               M                         bcf             IRPublicFlags, IR_BUSY
                          M                          ;
0409   3000               M                         movlw   IR_PRE_IDLE
040A   00EB               M                         movwf   IRJumpVector
                          M 
                          M                          ; Send a timeout to client if data is "on"
                          M                          ;
040B   1970               M                         btfsc   IRPrivateFlags, IR_DATA_SENT
040C   1571               M                         bsf             IRPublicFlags, IR_TIMEOUT                       ; IR_TIMEOUT = 1
040D   1170               M                         bcf             IRPrivateFlags, IR_DATA_SENT            ; IR_DATA_SENT = 0
                          M 
                          M                          ; Invalidate history
                          M                          ;
040E   30FF               M                         movlw   0xFF
040F   00F6               M                         movwf   IR_PrevHigh
                          M 
                          M                          ;
                          M                          ; Skip RC5 part for half a RC5 period
                          M                          ;
0410   3043               M                         movlw   ABORT_PRESC
0411   2C84               M                         goto    IR_EndsSetTicks
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0412                      M SonyAbort
                          M                  ;
0412   308B               M                         movlw   RTCC_SUB_LOAD
0413   00C4               M                         movwf   RtccReloadValue
                          M 
0414   2C08               M                         goto    FromSonyAbort
                          M 
                          M 
                          M 
                          M                  ;;; -----------------------------------------------
                          M                  ;;;
                          M                  ;;; S O N Y
                          M                  ;;;
                          M                  ;;; -----------------------------------------------
                          M 
                          M 
                          M 
                          M                         ; Sony starts
0415                      M SonyInit        ; Sampling off level from 2.4 to 3.0 msec
                          M 
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf     RC5DEBUGPORT, RC5DEBUGPIN
                          M                 endif
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0415   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0416   2C44               M                         goto    InitPanasonic   ; SonyAbort
                          M 
0417   30BA               M                         movlw   SONY_TO_SONY_RTCC_COUNTS
0418   00C4               M                         movwf   RtccReloadValue
                          M 
0419   3008               M                         movlw   SONY_1
041A   00EB               M                         movwf   IRJumpVector
                          M 
                          M                          ; Sony will be 12 or 15.
041B   300F               M                         movlw   .15
041C   00EC               M                         movwf   RC5Counter
                          M 
041D   01ED               M                         clrf    RC5Low  ; ends as high byte after shifting
                          M 
041E   2C89               M                         goto    Sony_Ends
                          M 
                          M 
                          M 
041F                      M Sony_1
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf     RC5DEBUGPORT, RC5DEBUGPIN
                          M                 endif
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                          ; This is the special test as an invalid level can be that this was
                          M                          ; an 12 bit transmission (and not 15)
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
041F   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0420   2C26               M                         goto    SonyStartOK
                          M 
                          M                          ; Failed to have active start bit.
                          M                          ; Check if data should be accepted as an 12 bit code
                          M                          ;
                          M                          ;
0421   3003               M                         movlw   .3              ; .15 - .12
0422   026C               M                         subwf   RC5Counter, W
                          M                          ;
0423   1903               M                         skpnz
0424   2C41               M                         goto    SonyRxComplete
                          M                          ;
                          M                          ;
0425   2C12               M                         goto    SonyAbort       ; Not 12 bits -> abort
                          M 
                          M 
0426                      M SonyStartOK
0426   3009               M                         movlw   SONY_2
0427   00EB               M                         movwf   IRJumpVector
0428   2C89               M                         goto    Sony_Ends
                          M 
                          M 
                          M 
0429                      M Sony_2
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf     RC5DEBUGPORT, RC5DEBUGPIN
                          M                 endif
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0429   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
042A   2C33               M                         goto    SonyHigh
                          M 
                          M                          ; "0"
                          M 
042B   3008               M                         movlw   SONY_1
042C   00EB               M                         movwf   IRJumpVector
                          M 
042D   1003               M                         clrc
042E   0DED               M                         rlf             RC5Low, F
042F   0DEE               M                         rlf             RC5High, F
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
0430   0BEC               M                         decfsz  RC5Counter, F
0431   2C89               M                         goto    Sony_Ends
                          M                          ;
0432   2C41               M                         goto    SonyRxComplete
                          M 
0433                      M SonyHigh
                          M                          ; Sony format
                          M                         ;bcf    IRPrivateFlags, RC5_FORMAT
0433   1472               M                         bsf             IRPrivateFlags_2, IR_FORMAT_LO
0434   10F2               M                         bcf             IRPrivateFlags_2, IR_FORMAT_HIGH
                          M 
                          M                         ;bcf    IRPublicFlags, IR_RC5_PROTOCOL
                          M 
0435   300A               M                         movlw   SONY_3
0436   00EB               M                         movwf   IRJumpVector
                          M 
0437   2C89               M                         goto    Sony_Ends
                          M 
                          M 
                          M 
                          M 
                          M 
0438                      M Sony_3
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf     RC5DEBUGPORT, RC5DEBUGPIN
                          M                 endif
                          M 
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0438   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0439   2C12               M                         goto    SonyAbort
                          M 
                          M                          ; "1"
                          M 
043A   3008               M                         movlw   SONY_1
043B   00EB               M                         movwf   IRJumpVector
                          M 
043C   1403               M                         setc
043D   0DED               M                         rlf     RC5Low, F
043E   0DEE               M                         rlf     RC5High, F
                          M 
043F   0BEC               M                         decfsz  RC5Counter, F
0440   2C89               M                         goto    Sony_Ends
                          M                  ;
0441                      M SonyRxComplete   ;
                          M                  ;
0441   308B               M                         movlw   RTCC_SUB_LOAD
0442   00C4               M                         movwf   RtccReloadValue
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0443   2BBC               M                         goto    InstallSilence
                          M 
                          M 
                          M 
                          M                  ;;; -----------------------------------------------
                          M                  ;;;
                          M                  ;;; P A N A S O N I C
                          M                  ;;;
                          M                  ;;; -----------------------------------------------
                          M 
0444                      M InitPanasonic
                          M 
0444   30D9               M                         movlw   PANA_ALIGN_RTCC_COUNTS
0445   00C4               M                         movwf   RtccReloadValue
                          M 
0446   300B               M                         movlw   PANA_INIT
0447   00EB               M                         movwf   IRJumpVector
                          M 
0448   3031               M                         movlw   .49
0449   00EC               M                         movwf   RC5Counter
                          M 
044A   01ED               M                         clrf    RC5Low  ; ends as high byte after shifting
                          M 
                          M                         ;bcf    IRPrivateFlags, RC5_FORMAT
                          M 
044B   01F7               M                         clrf    IR_PanaCount
                          M 
044C   3004               M                         movlw   PANA_ALIGN_SAMPLES_PER_BIT
044D   2C84               M                         goto    IR_EndsSetTicks
                          M 
                          M 
044E                      M Pana_Init
                          M 
044E   01F8               M             clrf    IR_PanaAdjVal
                          M 
044F   300C               M                         movlw   PANA_1
0450   00EB               M                         movwf   IRJumpVector
                          M 
0451   3088               M                         movlw   PANA_TO_PANA_RTCC_COUNTS
0452   00C4               M                         movwf   RtccReloadValue
                          M 
                          M                  ; Fall through
                          M 
                          M 
                          M                  ; "Pana1"
                          M                  ; --------------------
0453                      M Pana1
                          M                 if IR_DEBUG_SAMPLE_TIME
                          M                         bsf     RC5DEBUGPORT, RC5DEBUGPIN
                          M                 endif
                          M 
                          M 
0453   09F8 0A78          M             negf    IR_PanaAdjVal, W
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0455   07C4               M             addwf   RtccReloadValue, F      ;
0456   01F8               M             clrf    IR_PanaAdjVal
                          M 
                          M 
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0457   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0458   2C5B               M             goto    PanaCarrier
                          M 
0459   0AF7               M             incf    IR_PanaCount, F
                          M 
045A   2C86               M             goto    PanaEnds
                          M 
                          M 
045B                      M PanaCarrier
045B   3001               M             movlw   1
045C   0277               M             subwf   IR_PanaCount, W
045D   1D03               M             skpz
045E   2C61               M             goto    no_double
                          M 
045F   1403               M             setc
0460   2C66               M             goto    load_pana
                          M 
0461                      M no_double
0461   3003               M             movlw   .3
0462   0277               M             subwf   IR_PanaCount, W
0463   1D03               M             skpz
0464   2C6D               M             goto    PanaAbortTest
                          M 
0465   1003               M             clrc
                          M 
0466                      M load_pana
                          M 
0466   0BEC               M             decfsz  RC5Counter, F
0467   2C70               M             goto    PanaInitAdj
                          M 
                          M                         if ICE  ; -------------------------------------
                          M                         nop             ; Breakpoint : Panasonic, all bits loaded
                          M                         nop
                          M                         endif   ; -------------------------------------
                          M 
                          M                  ; Define Panasonic
                          M                  ;
0468   1072               M                         bcf             IRPrivateFlags_2, IR_FORMAT_LO
0469   14F2               M                         bsf             IRPrivateFlags_2, IR_FORMAT_HIGH
                          M                          ;
046A   308B               M                         movlw   RTCC_SUB_LOAD
046B   00C4               M                         movwf   RtccReloadValue
                          M                          ;
046C   2BBC               M                         goto    InstallSilence
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M 
046D                      M PanaAbortTest
046D   0000               M             nop
046E   0000               M             nop
046F   2C08               M             goto    PanaAbort
                          M 
                          M 
                          M 
                          M                  ; "PanaInitAdj"
                          M                  ; --------------------
0470                      M PanaInitAdj
                          M 
0470   0DED               M                         rlf     RC5Low, F
0471   0DEE               M                         rlf     RC5High, F
                          M 
0472   01F7               M             clrf    IR_PanaCount
                          M 
0473   300D               M                         movlw   PANA_ADJ
0474   00EB               M                         movwf   IRJumpVector
                          M 
0475   3001               M                         movlw   1
0476   2C84               M             goto    IR_EndsSetTicks
                          M 
                          M 
                          M 
                          M                  ; "Pana_Adj"
                          M                  ; --------------------
                          M                  ; Samples the IR where it is supposed to go from "high" to "low" and adjusts the
                          M                  ; sampling period accordingly. (note that there is no 'good enough' detection !)
                          M                  ; If signal is high then the period should be increased -> Rtcc count increased
0477                      M Pana_Adj
                          M 
0477   30EB               M             movlw   -15
                          M                         SkipRC5Quiet
                          M                 if IR_RECIEVER_ACTIVE_HIGH
                          M                         btfsc   RC5PORT, RC5PIN
                          M                 else
0478   1F06               M                         btfss   RC5PORT, RC5PIN
                          M                 endif
0479   300F               M                         movlw   .15
                          M 
047A   00F8               M             movwf   IR_PanaAdjVal
                          M 
047B   07C4               M             addwf   RtccReloadValue, F      ; Signal "high" -> Slow down
                          M 
047C   300C               M                         movlw   PANA_1
047D   00EB               M                         movwf   IRJumpVector
                          M 
047E   3001               M                         movlw   1
047F   2C84               M             goto    IR_EndsSetTicks
                          M 
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M 
                          M 
                          M                 ifdef REMOTE_DECODER_TRAPS_ON
                          M IR_TrapErrors
                          M                         nop
                          M                         nop
                          M                         return
                          M 
                          M                         movlw   FATAL_TRAP
                          M                         goto    FatalStop
                          M                 endif
                          M 
                          M 
                          M 
0480                      M IR_Ends
0480   3001               M                         movlw   1
0481   00EF               M                         movwf   RC5Presc
0482   2C8B               M                         goto    RC5_Ends
                          M 
                          M 
                          M 
0483                      M IR_EndsSetTicksQuart
0483   3002               M                         movlw   SAMPLES_PER_BIT / 4
                          M 
0484                      M IR_EndsSetTicks
0484   00EF               M                         movwf   RC5Presc
0485   2C8B               M                         goto    RC5_Ends
                          M 
                          M 
0486                      M PanaEnds
0486   3002               M                 movlw   PANA_SAMPLES_PER_BIT
0487   00EF               M                         movwf   RC5Presc
0488   2C8B               M                         goto    RC5_Ends
                          M 
0489                      M Sony_Ends
0489   3002               M                         movlw   SONY_SAMPLES_PER_BIT
048A   00EF               M                         movwf   RC5Presc
                          M 
                          M 
048B                      M RC5_Ends
                          M 
                      02378 
                      02379 
                      02380                 ; RTCC reload
                      02381                 ; ----------------------------------------
                      02382                 ; If C = 1 after the sub then the RTCC didn't get below 0 and an
                      02383                 ; interrupt will be missed...
                      02384 
048B   0844           02385                         movf    RtccReloadValue, W
048C   0281           02386                         subwf   TMR0, F
                      02387 
048D   1803           02388                         skpnc
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

048E   150B           02389                         bsf             INTCON, T0IF    ; Don't miss the interupt..
                      02390 
                      02391 
                      02392                          ; Let the ISR loop internally if needed to minimize switching overhead
                      02393                          ; ----------------------------------------
                      02394 
048F   1D0B           02395                         btfss   INTCON, T0IF            ; INTCON is in all banks
0490   2C92           02396                         goto    IntrExit
                      02397 
                      02398                 if ICE  ; -------------------------------------
                      02399                         nop             ; Breakpoint : Isr looped
                      02400                         nop             ;
                      02401                 endif   ; -------------------------------------
                      02402 
0491   2B37           02403                         goto    LoopedISR
                      02404 
                      02405 
                      02406 
                      02407 
                      02408                 ; Interrupt exit
                      02409                 ; -----------------------------------------------------------
                      02410 
0492                  02411 IntrExit
0492   087E           02412                         movf    IntrContextP, W
0493   008A           02413                         movwf   PCLATH                  ; Restore PCLATH
0494   0E7C           02414                         swapf   IntrContextS, W
0495   0083           02415                         movwf   STATUS                  ; Restore swapped STATUS
0496   0EFD           02416                         swapf   IntrContextW, F
0497   0E7D           02417                         swapf   IntrContextW, W ; Restore W (leaving STATUS)
0498   0009           02418                         retfie
                      02419 
                      02420 
                      02421 
                      02422 
                      02423                         include "RC5UTIL.asm"
                      00001 ;
                      00002 ; ========================================================================
                      00003 ; RC5UTIL.ASM
                      00004 ;
                      00005 ; Version history
                      00006 ; 001   Initial.
                      00007 ; ========================================================================
                      00008 ;
                      00009 
                      00010 ;
                      00011 ; LookForShortedPins                    Returns first pin that user has shorted
                      00012 ; SetBitInOutputMask
                      00013 ; ClearBitInOutputMask
                      00014 ; ReverseBitInOutputMask
                      00015 ; ClearBitInOutputMask                  Clears the specified bit in outputs mask
                      00016 ; CheckForRadioAssignement              Check if the specified pin has a radio assignment
                      00017 ; AddPinDataToTable
                      00018 ; FindCodeAndConfAndPinInTable
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019 ; FindModePinInTable                    Returns the first pin used for the assignment with specified mod
                            e.
                      00020 ; ResetTable
                      00021 ; DefineWriteNullCell
                      00022 ; ClearPinFromTable
                      00023 ; TestIfCellValid
                      00024 ; ClearRadioChannels
                      00025 ; NextRadioPin
                      00026 ; PrevRadioPin
                      00027 ; GetFirstPinNumberFromIRCode
                      00028 ; ReadModeConf
                      00029 ; ModeConf2Int                                  Use ReadModeConf instead
                      00030 ; ModeInt2Conf
                      00031 ; ActivateOutputMask
                      00032 ; DeactivateOutputMask
                      00033 ; SaveCurrentOutputLevels               The state of the output pins are saved in eeprom if changed
                      00034 ; RestoreOutputLevelMask
                      00035 ; GetFirstCodeAndConf                   Finds the IR code and conf in table from pin number
                      00036 ; GetNextCodeAndConf
                      00037 ; CheckForRadioAssignment
                      00038 ; SetOutputsFromMasks                   Sets the 16 output pin levels as given by "OutputsMaskXxx"
                      00039 ;
                      00040 
                      00041 
                      00042                 ; TestOutputPin - Macro
                      00043                 ; ---------------------------------------------------
                      00044                 ;
                      00045                 ;
                      00046 TestOutputPin   macro   port, bit, pin
                      00047 
                      00048                         btfss   mask, bit
                      00049                         goto    $ + 4
                      00050                         btfss   port, pin
                      00051                         goto    FoundUnexpectedPin      ; they differ
                      00052                         goto    $ + 4                           ; both high
                      00053 
                      00054                         btfss   port, pin
                      00055                         goto    $ + 2                           ; both low
                      00056                         goto    FoundUnexpectedPin      ; they differ
                      00057 
                      00058                         addlw   1
                      00059                         endm
                      00060 
                      00061 
                      00062 
                      00063 
                      00064 
                      00065                 ; LookForShortedPins
                      00066                 ; ---------------------------------------------------
                      00067                 ; Returns first pin that has unexpected level from a user short
                      00068                 ; to either gnd or vcc.
                      00069                 ; Scans output pins sequentially from 0 to 15.
                      00070                 ;
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00071                 ; Output : W = pin number (0-15)
                      00072                 ;          C = 1 if pin where found, else C = 0
                      00073                 ;
                      00074 
0499                  00075 LookForShortedPins
                      00076 
  00000026            00077 mask            set  OutputsMask32+0
                      00078 
0499   0103           00079                         clrw
                      00080 
                      00081                         TestOutputPin   PIN0_PORT, BIT0, PIN0
                          M 
049A   1C26               M                         btfss   mask, BIT0
049B   2C9F               M                         goto    $ + 4
049C   1D07               M                         btfss   PIN0_PORT, PIN0
049D   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
049E   2CA2               M                         goto    $ + 4                           ; both high
                          M 
049F   1D07               M                         btfss   PIN0_PORT, PIN0
04A0   2CA2               M                         goto    $ + 2                           ; both low
04A1   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04A2   3E01               M                         addlw   1
                      00082                 ifdef PIN1_PORT
                      00083                         TestOutputPin   PIN1_PORT, BIT1, PIN1
                          M 
04A3   1CA6               M                         btfss   mask, BIT1
04A4   2CA8               M                         goto    $ + 4
04A5   1E87               M                         btfss   PIN1_PORT, PIN1
04A6   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04A7   2CAB               M                         goto    $ + 4                           ; both high
                          M 
04A8   1E87               M                         btfss   PIN1_PORT, PIN1
04A9   2CAB               M                         goto    $ + 2                           ; both low
04AA   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04AB   3E01               M                         addlw   1
                      00084                 endif
                      00085                 ifdef PIN2_PORT
                      00086                         TestOutputPin   PIN2_PORT, BIT2, PIN2
                          M 
04AC   1D26               M                         btfss   mask, BIT2
04AD   2CB1               M                         goto    $ + 4
04AE   1C87               M                         btfss   PIN2_PORT, PIN2
04AF   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04B0   2CB4               M                         goto    $ + 4                           ; both high
                          M 
04B1   1C87               M                         btfss   PIN2_PORT, PIN2
04B2   2CB4               M                         goto    $ + 2                           ; both low
04B3   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04B4   3E01               M                         addlw   1
                      00087                         TestOutputPin   PIN3_PORT, BIT3, PIN3
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
04B5   1DA6               M                         btfss   mask, BIT3
04B6   2CBA               M                         goto    $ + 4
04B7   1F07               M                         btfss   PIN3_PORT, PIN3
04B8   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04B9   2CBD               M                         goto    $ + 4                           ; both high
                          M 
04BA   1F07               M                         btfss   PIN3_PORT, PIN3
04BB   2CBD               M                         goto    $ + 2                           ; both low
04BC   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04BD   3E01               M                         addlw   1
                      00088                 endif
                      00089                 ifdef PIN4_PORT
                      00090                         TestOutputPin   PIN4_PORT, BIT4, PIN4
                          M 
04BE   1E26               M                         btfss   mask, BIT4
04BF   2CC3               M                         goto    $ + 4
04C0   1C07               M                         btfss   PIN4_PORT, PIN4
04C1   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04C2   2CC6               M                         goto    $ + 4                           ; both high
                          M 
04C3   1C07               M                         btfss   PIN4_PORT, PIN4
04C4   2CC6               M                         goto    $ + 2                           ; both low
04C5   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04C6   3E01               M                         addlw   1
                      00091                         TestOutputPin   PIN5_PORT, BIT5, PIN5
                          M 
04C7   1EA6               M                         btfss   mask, BIT5
04C8   2CCC               M                         goto    $ + 4
04C9   1F87               M                         btfss   PIN5_PORT, PIN5
04CA   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04CB   2CCF               M                         goto    $ + 4                           ; both high
                          M 
04CC   1F87               M                         btfss   PIN5_PORT, PIN5
04CD   2CCF               M                         goto    $ + 2                           ; both low
04CE   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04CF   3E01               M                         addlw   1
                      00092                         TestOutputPin   PIN6_PORT, BIT6, PIN6
                          M 
04D0   1F26               M                         btfss   mask, BIT6
04D1   2CD5               M                         goto    $ + 4
04D2   1C06               M                         btfss   PIN6_PORT, PIN6
04D3   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04D4   2CD8               M                         goto    $ + 4                           ; both high
                          M 
04D5   1C06               M                         btfss   PIN6_PORT, PIN6
04D6   2CD8               M                         goto    $ + 2                           ; both low
04D7   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04D8   3E01               M                         addlw   1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00093                         TestOutputPin   PIN7_PORT, BIT7, PIN7
                          M 
04D9   1FA6               M                         btfss   mask, BIT7
04DA   2CDE               M                         goto    $ + 4
04DB   1C86               M                         btfss   PIN7_PORT, PIN7
04DC   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04DD   2CE1               M                         goto    $ + 4                           ; both high
                          M 
04DE   1C86               M                         btfss   PIN7_PORT, PIN7
04DF   2CE1               M                         goto    $ + 2                           ; both low
04E0   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04E1   3E01               M                         addlw   1
                      00094 
  00000027            00095 mask            set  OutputsMask32+1
                      00096 
                      00097                 if ICE  ; -------------------------------------
                      00098                         nop             ; Breakpoint :
                      00099                         nop             ;
                      00100                 endif   ; -------------------------------------
                      00101 
                      00102                         TestOutputPin   PIN8_PORT, BIT0, PIN8
                          M 
04E2   1C27               M                         btfss   mask, BIT0
04E3   2CE7               M                         goto    $ + 4
04E4   1E85               M                         btfss   PIN8_PORT, PIN8
04E5   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04E6   2CEA               M                         goto    $ + 4                           ; both high
                          M 
04E7   1E85               M                         btfss   PIN8_PORT, PIN8
04E8   2CEA               M                         goto    $ + 2                           ; both low
04E9   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04EA   3E01               M                         addlw   1
                      00103                         TestOutputPin   PIN9_PORT, BIT1, PIN9
                          M 
04EB   1CA7               M                         btfss   mask, BIT1
04EC   2CF0               M                         goto    $ + 4
04ED   1D06               M                         btfss   PIN9_PORT, PIN9
04EE   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
04EF   2CF3               M                         goto    $ + 4                           ; both high
                          M 
04F0   1D06               M                         btfss   PIN9_PORT, PIN9
04F1   2CF3               M                         goto    $ + 2                           ; both low
04F2   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04F3   3E01               M                         addlw   1
                      00104                         TestOutputPin   PIN10_PORT, BIT2, PIN10
                          M 
04F4   1D27               M                         btfss   mask, BIT2
04F5   2CF9               M                         goto    $ + 4
04F6   1D86               M                         btfss   PIN10_PORT, PIN10
04F7   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04F8   2CFC               M                         goto    $ + 4                           ; both high
                          M 
04F9   1D86               M                         btfss   PIN10_PORT, PIN10
04FA   2CFC               M                         goto    $ + 2                           ; both low
04FB   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
04FC   3E01               M                         addlw   1
                      00105                         TestOutputPin   PIN11_PORT, BIT3, PIN11
                          M 
04FD   1DA7               M                         btfss   mask, BIT3
04FE   2D02               M                         goto    $ + 4
04FF   1D85               M                         btfss   PIN11_PORT, PIN11
0500   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
0501   2D05               M                         goto    $ + 4                           ; both high
                          M 
0502   1D85               M                         btfss   PIN11_PORT, PIN11
0503   2D05               M                         goto    $ + 2                           ; both low
0504   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
0505   3E01               M                         addlw   1
                      00106 
                      00107                 if ICE  ; -------------------------------------
                      00108                         nop             ; Breakpoint :
                      00109                         nop             ;
                      00110                 endif   ; -------------------------------------
                      00111 
                      00112                         TestOutputPin   PIN12_PORT, BIT4, PIN12
                          M 
0506   1E27               M                         btfss   mask, BIT4
0507   2D0B               M                         goto    $ + 4
0508   1E06               M                         btfss   PIN12_PORT, PIN12
0509   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
050A   2D0E               M                         goto    $ + 4                           ; both high
                          M 
050B   1E06               M                         btfss   PIN12_PORT, PIN12
050C   2D0E               M                         goto    $ + 2                           ; both low
050D   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
050E   3E01               M                         addlw   1
                      00113                 if ICE == false
Message[301]: MESSAGE: (Info: 16 pins available)
                      00114                         messg "Info: 16 pins available"
                      00115                         TestOutputPin   PIN13_PORT, BIT5, PIN13
                          M 
050F   1EA7               M                         btfss   mask, BIT5
0510   2D14               M                         goto    $ + 4
0511   1D05               M                         btfss   PIN13_PORT, PIN13
0512   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
0513   2D17               M                         goto    $ + 4                           ; both high
                          M 
0514   1D05               M                         btfss   PIN13_PORT, PIN13
0515   2D17               M                         goto    $ + 2                           ; both low
0516   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
0517   3E01               M                         addlw   1
                      00116                         TestOutputPin   PIN14_PORT, BIT6, PIN14
                          M 
0518   1F27               M                         btfss   mask, BIT6
0519   2D1D               M                         goto    $ + 4
051A   1E86               M                         btfss   PIN14_PORT, PIN14
051B   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
051C   2D20               M                         goto    $ + 4                           ; both high
                          M 
051D   1E86               M                         btfss   PIN14_PORT, PIN14
051E   2D20               M                         goto    $ + 2                           ; both low
051F   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
0520   3E01               M                         addlw   1
                      00117                         TestOutputPin   PIN15_PORT, BIT7, PIN15
                          M 
0521   1FA7               M                         btfss   mask, BIT7
0522   2D26               M                         goto    $ + 4
0523   1C85               M                         btfss   PIN15_PORT, PIN15
0524   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
0525   2D29               M                         goto    $ + 4                           ; both high
                          M 
0526   1C85               M                         btfss   PIN15_PORT, PIN15
0527   2D29               M                         goto    $ + 2                           ; both low
0528   2D2C               M                         goto    FoundUnexpectedPin      ; they differ
                          M 
0529   3E01               M                         addlw   1
                      00118                 endif
                      00119                 endif
                      00120 
                      00121                         ; No differences
052A   1003           00122                         clrc
052B   2D50           00123                         goto    LookForShortedPinsExit
                      00124 
                      00125 
                      00126 
052C                  00127 FoundUnexpectedPin
                      00128 
                      00129                 ifdef BI_TOGGLE_DEFINED
                      00130 
                      00131                 if ICE  ; -------------------------------------
                      00132                         nop             ; Breakpoint :
                      00133                         nop             ;
                      00134                 endif   ; -------------------------------------
                      00135 
                      00136                          ; If bitoggle slave pin and running in normal mode
                      00137                          ; then remap to master pin.
                      00138 
052C   18A4           00139                         btfsc   Flags, PROGRAM_MODE_ON
052D   2D4F           00140                         goto    BitoggleEnds
                      00141 
                      00142                 if ICE  ; -------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00143                         nop             ; Breakpoint :
                      00144                         nop             ;
                      00145                 endif   ; -------------------------------------
                      00146 
052E   00AF           00147             movwf   TempIndex
                      00148 
052F   300C           00149             movlw   .12
0530   022F           00150             subwf   TempIndex, W
0531   1D03           00151             skpz
0532   2D36           00152             goto    not@12
0533   1C61           00153             btfss   BiToggleRegister, BIT0
0534   2D4E           00154             goto    exit_bitoggle
0535   2D4C           00155             goto    remap_bitoggle
0536                  00156 not@12
                      00157 
0536   300D           00158             movlw   .13
0537   022F           00159             subwf   TempIndex, W
0538   1D03           00160             skpz
0539   2D3D           00161             goto    not@13
053A   1CE1           00162             btfss   BiToggleRegister, BIT1
053B   2D4E           00163             goto    exit_bitoggle
053C   2D4C           00164             goto    remap_bitoggle
053D                  00165 not@13
                      00166 
053D   300E           00167             movlw   .14
053E   022F           00168             subwf   TempIndex, W
053F   1D03           00169             skpz
0540   2D44           00170             goto    not@14
0541   1D61           00171             btfss   BiToggleRegister, BIT2
0542   2D4E           00172             goto    exit_bitoggle
0543   2D4C           00173             goto    remap_bitoggle
0544                  00174 not@14
                      00175 
0544   300F           00176             movlw   .15
0545   022F           00177             subwf   TempIndex, W
0546   1D03           00178             skpz
0547   2D4B           00179             goto    not@15
0548   1DE1           00180             btfss   BiToggleRegister, BIT3
0549   2D4E           00181             goto    exit_bitoggle
054A   2D4C           00182             goto    remap_bitoggle
054B                  00183 not@15
054B   2D4E           00184             goto    exit_bitoggle
                      00185 
054C                  00186 remap_bitoggle
054C   3004           00187             movlw   .4
054D   02AF           00188             subwf   TempIndex, F
                      00189 
054E                  00190 exit_bitoggle
054E   082F           00191             movf    TempIndex, W
                      00192 
054F                  00193 BitoggleEnds
                      00194 
                      00195                 endif ; BI_TOGGLE_DEFINED
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00196 
054F   1403           00197                         setc
                      00198 
0550                  00199 LookForShortedPinsExit
                      00200 
                      00201                 if ICE  ; -------------------------------------
                      00202                         nop             ; Breakpoint :
                      00203                         nop             ;
                      00204                 endif   ; -------------------------------------
0550   0008           00205                         return
                      00206 
                      00207 
                      00208 
                      00209                 ; SetBitInOutputMask
                      00210                 ; ---------------------------------------------------
                      00211                 ; Input  : W = Bit number to set (0-15)
                      00212                 ; Output : "OutputsMaskxxx" (a word) has the corresponding bit set.
                      00213                 ;
0551                  00214 SetBitInOutputMask
                      00215 
0551   2578           00216                         call    CheckIfPinIsInputOnly
0552   1803           00217                         skpnc
0553   0008           00218                         return
                      00219 
0554   259B           00220                         call    BitToMask
                      00221 
0555   0833           00222                         movf    ShiftTempQuad+0, W
0556   04A6           00223                         iorwf   OutputsMask32+0, F
                      00224 
0557   0834           00225                         movf    ShiftTempQuad+1, W
0558   04A7           00226                         iorwf   OutputsMask32+1, F
                      00227 
0559   0835           00228                         movf    ShiftTempQuad+2, W
055A   04A8           00229                         iorwf   OutputsMask32+2, F
                      00230 
055B   0836           00231                         movf    ShiftTempQuad+3, W
055C   04A9           00232                         iorwf   OutputsMask32+3, F
                      00233 
055D   0008           00234                         return
                      00235 
                      00236 
                      00237 
                      00238                 ; ClearBitInOutputMask
                      00239                 ; ---------------------------------------------------
                      00240                 ; Clears the specified bit in outputs mask
                      00241                 ; Input  : W = Bit number to clear (0-15)
                      00242                 ; Output : "OutputsMaskxxx" (a word) has the corresponding bit cleared
                      00243                 ;
055E                  00244 ClearBitInOutputMask
                      00245 
055E   2578           00246                         call    CheckIfPinIsInputOnly
055F   1803           00247                         skpnc
0560   0008           00248                         return
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00249 
0561   259B           00250                         call    BitToMask
                      00251 
0562   0933           00252                         comf    ShiftTempQuad+0, W
0563   05A6           00253                         andwf   OutputsMask32+0, F
                      00254 
0564   0934           00255                         comf    ShiftTempQuad+1, W
0565   05A7           00256                         andwf   OutputsMask32+1, F
                      00257 
0566   0935           00258                         comf    ShiftTempQuad+2, W
0567   05A8           00259                         andwf   OutputsMask32+2, F
                      00260 
0568   0936           00261                         comf    ShiftTempQuad+3, W
0569   05A9           00262                         andwf   OutputsMask32+3, F
                      00263 
056A   0008           00264                         return
                      00265 
                      00266 
                      00267 
                      00268 
                      00269                 ; ReverseBitInOutputMask
                      00270                 ; ---------------------------------------------------
                      00271                 ; Input  : W = Bit number to reverse (0-15)
                      00272                 ; Output : "OutputsMaskxxx" (a word) has the corresponding bit cleared
                      00273                 ;
056B                  00274 ReverseBitInOutputMask
                      00275 
056B   2578           00276                         call    CheckIfPinIsInputOnly
056C   1803           00277                         skpnc
056D   0008           00278                         return
                      00279 
                      00280 
056E   259B           00281                         call    BitToMask
                      00282 
056F   0833           00283                         movf    ShiftTempQuad+0, W
0570   06A6           00284                         xorwf   OutputsMask32+0, F
                      00285 
0571   0834           00286                         movf    ShiftTempQuad+1, W
0572   06A7           00287                         xorwf   OutputsMask32+1, F
                      00288 
0573   0835           00289                         movf    ShiftTempQuad+2, W
0574   06A8           00290                         xorwf   OutputsMask32+2, F
                      00291 
0575   0836           00292                         movf    ShiftTempQuad+3, W
0576   06A9           00293                         xorwf   OutputsMask32+3, F
                      00294 
0577   0008           00295                         return
                      00296 
                      00297 
                      00298 
                      00299                 ; -------------------------------------------------------------------
                      00300                 ; CheckIfPinIsInputOnly
                      00301                 ; -------------------------------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00302                 ; Checks if the specified pin is a BiToggle slave input.
                      00303                 ;
                      00304                 ; Input  : Pin in W
                      00305                 ; Output : C=1 pin is a bitoggle slave
                      00306                 ;          C=0 pin is not a bitoggle slave
                      00307                 ;                  Pin in W (NOTE!)
                      00308                 ; Modify : TempIndex
                      00309                 ;
                      00310 
0578                  00311 CheckIfPinIsInputOnly
                      00312 
0578   00DC           00313                         movwf   TempStack               ; Push W
                      00314 
                      00315                 ifdef CONF_RADIO_NEXT
                      00316             movlw   .0
                      00317             subwf   TempStack, W
                      00318             skpz
                      00319             goto    _not@0
                      00320                         btfss   RadioModeNextPin, BIT7
                      00321             goto    pin_is_output
                      00322             goto    pin_is_input
                      00323 _not@0
                      00324                 endif
                      00325 
                      00326                 ifdef CONF_RADIO_PREV
                      00327             movlw   .1
                      00328             subwf   TempStack, W
                      00329             skpz
                      00330             goto    _not@1
                      00331                         btfss   RadioModePrevPin, BIT7
                      00332             goto    pin_is_output
                      00333             goto    pin_is_input
                      00334 _not@1
                      00335                 endif
                      00336 
0579   300C           00337             movlw   .12
057A   025C           00338             subwf   TempStack, W
057B   1D03           00339             skpz
057C   2D80           00340             goto    _not@12
057D   1C61           00341             btfss   BiToggleRegister, BIT0
057E   2D98           00342             goto    pin_is_output
057F   2D96           00343             goto    pin_is_input
0580                  00344 _not@12
                      00345 
0580   300D           00346             movlw   .13
0581   025C           00347             subwf   TempStack, W
0582   1D03           00348             skpz
0583   2D87           00349             goto    _not@13
0584   1CE1           00350             btfss   BiToggleRegister, BIT1
0585   2D98           00351             goto    pin_is_output
0586   2D96           00352             goto    pin_is_input
0587                  00353 _not@13
                      00354 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0587   300E           00355             movlw   .14
0588   025C           00356             subwf   TempStack, W
0589   1D03           00357             skpz
058A   2D8E           00358             goto    _not@14
058B   1D61           00359             btfss   BiToggleRegister, BIT2
058C   2D98           00360             goto    pin_is_output
058D   2D96           00361             goto    pin_is_input
058E                  00362 _not@14
                      00363 
058E   300F           00364             movlw   .15
058F   025C           00365             subwf   TempStack, W
0590   1D03           00366             skpz
0591   2D95           00367             goto    _not@15
0592   1DE1           00368             btfss   BiToggleRegister, BIT3
0593   2D98           00369             goto    pin_is_output
0594   2D96           00370             goto    pin_is_input
0595                  00371 _not@15
                      00372 
0595   2D98           00373             goto    pin_is_output
                      00374 
0596                  00375 pin_is_input
0596   1403           00376                         setc
0597   2D99           00377                         goto    CheckIfPinExit
                      00378 
0598                  00379 pin_is_output
0598   1003           00380                         clrc
                      00381 
0599                  00382 CheckIfPinExit
                      00383 
0599   085C           00384                         movf    TempStack, W
059A   0008           00385                         return
                      00386 
                      00387                         ; CheckIfPinIsInputOnly
                      00388 
                      00389 
                      00390 
                      00391                 ; BitToMask
                      00392                 ; ---------------------------------------------------
                      00393                 ; Set bit at pos given by W. If W > 15 then all zeroes are
                      00394                 ; output.
                      00395                 ; Input  : W = Bit number to set.
                      00396                 ; Output : ShiftTemp (16bit) has requested bit set to high
                      00397 
059B                  00398 BitToMask
                      00399 
059B   3E01           00400                         addlw   1
                      00401                          ;
059C   01B3           00402                         clrf    ShiftTempQuad+0
059D   01B4           00403                         clrf    ShiftTempQuad+1
059E   01B5           00404                         clrf    ShiftTempQuad+2
059F   01B6           00405                         clrf    ShiftTempQuad+3
                      00406 
                      00407 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05A0   1403           00408                         setc
                      00409                          ;
05A1   0DB3           00410 shift_again     rlf             ShiftTempQuad+0, F
05A2   0DB4           00411                         rlf             ShiftTempQuad+1, F
05A3   0DB5           00412                         rlf             ShiftTempQuad+2, F
05A4   0DB6           00413                         rlf             ShiftTempQuad+3, F
                      00414                          ;
05A5   3EFF           00415                         addlw   0xFF            ; Subtract one from W....
05A6   1003           00416                         clrc
05A7   1D03           00417                         skpz
05A8   2DA1           00418                         goto    shift_again
                      00419 
                      00420                 if ICE  ; -------------------------------------
                      00421                         nop             ; Breakpoint :
                      00422                 endif   ; -------------------------------------
                      00423 
05A9   0008           00424                         return
                      00425 
                      00426 
                      00427 
                      00428 
                      00429 
                      00430                 ; -------------------------------------------------------------------
                      00431                 ; SetTablePointer
                      00432                 ; -------------------------------------------------------------
                      00433                 ;
                      00434                 ; Input  : Cell index in W
                      00435                 ; Output : Relative offset of first cell byte in table
                      00436                 ;
                      00437 
05AA                  00438 SetTablePointer
05AA   00B9           00439                         movwf   TablePointer
05AB   1003           00440                         clrc
05AC   0DB9           00441                         rlf             TablePointer, F
05AD   0DB9           00442                         rlf             TablePointer, F
                      00443 
                      00444                 if FLASH_TABLE == 0
                      00445                         movlw   AssignmentsTable
                      00446                         addwf   TablePointer, F
                      00447                 endif
                      00448 
05AE   0008           00449                         return
                      00450 
                      00451 
                      00452 
                      00453 
                      00454 
                      00455 
                      00456                 ; -------------------------------------------------------------------
                      00457                 ; PokeTableCell
                      00458                 ; -------------------------------------------------------------
                      00459                 ;
                      00460                 ; Input  :
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00461                 ; Output :
                      00462                 ;
                      00463 
05AF                  00464 PokeTableCell
                      00465 
                      00466         if FLASH_TABLE
                      00467 
05AF   0839           00468                         movf    TablePointer, W
                      00469 
                      00470                         ; ToDo : looped code to save space....
                      00471 
                      00472                         di
  0000                    M                         local   __di_fail__
05B0   138B               M __di_fail__     bcf     INTCON, GIE
05B1   1B8B               M                         btfsc   INTCON, GIE
05B2   2DB0               M                         goto    __di_fail__
                      00473                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05B3   158A               M                         bsf     PCLATH, BIT3
05B4   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05B5   2100           00474                         call    FlashSetAdrZeroPage & __PAGE__
                      00475                         SetPage0Auto
                          M                 if __page != 0
05B6   118A               M                     bcf PCLATH, BIT3
05B7   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00476 
05B8   083A           00477                         movf    Write_Low, W
                      00478 
                      00479                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05B9   158A               M                         bsf     PCLATH, BIT3
05BA   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05BB   212D           00480                         call    FlashWriteByteW & __PAGE__
05BC   2109           00481                         call    FlashAddressNext & __PAGE__
                      00482                         SetPage0Auto
                          M                 if __page != 0
05BD   118A               M                     bcf PCLATH, BIT3
05BE   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000000                M __page          set     0
                      00483 
05BF   083B           00484                         movf    Write_High, W
                      00485 
                      00486                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05C0   158A               M                         bsf     PCLATH, BIT3
05C1   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05C2   212D           00487                         call    FlashWriteByteW & __PAGE__
05C3   2109           00488                         call    FlashAddressNext & __PAGE__
                      00489                         SetPage0Auto
                          M                 if __page != 0
05C4   118A               M                     bcf PCLATH, BIT3
05C5   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00490 
05C6   083C           00491                         movf    Write_Conf_Mode, W
                      00492 
                      00493                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05C7   158A               M                         bsf     PCLATH, BIT3
05C8   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05C9   212D           00494                         call    FlashWriteByteW & __PAGE__
05CA   2109           00495                         call    FlashAddressNext & __PAGE__
                      00496                         SetPage0Auto
                          M                 if __page != 0
05CB   118A               M                     bcf PCLATH, BIT3
05CC   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00497 
05CD   083E           00498                         movf    Write_Conf_Pin, W
                      00499 
                      00500                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05CE   158A               M                         bsf     PCLATH, BIT3
05CF   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05D0   212D           00501                         call    FlashWriteByteW & __PAGE__
                      00502                         SetPage0Auto
                          M                 if __page != 0
05D1   118A               M                     bcf PCLATH, BIT3
05D2   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00503                         ei
05D3   178B               M                         bsf     INTCON, GIE
                      00504 
                      00505                 if ICE  ; -------------------------------------
                      00506                         nop             ; Breakpoint :
                      00507                         nop             ;
                      00508                 endif   ; -------------------------------------
                      00509 
05D4   0008           00510                         return
                      00511 
                      00512 
                      00513                 else
                      00514 
                      00515                         zsdsadad
                      00516 
                      00517                         movf    TablePointer, W
                      00518                         call    SetEepAdr
                      00519                         SetBank0
                      00520                         movf    Write_Low, W
                      00521                         call    EepWriteW
                      00522                         SetBank0
                      00523 
                      00524                         movf    TablePointer, W
                      00525                         addlw   1
                      00526                         call    SetEepAdr
                      00527                         SetBank0
                      00528                         movf    Write_High, W
                      00529                         call    EepWriteW
                      00530                         SetBank0
                      00531 
                      00532                         movf    TablePointer, W
                      00533                         addlw   2
                      00534                         call    SetEepAdr
                      00535                         SetBank0
                      00536                         movf    Write_Conf, W
                      00537                         call    EepWriteW
                      00538                         SetBank0
                      00539 
                      00540                 if ICE  ; -------------------------------------
                      00541                         nop             ; Breakpoint :
                      00542                         nop             ;
                      00543                 endif   ; -------------------------------------
                      00544 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00545                         return
                      00546                 endif
                      00547 
                      00548 
                      00549 
                      00550                 ; -------------------------------------------------------------------
                      00551                 ; PeekTableCell
                      00552                 ; PeekTableCellPin
                      00553                 ; PeekTableCellIRLow
                      00554                 ; -------------------------------------------------------------
                      00555                 ;
                      00556                 ; Input  : 'TablePointer'
                      00557                 ; Output : Read_XXX byte(s) are set
                      00558                 ;
                      00559 
05D5                  00560 PeekTableCellPin
                      00561 
05D5   0839           00562                         movf    TablePointer, W
05D6   3E03           00563                         addlw   3
                      00564                         di
  0000                    M                         local   __di_fail__
05D7   138B               M __di_fail__     bcf     INTCON, GIE
05D8   1B8B               M                         btfsc   INTCON, GIE
05D9   2DD7               M                         goto    __di_fail__
                      00565                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05DA   158A               M                         bsf     PCLATH, BIT3
05DB   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05DC   2100           00566                         call    FlashSetAdrZeroPage & __PAGE__
05DD   2114           00567                         call    FlashRead & __PAGE__
                      00568                         SetPage0Auto
                          M                 if __page != 0
05DE   118A               M                     bcf PCLATH, BIT3
05DF   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00569                         ei
05E0   178B               M                         bsf     INTCON, GIE
                      00570 
05E1   00BF           00571                         movwf   Read_Conf_Pin
                      00572 
                      00573                 if ICE  ; -------------------------------------
                      00574                         nop             ; Breakpoint :
                      00575                         nop             ;
                      00576                 endif   ; -------------------------------------
                      00577 
05E2   0008           00578                         return
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00579 
                      00580 
05E3                  00581 PeekTableCellIRLow
                      00582 
                      00583 
05E3   0839           00584                         movf    TablePointer, W
                      00585 
                      00586                         di
  0000                    M                         local   __di_fail__
05E4   138B               M __di_fail__     bcf     INTCON, GIE
05E5   1B8B               M                         btfsc   INTCON, GIE
05E6   2DE4               M                         goto    __di_fail__
                      00587                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05E7   158A               M                         bsf     PCLATH, BIT3
05E8   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05E9   2100           00588                         call    FlashSetAdrZeroPage & __PAGE__
05EA   2114           00589                         call    FlashRead & __PAGE__
                      00590                         SetPage0Auto
                          M                 if __page != 0
05EB   118A               M                     bcf PCLATH, BIT3
05EC   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00591                         ei
05ED   178B               M                         bsf     INTCON, GIE
                      00592 
05EE   00AD           00593                         movwf   Read_Low
                      00594 
05EF   0008           00595                         return
                      00596 
                      00597 
05F0                  00598 PeekTableCell
                      00599 
                      00600         if FLASH_TABLE
                      00601 
05F0   0839           00602                         movf    TablePointer, W
                      00603 
                      00604                         di
  0000                    M                         local   __di_fail__
05F1   138B               M __di_fail__     bcf     INTCON, GIE
05F2   1B8B               M                         btfsc   INTCON, GIE
05F3   2DF1               M                         goto    __di_fail__
                      00605                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05F4   158A               M                         bsf     PCLATH, BIT3
05F5   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
05F6   2100           00606                         call    FlashSetAdrZeroPage & __PAGE__
05F7   2114           00607                         call    FlashRead & __PAGE__
                      00608                         SetPage0Auto
                          M                 if __page != 0
05F8   118A               M                     bcf PCLATH, BIT3
05F9   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00609                         ei
05FA   178B               M                         bsf     INTCON, GIE
                      00610 
05FB   00AD           00611                         movwf   Read_Low
                      00612 
                      00613                         di
  0000                    M                         local   __di_fail__
05FC   138B               M __di_fail__     bcf     INTCON, GIE
05FD   1B8B               M                         btfsc   INTCON, GIE
05FE   2DFC               M                         goto    __di_fail__
                      00614                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
05FF   158A               M                         bsf     PCLATH, BIT3
0600   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
0601   2109           00615                         call    FlashAddressNext & __PAGE__
0602   2114           00616                         call    FlashRead & __PAGE__
                      00617                         SetPage0Auto
                          M                 if __page != 0
0603   118A               M                     bcf PCLATH, BIT3
0604   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00618 
0605   00AE           00619                         movwf   Read_High
                      00620 
                      00621                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
0606   158A               M                         bsf     PCLATH, BIT3
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0607   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
0608   2109           00622                         call    FlashAddressNext & __PAGE__
0609   2114           00623                         call    FlashRead & __PAGE__
                      00624                         SetPage0Auto
                          M                 if __page != 0
060A   118A               M                     bcf PCLATH, BIT3
060B   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00625                         ei
060C   178B               M                         bsf     INTCON, GIE
                      00626 
060D   00BD           00627                         movwf   Read_Conf_Mode
                      00628 
                      00629                         di
  0000                    M                         local   __di_fail__
060E   138B               M __di_fail__     bcf     INTCON, GIE
060F   1B8B               M                         btfsc   INTCON, GIE
0610   2E0E               M                         goto    __di_fail__
                      00630                         SetPgeF FLASH_CODE_PAGE
  00000001                M __page          set     FLASH_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
0611   158A               M                         bsf     PCLATH, BIT3
0612   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
0613   2109           00631                         call    FlashAddressNext & __PAGE__
0614   2114           00632                         call    FlashRead & __PAGE__
                      00633                         SetPage0Auto
                          M                 if __page != 0
0615   118A               M                     bcf PCLATH, BIT3
0616   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
  00000000                M __page          set     0
                      00634                         ei
0617   178B               M                         bsf     INTCON, GIE
                      00635 
0618   00BF           00636                         movwf   Read_Conf_Pin
                      00637 
                      00638                 if ICE  ; -------------------------------------
                      00639                         nop             ; Breakpoint :
                      00640                         nop             ;
                      00641                 endif   ; -------------------------------------
                      00642 
0619   0008           00643                         return
                      00644         else
                      00645 
                      00646                         movf    TablePointer, W
                      00647                         call    EepReadW
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00648                         SetBank0
                      00649                         movwf   Read_Low
                      00650 
                      00651                         movf    TablePointer, W
                      00652                         addlw   1
                      00653                         call    EepReadW
                      00654                         SetBank0
                      00655                         movwf   Read_High
                      00656 
                      00657                         movf    TablePointer, W
                      00658                         addlw   2
                      00659                         call    EepReadW
                      00660                         SetBank0
                      00661                         movwf   Read_Conf
                      00662 
                      00663                 if ICE  ; -------------------------------------
                      00664                         nop             ; Breakpoint :
                      00665                         nop             ;
                      00666                 endif   ; -------------------------------------
                      00667 
                      00668                         return
                      00669 
                      00670                 endif
                      00671 
                      00672 
                      00673 
                      00674 
                      00675                 ; -------------------------------------------------------------------
                      00676                 ; AddPinDataToTable
                      00677                 ; -------------------------------------------------------------
                      00678                 ;
                      00679                 ; Input  : Data in "Write_xxx" including pin number
                      00680                 ; Output : C=1 succes, C=0 no room
                      00681                 ;
061A                  00682 AddPinDataToTable
061A   3020           00683                         movlw   TABLE_NOF_CELLS
061B   00A5           00684                         movwf   Counter
                      00685                          ;
061C   01AF           00686                         clrf    TempIndex
                      00687 
                      00688 
061D                  00689 etst_next_word
061D   082F           00690                         movf    TempIndex, W
061E   25AA           00691                         call    SetTablePointer
061F   25F0           00692                         call    PeekTableCell
                      00693 
0620   267C           00694                         call    TestIfCellValid
                      00695 
                      00696                 if ICE  ; -------------------------------------
                      00697                         nop             ; Breakpoint :
                      00698                         nop             ;
                      00699                 endif   ; -------------------------------------
                      00700 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0621   1803           00701                         skpnc
0622   2E26           00702                         goto    not_null_cell
                      00703 
                      00704                          ; Found a clear spot
                      00705 
0623   25AF           00706                         call    PokeTableCell
                      00707 
                      00708                          ; Succes return
0624   1403           00709                         setc
0625   0008           00710                         return
                      00711 
0626                  00712 not_null_cell
                      00713 
0626   0AAF           00714                         incf    TempIndex, F
                      00715 
0627   0BA5           00716                         decfsz  Counter, F
0628   2E1D           00717                         goto    etst_next_word
                      00718 
                      00719                          ; Error return, table full
0629   1003           00720                         clrc
062A   0008           00721                         return
                      00722 
                      00723 
                      00724 
                      00725 
                      00726                 ; -------------------------------------------------------------------
                      00727                 ; FindCodeAndConfAndPinInTable
                      00728                 ; -------------------------------------------------------------
                      00729                 ;
                      00730                 ; Input  : Data to find in "Write_Low/_High/_Conf/_Pin"
                      00731                 ; Output : C=1 found, C=0 not found
                      00732                 ;
                      00733 
062B                  00734 FindCodeAndConfAndPinInTable
                      00735 
062B   3020           00736                         movlw   TABLE_NOF_CELLS
062C   00A5           00737                         movwf   Counter
                      00738                          ;
062D   01AF           00739                         clrf    TempIndex
                      00740 
                      00741 
062E                  00742 etst_next_wod
062E   082F           00743                         movf    TempIndex, W
062F   25AA           00744                         call    SetTablePointer
0630   25F0           00745                         call    PeekTableCell
                      00746 
0631   082D           00747                         movf    Read_Low, W
0632   023A           00748                         subwf   Write_Low, W
0633   1D03           00749                         skpz
0634   2E43           00750                         goto    fcc_not_this
                      00751 
0635   082E           00752                         movf    Read_High, W
0636   023B           00753                         subwf   Write_High, W
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0637   1D03           00754                         skpz
0638   2E43           00755                         goto    fcc_not_this
                      00756 
0639   083D           00757                         movf    Read_Conf_Mode, W
063A   023C           00758                         subwf   Write_Conf_Mode, W
063B   1D03           00759                         skpz
063C   2E43           00760                         goto    fcc_not_this
                      00761 
063D   083F           00762                         movf    Read_Conf_Pin, W
063E   023E           00763                         subwf   Write_Conf_Pin, W
063F   1D03           00764                         skpz
0640   2E43           00765                         goto    fcc_not_this
                      00766 
                      00767                          ; Found the code, return with carry set
                      00768                          ;
0641   1403           00769                         setc
0642   0008           00770                         return
                      00771 
                      00772 
0643                  00773 fcc_not_this
0643   0AAF           00774                         incf    TempIndex, F
                      00775 
0644   0BA5           00776                         decfsz  Counter, F
0645   2E2E           00777                         goto    etst_next_wod
                      00778 
                      00779                          ; Not found, return with carry clear
                      00780                          ;
0646   1003           00781                         clrc
0647   0008           00782                         return
                      00783 
                      00784 
                      00785                 ; -------------------------------------------------------------------
                      00786                 ; FindModePinInTable
                      00787                 ; -------------------------------------------------------------------
                      00788                 ; Returns the first pin used for the assignment with specified mode.
                      00789                 ; Made for finding RadioNext/Prev pins.
                      00790                 ; Input   : The mode to find in W
                      00791                 ; Output  : Pin in W (0..31) and C=1 if found, C=0 if not found
                      00792                 ; Destroy : Write_Conf_Mode
                      00793                 ;
0648                  00794 FindModePinInTable
                      00795 
0648   00BC           00796                         movwf   Write_Conf_Mode
                      00797 
0649   3020           00798                         movlw   TABLE_NOF_CELLS
064A   00A5           00799                         movwf   Counter
064B   01AF           00800                         clrf    TempIndex
                      00801 
064C                  00802 fmpt_next
064C   082F           00803                         movf    TempIndex, W
064D   25AA           00804                         call    SetTablePointer
064E   25F0           00805                         call    PeekTableCell
                      00806 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

064F   26D9           00807                         call    ReadModeConf
0650   023C           00808                         subwf   Write_Conf_Mode, W
0651   1D03           00809                         skpz
0652   2E56           00810                         goto    fmpt_not_this
                      00811 
                      00812                          ; Found the code, return with carry set
                      00813                          ;
0653   083F           00814                         movf    Read_Conf_Pin, W
0654   1403           00815                         setc
0655   2E5A           00816                         goto    fmpt_exit
                      00817 
                      00818 
0656                  00819 fmpt_not_this
0656   0AAF           00820                         incf    TempIndex, F
                      00821 
0657   0BA5           00822                         decfsz  Counter, F
0658   2E4C           00823                         goto    fmpt_next
                      00824 
                      00825                          ; Not found, return with carry clear
                      00826                          ;
0659   1003           00827                         clrc
065A                  00828 fmpt_exit
                      00829                 if ICE  ; -------------------------------------
                      00830                         nop             ; Breakpoint :
                      00831                         nop             ;
                      00832                 endif   ; -------------------------------------
065A   0008           00833                         return
                      00834 
                      00835 
                      00836 
                      00837 
                      00838                 ; -------------------------------------------------------------------
                      00839                 ; ResetTable
                      00840                 ; -------------------------------------------------------------
                      00841                 ; Resets the assignments table (in program flash memory)
                      00842                 ;
                      00843                 ; Input  :
                      00844                 ; Output :
                      00845                 ;
                      00846 
065B   3020           00847 ResetTable      movlw   TABLE_NOF_CELLS
065C   00A5           00848                         movwf   Counter
                      00849 
065D   01AF           00850                         clrf    TempIndex
                      00851 
065E   2666           00852                         call    DefineWriteNullCell
                      00853 
065F                  00854 etst_next_wor
065F   082F           00855                         movf    TempIndex, W
0660   25AA           00856                         call    SetTablePointer
                      00857 
                      00858                 if ICE  ; -------------------------------------
                      00859                         nop             ; Breakpoint :
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00860                         nop             ;
                      00861                 endif   ; -------------------------------------
                      00862 
0661   25AF           00863                         call    PokeTableCell
                      00864 
0662   0AAF           00865                         incf    TempIndex, F
                      00866 
0663   0BA5           00867                         decfsz  Counter, F
0664   2E5F           00868                         goto    etst_next_wor
                      00869 
0665   0008           00870                         return
                      00871 
                      00872 
                      00873 
                      00874                 ; -------------------------------------------------------------------
                      00875                 ; DefineWriteNullCell
                      00876                 ; -------------------------------------------------------------
                      00877                 ;
                      00878                 ; Input  :
                      00879                 ; Output :
                      00880                 ;
                      00881 
0666                  00882 DefineWriteNullCell
                      00883 
0666   30FF           00884                         movlw   0xFF                    ; ToDo -> make subrutine
0667   00BA           00885                         movwf   Write_Low
0668   00BB           00886                         movwf   Write_High
0669   01BC           00887                         clrf    Write_Conf_Mode
066A   01BE           00888                         clrf    Write_Conf_Pin
066B   0008           00889                         return
                      00890 
                      00891 
                      00892 
                      00893                 ; -------------------------------------------------------------------
                      00894                 ; ClearPinFromTable
                      00895                 ; ------------------------------------------------------------
                      00896                 ; Removes all instances of this pin in table by writing a NULL entry
                      00897                 ;
                      00898                 ; Input  : W = pin number (0-31)
                      00899                 ; Output :
                      00900                 ;
                      00901 
                      00902 
066C                  00903 ClearPinFromTable
                      00904 
066C   00B0           00905                         movwf   Pin
                      00906 
066D   3020           00907                         movlw   TABLE_NOF_CELLS
066E   00A5           00908                         movwf   Counter
                      00909 
066F   2666           00910                         call    DefineWriteNullCell
                      00911 
0670                  00912 rclr_next_word
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00913                          ; From highest down to lowest index in table
0670   0325           00914                         decf    Counter, W
0671   25AA           00915                         call    SetTablePointer
0672   25F0           00916                         call    PeekTableCell
                      00917 
0673   301F           00918                         movlw   0x1F
0674   053F           00919                         andwf   Read_Conf_Pin, W
0675   0630           00920                         xorwf   Pin, W
                      00921 
0676   1D03           00922                         skpz
0677   2E79           00923                         goto    not_thisr
                      00924 
                      00925                          ; Found pin - erase
                      00926 
0678   25AF           00927                         call    PokeTableCell
                      00928 
                      00929 
0679                  00930 not_thisr
0679   0BA5           00931                         decfsz  Counter, F
067A   2E70           00932                         goto    rclr_next_word
067B   0008           00933                         return
                      00934                         ; ClearPinFromTable
                      00935 
                      00936 
                      00937 
                      00938 
                      00939 
                      00940                 ; -------------------------------------------------------------
                      00941                 ; TestIfCellValid
                      00942                 ; -------------------------------------------------------------
                      00943                 ; Legal to call after a table read. The test will fail on a 0xFFFF remote....
                      00944                 ; See DefineWriteNullCell()
                      00945                 ; Input  :
                      00946                 ; Output : C=1 valid, C=0 not valid cell i.e. empty
                      00947                 ;
                      00948 
067C                  00949 TestIfCellValid
                      00950 
067C   082D           00951                         movf    Read_Low, W
067D   3CFF           00952                         sublw   0xFF
067E   1D03           00953                         skpz
067F   2E86           00954                         goto    has_data
                      00955 
0680   082E           00956                         movf    Read_High, W
0681   3CFF           00957                         sublw   0xFF
0682   1D03           00958                         skpz
0683   2E86           00959                         goto    has_data
                      00960 
0684   1003           00961                         clrc
0685   0008           00962                         return
0686                  00963 has_data
0686   1403           00964                         setc
0687   0008           00965                         return
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00966 
                      00967 
                      00968 
                      00969 
                      00970 
                      00971 
                      00972 
                      00973                 ; -------------------------------------------------------------------
                      00974                 ; ClearRadioChannels
                      00975                 ; -------------------------------------------------------------
                      00976                 ; Clears all radio pins except for the current active given by
                      00977                 ; "RadioPinActivated"
                      00978                 ;
                      00979                 ; Input  : "RadioPinActivated"
                      00980                 ; Output :
                      00981                 ;
                      00982 
0688                  00983 ClearRadioChannels
                      00984 
                      00985                 ifdef CONF_RADIO_MODE
                      00986 
                      00987                          ; Loop initialization
                      00988                          ;
0688   3020           00989                         movlw   TABLE_NOF_CELLS
0689   00A5           00990                         movwf   Counter
068A   01AF           00991                         clrf    TempIndex
                      00992 
068B                  00993 next_radio
                      00994                          ; Read table[TempIndex]
068B   082F           00995                         movf    TempIndex, W
068C   25AA           00996                         call    SetTablePointer
068D   25F0           00997                         call    PeekTableCell   ; Sets "Read_xxx"
                      00998 
                      00999                          ; Is it valid ?
                      01000 
068E   267C           01001                         call    TestIfCellValid
068F   1C03           01002                         skpc
0690   2E9F           01003                         goto    crc_next        ; No, its a null entry
                      01004 
                      01005                          ; Is this one a radio mode thing ?
                      01006                          ;
0691   083D           01007                         movf    Read_Conf_Mode, W
0692   26DA           01008                         call    ModeConf2Int
                      01009 
0693   3C02           01010                         sublw   CONF_RADIO_MODE
0694   1D03           01011                         skpz
0695   2E9F           01012                         goto    crc_next        ; No, not radio assignment
                      01013 
                      01014                          ; Is it another than the newly selected ?
                      01015                          ;
0696   083F           01016                         movf    Read_Conf_Pin, W
0697   0237           01017                         subwf   RadioPinActivated, W
0698   1903           01018                         skpnz
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0699   2E9D           01019                         goto    crc_active      ; Its the active pin
                      01020 
                      01021                          ; This is another radio button
                      01022                          ;
069A   083F           01023                         movf    Read_Conf_Pin, W
069B   255E           01024                         call    ClearBitInOutputMask
069C   2E9F           01025                         goto    crc_next
                      01026 
069D                  01027 crc_active
069D   083F           01028                         movf    Read_Conf_Pin, W
069E   2551           01029                         call    SetBitInOutputMask
                      01030 
069F                  01031 crc_next
069F   0AAF           01032                         incf    TempIndex, F
                      01033                          ;
06A0   0BA5           01034                         decfsz  Counter, F
06A1   2E8B           01035                         goto    next_radio
                      01036 
                      01037                 endif ; CONF_RADIO_MODE
                      01038 
06A2   0008           01039                         return
                      01040 
                      01041 
                      01042 
                      01043                 ; -------------------------------------------------------------
                      01044                 ; NextRadioPin
                      01045                 ; -------------------------------------------------------------
                      01046                 ; Starts with "RadioPinActivated" and finds next radio pin
                      01047                 ;
                      01048                 ; Input  : "RadioPinActivated"
                      01049                 ; Output : "RadioPinActivated"
                      01050                 ;
06A3                  01051 NextRadioPin
                      01052 
                      01053                 ifdef CONF_RADIO_MODE
                      01054 
                      01055                          ; Loop initialization
                      01056                          ;
06A3   3020           01057                         movlw   TABLE_NOF_CELLS
06A4   00C1           01058                         movwf   MasterCounter
                      01059 
06A5                  01060 _next_radio_p
06A5   0AB7           01061                         incf    RadioPinActivated, F
06A6   300F           01062                         movlw   0x0F
06A7   05B7           01063                         andwf   RadioPinActivated, F
06A8   0837           01064                         movf    RadioPinActivated, W
                      01065 
06A9   2752           01066                         call    CheckForRadioAssignment
                      01067 
06AA   1803           01068                         skpnc
06AB   2EAE           01069                         goto    _n_exit
                      01070 
06AC   0BC1           01071                         decfsz  MasterCounter, F
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06AD   2EA5           01072                         goto    _next_radio_p
                      01073 
                      01074         endif ; CONF_RADIO_MODE
                      01075 
06AE                  01076 _n_exit
06AE   0008           01077                         return
                      01078 
                      01079 
                      01080                 ; -------------------------------------------------------------------
                      01081                 ; PrevRadioPin
                      01082                 ; -------------------------------------------------------------
                      01083                 ; Starts with "RadioPinActivated" and finds prev radio
                      01084                 ;
                      01085                 ; Input  : "RadioPinActivated"
                      01086                 ; Output : "RadioPinActivated"
                      01087                 ;
06AF                  01088 PrevRadioPin
                      01089 
                      01090                 ifdef CONF_RADIO_MODE
                      01091 
                      01092                          ; Loop initialization
                      01093                          ;
06AF   3020           01094                         movlw   TABLE_NOF_CELLS
06B0   00C1           01095                         movwf   MasterCounter
                      01096 
06B1                  01097 _prev_radio_p
06B1   03B7           01098                         decf    RadioPinActivated, F
06B2   300F           01099                         movlw   0x0F
06B3   05B7           01100                         andwf   RadioPinActivated, F
06B4   0837           01101                         movf    RadioPinActivated, W
                      01102 
06B5   2752           01103                         call    CheckForRadioAssignment
                      01104 
06B6   1803           01105                         skpnc
06B7   2EBA           01106                         goto    _p_exit
                      01107 
06B8   0BC1           01108                         decfsz  MasterCounter, F
06B9   2EB1           01109                         goto    _prev_radio_p
                      01110 
                      01111         endif ; CONF_RADIO_MODE
                      01112 
06BA                  01113 _p_exit
                      01114                 if ICE  ; -------------------------------------
                      01115                         nop             ; Breakpoint :
                      01116                         nop             ;
                      01117                 endif   ; -------------------------------------
                      01118 
06BA   0008           01119                         return
                      01120 
                      01121 
                      01122 
                      01123 
                      01124                 ; -------------------------------------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01125                 ; GetFirstPinNumberFromIRCode
                      01126                 ; GetNextPinNumberFromIRCode
                      01127                 ; -------------------------------------------------------------
                      01128                 ;
                      01129                 ; Input  : IR code in 'NewRC5***' word (See "PackTableData")
                      01130                 ;                        Upper nibble (the pin number) is ignored.
                      01131                 ; Output : Succes, C = 1 and W = configuration byte (incl output pin no)
                      01132                 ;                        Fail, C = 0
                      01133                 ;
06BB                  01134 GetFirstPinNumberFromIRCode
                      01135 
06BB   3020           01136                         movlw   TABLE_NOF_CELLS
06BC   00A5           01137                         movwf   Counter
06BD   01AF           01138                         clrf    TempIndex
                      01139 
                      01140 
06BE                  01141 CheckNextWord
06BE   082F           01142                         movf    TempIndex, W
06BF   25AA           01143                         call    SetTablePointer
06C0   25E3           01144                         call    PeekTableCellIRLow
                      01145 
                      01146                          ; Check if lower bytes are equal
                      01147                          ;
06C1   082D           01148                         movf    Read_Low, W
06C2   0631           01149                         xorwf   NewIrLowByte, W
06C3   1D03           01150                         skpz
06C4   2ED4           01151                         goto    GetNextPinNumberFromIRCode
                      01152 
06C5   082F           01153                         movf    TempIndex, W
06C6   25AA           01154                         call    SetTablePointer
06C7   25F0           01155                         call    PeekTableCell
                      01156 
                      01157                         ; Lower bytes equal, check upper bytes
                      01158                         ;
06C8   082E           01159                         movf    Read_High, W
06C9   0632           01160                         xorwf   NewIrHighByte, W
06CA   1D03           01161                         skpz
06CB   2ED4           01162                         goto    GetNextPinNumberFromIRCode
                      01163 
                      01164                          ; Code match, check if it is the same IR standard
                      01165                  ;
06CC   0E3D           01166                         swapf   Read_Conf_Mode, W
06CD   0671           01167                         xorwf   IRPublicFlags, W
06CE   3903           01168                         andlw   b'00000011'
                      01169 
06CF   1D03           01170                         skpz
06D0   2ED4           01171                         goto    GetNextPinNumberFromIRCode     ; no - different standard
                      01172 
                      01173                          ; Match ! Get pin number and exit
                      01174 
06D1   083F           01175                         movf    Read_Conf_Pin, W
06D2   1403           01176                         setc
06D3   2ED8           01177                         goto    outta_here
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01178 
                      01179 
06D4                  01180 GetNextPinNumberFromIRCode
                      01181 
06D4   0AAF           01182                         incf    TempIndex, F
                      01183                          ;
06D5   0BA5           01184                         decfsz  Counter, F
06D6   2EBE           01185                         goto    CheckNextWord
                      01186                          ;
06D7   1003           01187                         clrc
                      01188 
06D8                  01189 outta_here
                      01190 
                      01191                 if ICE  ; -------------------------------------
                      01192                         nop             ; Breakpoint :
                      01193                         nop             ;
                      01194                 endif   ; -------------------------------------
                      01195 
06D8   0008           01196                         return ; GetFirstPinNumberFromIRCode / GetNextPinNumberFromIRCode
                      01197 
                      01198 
                      01199 
                      01200 
                      01201 
                      01202                 ; -------------------------------------------------------------------
                      01203                 ; ModeConf2Int
                      01204                 ; ReadModeConf          (use this)
                      01205                 ; -------------------------------------------------------------
                      01206                 ; Converts configuration byte to mode in decimal (0,1,..n)
                      01207                 ;
                      01208                 ; Input  : ReadModeConf:'Read_Conf_Mode', ModeConf2Int:W
                      01209                 ; Output : W = Mode (0..n)
                      01210                 ;
06D9                  01211 ReadModeConf
06D9   083D           01212                         movf    Read_Conf_Mode, W
06DA                  01213 ModeConf2Int
                      01214 
                      01215         if NOF_CONF_MODES > 7
                      01216                         error "RC5UTIL.ASM @1199"
                      01217         endif
                      01218 
06DA   3907           01219                         andlw   b'00000111'
06DB   0008           01220                         return
                      01221 
                      01222 
                      01223 
                      01224                 ; -------------------------------------------------------------------
                      01225                 ;       ModeInt2Conf
                      01226                 ;       -------------------------------------------------------------
                      01227                 ;       Converts mode in decimal (0,1,..n) to configuration byte
                      01228                 ;
                      01229                 ;       Input  : W = Mode (0..n)
                      01230                 ;       Output : W = Ready for logical or'ing into Conf byte
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01231 
06DC                  01232 ModeInt2Conf
                      01233         if NOF_CONF_MODES > 7
                      01234                         error "RC5UTIL.ASM @1217"
                      01235         endif
06DC   3907           01236                         andlw   b'00000111'
06DD   0008           01237                         return
                      01238 
                      01239 
                      01240 
                      01241 
                      01242                 ; -------------------------------------------------------------------
                      01243                 ; ActivateOutputMask
                      01244                 ; -------------------------------------------------------------
                      01245                 ; Extracts pin number and mode from "CurrentConf" and
                      01246                 ; modifies the output mask accordingly.
                      01247                 ; NOTE : Setter of "RadioPrescaler" in radio mode (timing the break)
                      01248                 ;
                      01249                 ; Input  : "CurrentConf" and "CurrentPin"
                      01250                 ; Output :
                      01251                 ;
                      01252                         ForcePageAlign  .12
                          M                 if $/0x100 != (.12-1+$)/0x100
                          M                         org     ((.12-1+$)/0x100          ) * 0x100
                          M                 endif
                      01253 
06DE                  01254 ActivateOutputMask
                      01255 
06DE   3006           01256                         movlw   ActivateOutputMask / 0x100
06DF   008A           01257                         movwf   PCLATH
                      01258                          ;
06E0   0840           01259                         movf    CurrentConf, W
06E1   26DA           01260                         call    ModeConf2Int
06E2   0782           01261                         addwf   PCL, F
  00000000            01262 gotya           set             0
                      01263                 if MODE_TABLE_CONF == 1
  00000001            01264 gotya           set             gotya+1
06E3   2EE8           01265                         goto    Standard
06E4   2EEB           01266                         goto    Toggle
06E5   2EEE           01267                         goto    Radio
06E6   2EF3           01268                 goto    BiToggle
06E7   2EF6           01269                         goto    BiToggleDelayed
                      01270                 endif
                      01271                 if MODE_TABLE_CONF == .100
                      01272 gotya           set             gotya+1
                      01273                         goto    Standard
                      01274                         goto    Toggle
                      01275                         goto    Radio
                      01276                 goto    BiToggle
                      01277                         goto    BiToggleDelayed
                      01278                         goto    RadioNext
                      01279                         goto    RadioPrev
                      01280                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01281 
                      01282                 if gotya != 1
                      01283                         error "***** Missing table in Activate/DeactivateOutputMask *****"
                      01284                 endif
                      01285 
                      01286                 if ActivateOutputMask / 0x0100 != ($-1) / 0x0100
                      01287                         error "Page fault in ActivateOutputMask"
                      01288                 endif
                      01289 
                      01290 
06E8                  01291 Standard
06E8   085D           01292                         movf    CurrentPin, W
06E9   2551           01293                         call    SetBitInOutputMask
06EA   2EFF           01294                         goto    TypeEnds
                      01295 
06EB                  01296 Toggle
06EB   085D           01297                         movf    CurrentPin, W
06EC   256B           01298                         call    ReverseBitInOutputMask
06ED   2EFF           01299                         goto    TypeEnds
                      01300 
06EE                  01301 Radio
                      01302 
06EE   085D           01303                         movf    CurrentPin, W
06EF   2551           01304                         call    SetBitInOutputMask
                      01305 
06F0   085D           01306                         movf    CurrentPin, W
06F1   00B7           01307                         movwf   RadioPinActivated
                      01308 
06F2   2EFD           01309                         goto    TypeEndsWithPrescaler
                      01310 
06F3                  01311 BiToggle
                      01312                         ; The bitoggle mode were either triggered by a slave pin stimuli
                      01313                         ; or a IR code on the master pin.
                      01314 
06F3   085D           01315                         movf    CurrentPin, W
06F4   256B           01316                 call    ReverseBitInOutputMask
06F5   2EFF           01317                         goto    TypeEnds
                      01318 
06F6                  01319 BiToggleDelayed
                      01320 
                      01321                         ; First issue : If a change is on a delayed bitoggle pin
                      01322                         ; (queued to be set after the delay time) then delete it
                      01323                         ; from the queue.
                      01324                         ; This means that the user is in charge.
                      01325                         ;
06F6   085D           01326                         movf    CurrentPin, W
06F7   259B           01327                         call    BitToMask
                      01328 
06F8   0934           01329                         comf    ShiftTempQuad+1, W
06F9   05E5           01330                         andwf   BiToggleRegBootDelay, F
06FA   2EF3           01331                         goto    BiToggle
                      01332 
06FB                  01333 RadioNext
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01334                 ifdef CONF_RADIO_NEXT
                      01335                         call    NextRadioPin
                      01336                         ;movf   RadioPinActivated, W
                      01337                         ;call   SetBitInOutputMask
                      01338                 if ICE  ; -------------------------------------
                      01339                         nop             ; Breakpoint :
                      01340                 endif   ; -------------------------------------
                      01341                         bsf             RadioModeNextPrevFlags, PRESCALER_PRESCALER
                      01342                         movlw   MAKE_BEFORE_BREAK_RADIO_NEXT
                      01343                 endif
06FB   2EFE           01344                         goto    TEWPC
                      01345 
06FC                  01346 RadioPrev
                      01347                 ifdef CONF_RADIO_PREV
                      01348                         call    PrevRadioPin
                      01349                         ;movf   RadioPinActivated, W
                      01350                         ;call   SetBitInOutputMask
                      01351                 if ICE  ; -------------------------------------
                      01352                         nop             ; Breakpoint :
                      01353                 endif   ; -------------------------------------
                      01354                         bsf             RadioModeNextPrevFlags, PRESCALER_PRESCALER
                      01355                         movlw   MAKE_BEFORE_BREAK_RADIO_NEXT
                      01356                 endif
06FC   2EFE           01357                         goto    TEWPC
                      01358 
06FD                  01359 TypeEndsWithPrescaler
06FD   3004           01360                         movlw   MAKE_BEFORE_BREAK_TICKS
06FE   00B8           01361 TEWPC           movwf   RadioPrescaler
06FF                  01362 TypeEnds
06FF   0008           01363                         return
                      01364 
                      01365 
                      01366 
                      01367 
                      01368                 ; -------------------------------------------------------------------
                      01369                 ; DeactivateOutputMask
                      01370                 ; -------------------------------------------------------------
                      01371                 ; Input  : "CurrentConf" and "CurrentPin"
                      01372                 ; Output :
                      01373                 ;
                      01374                         ForcePageAlign  .12
                          M                 if $/0x100 != (.12-1+$)/0x100
                          M                         org     ((.12-1+$)/0x100          ) * 0x100
                          M                 endif
                      01375 
0700                  01376 DeactivateOutputMask
                      01377 
0700   3007           01378                         movlw   DeactivateOutputMask / 0x100
0701   008A           01379                         movwf   PCLATH
                      01380                          ;
0702   0840           01381                         movf    CurrentConf, W
0703   26DA           01382                         call    ModeConf2Int
0704   0782           01383                         addwf   PCL, F
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01384                 if MODE_TABLE_CONF == 1
0705   2F0A           01385                         goto    DeactStandard
0706   2F0C           01386                         goto    DeactToggle
0707   2F0C           01387                         goto    DeactRadio
0708   2F0C           01388                         goto    DeactBiToggle
0709   2F0C           01389                         goto    DeactBiToggleDelayed
                      01390                 endif
                      01391                 if MODE_TABLE_CONF == .100
                      01392                         goto    DeactStandard
                      01393                         goto    DeactToggle
                      01394                         goto    DeactRadio
                      01395                         goto    DeactBiToggle
                      01396                         goto    DeactBiToggleDelayed
                      01397                         goto    DeactRadioNext
                      01398                         goto    DeactRadioPrev
                      01399                 endif
                      01400 
                      01401                 if DeactivateOutputMask / 0x0100 != $ / 0x0100
                      01402                         error "Page fault in DeactivateOutputMask"
                      01403                 endif
                      01404 
                      01405 
070A                  01406 DeactStandard
                      01407 
070A   085D           01408                         movf    CurrentPin, W
070B   255E           01409                         call    ClearBitInOutputMask
070C                  01410 DeactToggle
070C                  01411 DeactRadio
070C                  01412 DeactBiToggle
070C                  01413 DeactBiToggleDelayed
070C                  01414 DeactRadioNext
070C                  01415 DeactRadioPrev
070C   0008           01416                         return
                      01417 
                      01418 
                      01419 
                      01420                 ; -------------------------------------------------------------------
                      01421                 ; SaveCurrentOutputLevels
                      01422                 ; -------------------------------------------------------------
                      01423                 ; The state of the output pins are saved in eeprom if changed
                      01424                 ;
                      01425                 ; Input  :
                      01426                 ; Output :
                      01427                 ;
070D                  01428 SaveCurrentOutputLevels
070D   3004           01429                         movlw   .4
070E   00AF           01430                         movwf   TempIndex
070F                  01431 scol_loop
070F   3000           01432                         movlw   EepOutputPinsQuad - 1
0710   072F           01433                         addwf   TempIndex, W
0711   2327           01434                         call    EepromReadW
0712   00DB           01435                         movwf   Temporary
                      01436 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0713   3025           01437                         movlw   OutputsMask32 - 1
0714   072F           01438                         addwf   TempIndex, W
0715   0084           01439                         movwf   FSR
0716   0800           01440                         movf    INDF, W
                      01441 
0717   025B           01442                         subwf   Temporary, W
                      01443 
0718   1903           01444                         skpnz
0719   2F23           01445                         goto    this_is_equal
                      01446 
                      01447                          ; they differed, save new
                      01448 
071A   3000           01449                         movlw   EepOutputPinsQuad - 1
071B   072F           01450                         addwf   TempIndex, W
071C   2332           01451                         call    EepromSetAddress
                      01452 
071D   0800           01453                         movf    INDF, W
                      01454                         di
  0000                    M                         local   __di_fail__
071E   138B               M __di_fail__     bcf     INTCON, GIE
071F   1B8B               M                         btfsc   INTCON, GIE
0720   2F1E               M                         goto    __di_fail__
0721   2313           01455                         call    EepromWriteW
                      01456                         ei
0722   178B               M                         bsf     INTCON, GIE
                      01457 
0723                  01458 this_is_equal
0723   0BAF           01459                         decfsz  TempIndex, F
0724   2F0F           01460                         goto    scol_loop
                      01461 
0725   0008           01462                         return
                      01463 
                      01464 
                      01465 
                      01466 
                      01467 
                      01468                 ; ClearTableOutputLevels
                      01469                 ; ---------------------------------------------------
                      01470                 ; Clears output mask registers and writes a (cleared)
                      01471                 ; copy to table.
                      01472                 ; See    : "SetOutputsFromMasks" to set output ports
                      01473                 ; Input  :
                      01474                 ; Output :
                      01475                 ; Stack  :
                      01476 
0726                  01477 ClearTableOutputLevels
                      01478 
0726   01A6           01479                         clrf    OutputsMask32+0
0727   01A7           01480                         clrf    OutputsMask32+1
0728   01A8           01481                         clrf    OutputsMask32+2
0729   01A9           01482                         clrf    OutputsMask32+3
072A   270D           01483                         call    SaveCurrentOutputLevels
072B   0008           01484                         return
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01485 
                      01486 
                      01487                 ; RestoreOutputLevelMask
                      01488                 ; ---------------------------------------------------
                      01489                 ; The 2*16 bit cells "OutputsMask32" are loaded from eeprom
                      01490                 ; Typically called at cold start.
                      01491                 ;
                      01492                 ; Input  : EepOutputPinsQuad
                      01493                 ; Output : OutputsMask32
                      01494                 ; Stack  : -
                      01495                 ; Intrs  : -
                      01496 
                      01497 
072C                  01498 RestoreOutputLevelMask
                      01499 
072C   3004           01500                         movlw   .4
072D   00AF           01501                         movwf   TempIndex
                      01502 
072E   3025           01503                         movlw   OutputsMask32 - 1
072F   072F           01504                         addwf   TempIndex, W
0730   0084           01505                         movwf   FSR
                      01506 
0731                  01507 rtol_load_next
0731   3000           01508                         movlw   EepOutputPinsQuad - 1
0732   072F           01509                         addwf   TempIndex, W
0733   2327           01510                         call    EepromReadW
                      01511 
0734   0080           01512                         movwf   INDF
0735   0384           01513                         decf    FSR, F
                      01514 
0736   0BAF           01515                         decfsz  TempIndex, F
0737   2F31           01516                         goto    rtol_load_next
                      01517 
0738   0008           01518                         return
                      01519 
                      01520 
                      01521 
                      01522 
                      01523 
                      01524                 ; -------------------------------------------------------------------
                      01525                 ; GetFirstCodeAndConf
                      01526                 ; GetNextCodeAndConf
                      01527                 ; -------------------------------------------------------------
                      01528                 ; Find assignments for the specified i/o pin
                      01529                 ; Input  : Pin number in W
                      01530                 ; Output : Succes, C = 1 and W = configuration byte (incl pin)
                      01531                 ;          Read_Low & Read_High will contain IR code
                      01532                 ;              Fail, C = 0
                      01533                 ;
0739                  01534 GetFirstCodeAndConf
                      01535 
0739   00C7           01536                 movwf   SubCallParameter                ; Save pin number
                      01537 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

073A   3020           01538                         movlw   TABLE_NOF_CELLS
073B   00A5           01539                         movwf   Counter
073C   01AF           01540                         clrf    TempIndex
                      01541 
073D                  01542 GFCC_NextWord
073D   082F           01543                         movf    TempIndex, W
073E   25AA           01544                         call    SetTablePointer
073F   25D5           01545                         call    PeekTableCellPin
                      01546 
                      01547                          ; Check if pin number matches
                      01548                          ;
0740   083F           01549                         movf    Read_Conf_Pin, W
0741   0247           01550                         subwf   SubCallParameter, W
0742   1D03           01551                         skpz
0743   2F4D           01552                         goto    GetNextCodeAndConf     ; no
                      01553 
                      01554                          ; Match ! Return configuration if its a valid cell
                      01555                          ;
0744   082F           01556                         movf    TempIndex, W
0745   25AA           01557                         call    SetTablePointer
0746   25F0           01558                         call    PeekTableCell
                      01559 
0747   267C           01560                         call    TestIfCellValid
0748   1C03           01561                         skpc
0749   2F50           01562                         goto    GetCodeAndConfExitNotFound
                      01563 
074A   083D           01564                         movf    Read_Conf_Mode, W
074B   1403           01565                         setc
074C   2F51           01566                         goto    GetCodeAndConfExit
                      01567 
                      01568 
074D                  01569 GetNextCodeAndConf
                      01570 
074D   0AAF           01571                         incf    TempIndex, F
                      01572                          ;
074E   0BA5           01573                         decfsz  Counter, F
074F   2F3D           01574                         goto    GFCC_NextWord
                      01575                          ;
0750                  01576 GetCodeAndConfExitNotFound
0750   1003           01577                         clrc
                      01578 
0751                  01579 GetCodeAndConfExit
                      01580 
                      01581                 if ICE  ; -------------------------------------
                      01582                         nop             ; Breakpoint :
                      01583                 endif   ; -------------------------------------
                      01584 
0751   0008           01585                         return ; GetNextCodeAndConf
                      01586 
                      01587 
                      01588 
                      01589 
                      01590                 ; -------------------------------------------------------------------
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01591                 ; CheckForRadioAssignment
                      01592                 ; -------------------------------------------------------------
                      01593                 ; Check if the specified pin has a radio assignment
                      01594                 ; Input  : Pin number in W
                      01595                 ; Output : Succes, C = 1 and W = configuration byte (incl pin)
                      01596                 ;          Read_Low & Read_High will contain IR code
                      01597                 ;              Fail, C = 0
                      01598                 ;
                      01599 
0752                  01600 CheckForRadioAssignment
                      01601                 ifdef CONF_RADIO_MODE
0752   00C7           01602                 movwf   SubCallParameter
                      01603 
                      01604                         ; Prepare to sweep the entire assignments table
0753   3020           01605                         movlw   TABLE_NOF_CELLS
0754   00C2           01606                         movwf   Counter2
0755   01C3           01607                         clrf    TempIndex2
                      01608 
0756                  01609 CFR_NextWord
0756   0843           01610                         movf    TempIndex2, W
0757   25AA           01611                         call    SetTablePointer
0758   25D5           01612                         call    PeekTableCellPin
                      01613 
                      01614                          ; Check if pin number matches
                      01615                          ;
0759   083F           01616                         movf    Read_Conf_Pin, W
075A   0247           01617                         subwf   SubCallParameter, W
075B   1D03           01618                         skpz
075C   2F67           01619                         goto    CFR_BadPin
                      01620 
                      01621                          ; Match. Check if radio
                      01622                          ;
075D   0843           01623                         movf    TempIndex2, W
075E   25AA           01624                         call    SetTablePointer
075F   25F0           01625                         call    PeekTableCell
                      01626 
0760   083D           01627                         movf    Read_Conf_Mode, W
0761   26DA           01628                         call    ModeConf2Int
0762   3C02           01629                         sublw   CONF_RADIO_MODE
0763   1D03           01630                         skpz
0764   2F67           01631                         goto    CFR_BadPin
                      01632 
                      01633                          ; Yes, its a radio
0765   1403           01634                         setc
0766   2F6B           01635                         goto    CFR_Exit
                      01636 
0767                  01637 CFR_BadPin
0767   0AC3           01638                         incf    TempIndex2, F
                      01639                          ;
0768   0BC2           01640                         decfsz  Counter2, F
0769   2F56           01641                         goto    CFR_NextWord
                      01642                          ;
                      01643                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

076A   1003           01644                         clrc
076B                  01645 CFR_Exit
076B   0008           01646                         return
                      01647 
                      01648 
                      01649 
                      01650                 ; SetOutputsFromMasks
                      01651                 ; ---------------------------------------------------
                      01652                 ; Sets the 16 output pin levels as given by "OutputsMaskXxx"
                      01653                 ;
076C                  01654 SetOutputsFromMasks
                      01655                 if ICE  ; -------------------------------------
                      01656                         nop             ; Breakpoint :
                      01657                         nop             ;
                      01658                 endif   ; -------------------------------------
                      01659 
                      01660                         SetPgeF FAR_CODE_PAGE
  00000001                M __page          set     FAR_CODE_PAGE / 0x800
                          M                 if __page == 0
                          M                         bcf     PCLATH, BIT3
                          M                         bcf     PCLATH, BIT4
                          M                 endif
                          M                 if __page == 1
076C   158A               M                         bsf     PCLATH, BIT3
076D   120A               M                         bcf     PCLATH, BIT4
                          M                 endif
076E   2800           01661                         goto    Far_SetOutputsFromMasks & __PAGE__
                      01662 
                      01663 
                      01664 
                      01665 
                      01666 ; -----------------------------------------------------------------------------
                      01667 ;    U T I L I T Y    C O D E    P A G E       ("Far_")
                      01668 ; -----------------------------------------------------------------------------
                      01669 
                      01670 
0800                  01671                         org             FAR_CODE_PAGE
                      01672 
                      01673 
                      01674 CheckIfProhibited       macro pin
                      01675                 ifdef CONF_RADIO_NEXT
                      01676                         btfss   RadioModeNextPin, BIT7
                      01677                         goto    $+.6    ; check_prev
                      01678                         movf    RadioModeNextPin, W
                      01679                         andlw   0x7F
                      01680                         sublw   pin
                      01681                         skpnz
                      01682                         goto    $+.9    ; prohibited
                      01683 ;check_prev
                      01684                         btfss   RadioModePrevPin, BIT7
                      01685                         goto    $+.9    ; not_prohibited
                      01686                         movf    RadioModePrevPin, W
                      01687                         andlw   0x7F
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01688                         sublw   pin
                      01689                         skpnz
                      01690                         goto    $+.2    ; prohibited
                      01691                         goto    $+.3    ; not_prohibited
                      01692 ;prohibited
                      01693                         setc
                      01694                         goto    $+.3    ; check_exit
                      01695 ;not_prohibited
                      01696                         nop                             ; FIXIT
                      01697                         clrc
                      01698 ;check_exit
                      01699                 endif
                      01700                         endm
                      01701 
                      01702 
                      01703 
                      01704 
                      01705 SetOutputPin macro      port, bit, pin
                      01706                         btfss   mask, bit
                      01707                         goto    $ + 3
                      01708                         bsf             port, pin
                      01709                         goto    $ + 2
                      01710                         bcf             port, pin
                      01711                         endm
                      01712 
                      01713                 ; Far_SetOutputsFromMask
                      01714                 ; ---------------------------------------------------
                      01715                 ; See SetOutputsFromMasks
                      01716                 ;
                      01717 
0800                  01718 Far_SetOutputsFromMasks
                      01719 
  00000026            01720 mask            set  OutputsMask32+0
                      01721 
                      01722                 ; For pin0 and pin1 check if they are running as RadioNext and
                      01723                 ; RadioPrev. If they are, then skip them, they are configured as
                      01724                 ; inputs with external pullups.
                      01725                 ;
                      01726                 ifdef CONF_RADIO_NEXT
                      01727                         CheckIfProhibited PIN0
                      01728                         skpnc
                      01729                         goto    SkipBit1
                      01730                 endif
                      01731                         SetOutputPin    PIN0_PORT, BIT0, PIN0
0800   1C26               M                         btfss   mask, BIT0
0801   2804               M                         goto    $ + 3
0802   1507               M                         bsf             PIN0_PORT, PIN0
0803   2805               M                         goto    $ + 2
0804   1107               M                         bcf             PIN0_PORT, PIN0
0805                  01732 SkipBit1
                      01733 
                      01734                 ifdef PIN1_PORT
                      01735                 ifdef CONF_RADIO_PREV
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01736                 jkjl
                      01737                         CheckIfProhibited PIN1
                      01738                         skpnc
                      01739                         goto    SkipBit2
                      01740                 endif
                      01741                         SetOutputPin    PIN1_PORT, BIT1, PIN1
0805   1CA6               M                         btfss   mask, BIT1
0806   2809               M                         goto    $ + 3
0807   1687               M                         bsf             PIN1_PORT, PIN1
0808   280A               M                         goto    $ + 2
0809   1287               M                         bcf             PIN1_PORT, PIN1
                      01742                 endif
080A                  01743 SkipBit2
                      01744 
                      01745                 ifdef PIN2_PORT
                      01746                         SetOutputPin    PIN2_PORT, BIT2, PIN2
080A   1D26               M                         btfss   mask, BIT2
080B   280E               M                         goto    $ + 3
080C   1487               M                         bsf             PIN2_PORT, PIN2
080D   280F               M                         goto    $ + 2
080E   1087               M                         bcf             PIN2_PORT, PIN2
                      01747                         SetOutputPin    PIN3_PORT, BIT3, PIN3
080F   1DA6               M                         btfss   mask, BIT3
0810   2813               M                         goto    $ + 3
0811   1707               M                         bsf             PIN3_PORT, PIN3
0812   2814               M                         goto    $ + 2
0813   1307               M                         bcf             PIN3_PORT, PIN3
                      01748                 endif
                      01749                 ifdef PIN4_PORT
                      01750                         SetOutputPin    PIN4_PORT, BIT4, PIN4
0814   1E26               M                         btfss   mask, BIT4
0815   2818               M                         goto    $ + 3
0816   1407               M                         bsf             PIN4_PORT, PIN4
0817   2819               M                         goto    $ + 2
0818   1007               M                         bcf             PIN4_PORT, PIN4
                      01751                         SetOutputPin    PIN5_PORT, BIT5, PIN5
0819   1EA6               M                         btfss   mask, BIT5
081A   281D               M                         goto    $ + 3
081B   1787               M                         bsf             PIN5_PORT, PIN5
081C   281E               M                         goto    $ + 2
081D   1387               M                         bcf             PIN5_PORT, PIN5
                      01752                         SetOutputPin    PIN6_PORT, BIT6, PIN6
081E   1F26               M                         btfss   mask, BIT6
081F   2822               M                         goto    $ + 3
0820   1406               M                         bsf             PIN6_PORT, PIN6
0821   2823               M                         goto    $ + 2
0822   1006               M                         bcf             PIN6_PORT, PIN6
                      01753                         SetOutputPin    PIN7_PORT, BIT7, PIN7
0823   1FA6               M                         btfss   mask, BIT7
0824   2827               M                         goto    $ + 3
0825   1486               M                         bsf             PIN7_PORT, PIN7
0826   2828               M                         goto    $ + 2
0827   1086               M                         bcf             PIN7_PORT, PIN7
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01754 
  00000027            01755 mask            set  OutputsMask32+1
                      01756 
                      01757                         SetOutputPin    PIN8_PORT, BIT0, PIN8
0828   1C27               M                         btfss   mask, BIT0
0829   282C               M                         goto    $ + 3
082A   1685               M                         bsf             PIN8_PORT, PIN8
082B   282D               M                         goto    $ + 2
082C   1285               M                         bcf             PIN8_PORT, PIN8
                      01758                         SetOutputPin    PIN9_PORT, BIT1, PIN9
082D   1CA7               M                         btfss   mask, BIT1
082E   2831               M                         goto    $ + 3
082F   1506               M                         bsf             PIN9_PORT, PIN9
0830   2832               M                         goto    $ + 2
0831   1106               M                         bcf             PIN9_PORT, PIN9
                      01759                         SetOutputPin    PIN10_PORT, BIT2, PIN10
0832   1D27               M                         btfss   mask, BIT2
0833   2836               M                         goto    $ + 3
0834   1586               M                         bsf             PIN10_PORT, PIN10
0835   2837               M                         goto    $ + 2
0836   1186               M                         bcf             PIN10_PORT, PIN10
                      01760                         SetOutputPin    PIN11_PORT, BIT3, PIN11
0837   1DA7               M                         btfss   mask, BIT3
0838   283B               M                         goto    $ + 3
0839   1585               M                         bsf             PIN11_PORT, PIN11
083A   283C               M                         goto    $ + 2
083B   1185               M                         bcf             PIN11_PORT, PIN11
                      01761 
                      01762                 if ICE  ; -------------------------------------
                      01763                         nop             ; Breakpoint :
                      01764                         nop             ;
                      01765                 endif   ; -------------------------------------
                      01766 
083C   1CA4           01767                         btfss   Flags, PROGRAM_MODE_ON
083D   2853           01768             goto    SetOutputsNormalMode
                      01769 
                      01770                 ; Programming mode, all are outputs
                      01771                 ;
                      01772                         SetOutputPin    PIN12_PORT, BIT4, PIN12
083E   1E27               M                         btfss   mask, BIT4
083F   2842               M                         goto    $ + 3
0840   1606               M                         bsf             PIN12_PORT, PIN12
0841   2843               M                         goto    $ + 2
0842   1206               M                         bcf             PIN12_PORT, PIN12
                      01773                 if ICE == false
                      01774                         SetOutputPin    PIN13_PORT, BIT5, PIN13
0843   1EA7               M                         btfss   mask, BIT5
0844   2847               M                         goto    $ + 3
0845   1505               M                         bsf             PIN13_PORT, PIN13
0846   2848               M                         goto    $ + 2
0847   1105               M                         bcf             PIN13_PORT, PIN13
                      01775                         SetOutputPin    PIN14_PORT, BIT6, PIN14
0848   1F27               M                         btfss   mask, BIT6
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0849   284C               M                         goto    $ + 3
084A   1686               M                         bsf             PIN14_PORT, PIN14
084B   284D               M                         goto    $ + 2
084C   1286               M                         bcf             PIN14_PORT, PIN14
                      01776                         SetOutputPin    PIN15_PORT, BIT7, PIN15
084D   1FA7               M                         btfss   mask, BIT7
084E   2851               M                         goto    $ + 3
084F   1485               M                         bsf             PIN15_PORT, PIN15
0850   2852               M                         goto    $ + 2
0851   1085               M                         bcf             PIN15_PORT, PIN15
                      01777                 endif
0852   286F           01778                         goto    SetBiToggleEnds
                      01779 
0853                  01780 SetOutputsNormalMode
                      01781                         ; If any of 8-11 are running in bitoggle mode, i.e. having 12-15 as
                      01782                 ; slave inputs, then dont write to slave inputs (which are inputs
                      01783                 ; with pullups to vcc)
                      01784                         ;
0853   1861           01785             btfsc   BiToggleRegister, BIT0
0854   285A           01786                         goto    no_12_set
                      01787                         SetOutputPin    PIN12_PORT, BIT4, PIN12
0855   1E27               M                         btfss   mask, BIT4
0856   2859               M                         goto    $ + 3
0857   1606               M                         bsf             PIN12_PORT, PIN12
0858   285A               M                         goto    $ + 2
0859   1206               M                         bcf             PIN12_PORT, PIN12
085A                  01788 no_12_set
                      01789 
                      01790                 if ICE == false
085A   18E1           01791                         btfsc   BiToggleRegister, BIT1
085B   2861           01792                         goto    no_13_set
                      01793                         SetOutputPin    PIN13_PORT, BIT5, PIN13
085C   1EA7               M                         btfss   mask, BIT5
085D   2860               M                         goto    $ + 3
085E   1505               M                         bsf             PIN13_PORT, PIN13
085F   2861               M                         goto    $ + 2
0860   1105               M                         bcf             PIN13_PORT, PIN13
0861                  01794 no_13_set
                      01795 
0861   1961           01796             btfsc   BiToggleRegister, BIT2
0862   2868           01797                         goto    no_14_set
                      01798                         SetOutputPin    PIN14_PORT, BIT6, PIN14
0863   1F27               M                         btfss   mask, BIT6
0864   2867               M                         goto    $ + 3
0865   1686               M                         bsf             PIN14_PORT, PIN14
0866   2868               M                         goto    $ + 2
0867   1286               M                         bcf             PIN14_PORT, PIN14
0868                  01799 no_14_set
                      01800 
0868   19E1           01801             btfsc   BiToggleRegister, BIT3
0869   286F           01802                         goto    no_15_set
                      01803                         SetOutputPin    PIN15_PORT, BIT7, PIN15
086A   1FA7               M                         btfss   mask, BIT7
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

086B   286E               M                         goto    $ + 3
086C   1485               M                         bsf             PIN15_PORT, PIN15
086D   286F               M                         goto    $ + 2
086E   1085               M                         bcf             PIN15_PORT, PIN15
086F                  01804 no_15_set
                      01805                 endif
                      01806 
                      01807 
086F                  01808 SetBiToggleEnds
                      01809 
                      01810                 endif
                      01811 
                      01812                 if ICE  ; -------------------------------------
                      01813                         nop             ; Breakpoint :
                      01814                         nop             ;
                      01815                 endif   ; -------------------------------------
                      01816 
                      01817                         SetPage0
086F   118A               M                         bcf     PCLATH, BIT3
0870   120A               M                         bcf     PCLATH, BIT4
  00000000                M __page          set     0
0871   0008           01818                         return
                      01819 
                      01820                         ; Far_SetOutputsFromMask
                      01821                         
                      01822                         
                      02424 
                      02425 
0900                  02426                         org     FLASH_CODE_PAGE
                      02427 
                      02428                         PicFlashCode
                          M 
0900                      M CODE_SIZE_FLASH_START
                          M 
0900                      M FlashSetAdrZeroPage
0900   00D8               M                         movwf   FlashAdrLow
0901   305B               M                         movlw   FLASH_STORE_ADRESS % 0x100
0902   07D8               M                         addwf   FlashAdrLow, F
                          M 
0903   01D9               M                         clrf    FlashAdrHigh
0904   1803               M                         skpnc
0905   0AD9               M                         incf    FlashAdrHigh, F
0906   3009               M                         movlw   FLASH_STORE_ADRESS / 0x100
0907   07D9               M                         addwf   FlashAdrHigh, F
0908   0008               M                         return
                          M 
                          M 
                          M 
                          M                 ifndef CODE_SIZE_FLASH_START
                          M CODE_SIZE_FLASH_START
                          M 
                          M                 endif
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
0909                      M FlashAddressNext
0909   0AD8               M                         incf    FlashAdrLow, F
090A   1D03               M                         skpz
090B   0008               M                         return
090C   0AD9               M                         incf    FlashAdrHigh, F
090D   0008               M                         return
                          M 
                          M 
090E                      M FlashAddressPrev
090E   3001               M                         movlw   1
090F   02D8               M                         subwf   FlashAdrLow, F
0910   1803               M                         skpnc
0911   0008               M                         return
0912   03D9               M                         decf    FlashAdrHigh, F
0913   0008               M                         return
                          M 
                          M 
                          M 
                          M 
                          M 
                          M 
                          M ;       FlashRead
                          M ; -------------------------------------------------------------------
                          M ;       In   : Adress in FlashAdrLow/FlashAdrHigh
                          M ;       Out  : 14 bit data in FlashDataLow/FlashDataHigh
                          M ;            ; W = FlashDataLow (8bit)
                          M ;       NOTE : Treats flash as a 8 bit wide store if FlashDataHigh is undefined
                          M 
0914                      M FlashRead
                          M 
                          M                         SetBnkF FlashAdrLow
  00000000                M CURRENT_BANK    set     (FlashAdrLow & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
0914   1283               M                         bcf     STATUS, RP0
0915   1303               M                         bcf     STATUS, RP1
  00000000                M __bank          set     0
                          M                 endif
                          M                 if CURRENT_BANK == 1
                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0916   0858               M                         movf    FlashAdrLow, W
                          M                         SetBnkA EEADR
  00000002                M CURRENT_BANK    set     (EEADR    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
0917   1703               M                         bsf     STATUS, RP1     ; 00 -> 10
                          M                 else
                          M                         if __bank == 1          ; 01 -> 10
                          M                                 bcf     STATUS, RP0
                          M                                 bsf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0     ; 11 -> 10
                          M                         endif
                          M                         endif
                          M                 endif
  00000002                M __bank          set     2
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0918   008D               M                         movwf   EEADR & FORCE_7_BIT_ADR
                          M                         SetBnkA FlashAdrHigh
  00000000                M CURRENT_BANK    set     (FlashAdrHigh & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
0919   1303               M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         SetBank3Auto
                          M                 endif
091A   0859               M                         movf    FlashAdrHigh, W
                          M                         SetBnkA EEADRH
  00000002                M CURRENT_BANK    set     (EEADRH   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
091B   1703               M                         bsf     STATUS, RP1     ; 00 -> 10
                          M                 else
                          M                         if __bank == 1          ; 01 -> 10
                          M                                 bcf     STATUS, RP0
                          M                                 bsf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0     ; 11 -> 10
                          M                         endif
                          M                         endif
                          M                 endif
  00000002                M __bank          set     2
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
091C   008F               M                         movwf   EEADRH & FORCE_7_BIT_ADR
                          M 
                          M                         SetBnkA EECON1
  00000003                M CURRENT_BANK    set     (EECON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
                          M                         bsf     STATUS, RP0     ; 00 -> 11
                          M                         bsf     STATUS, RP1
                          M                 else
                          M                 if __bank == 1          ; 01 -> 11
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bsf     STATUS, RP1
                          M                 else
                          M                         if __bank == 2
091D   1683               M                                 bsf     STATUS, RP0     ; 10 -> 11
                          M                         endif
                          M                 endif
                          M                 endif
  00000003                M __bank          set     3
                          M                 endif
                          M                 endif
091E   178C               M                         bsf     EECON1 & FORCE_7_BIT_ADR, EEPGD ;Point to Program memory
091F   140C               M                         bsf     EECON1 & FORCE_7_BIT_ADR, RD ;Start read operation
0920   0000               M                         nop
0921   0000               M                         nop
                          M 
                          M                         SetBnkA EEDATA
  00000002                M CURRENT_BANK    set     (EEDATA   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
                          M                         bsf     STATUS, RP1     ; 00 -> 10
                          M                 else
                          M                         if __bank == 1          ; 01 -> 10
                          M                                 bcf     STATUS, RP0
                          M                                 bsf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
0922   1283               M                                 bcf     STATUS, RP0     ; 11 -> 10
                          M                         endif
                          M                         endif
                          M                 endif
  00000002                M __bank          set     2
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0923   080C               M                         movf    EEDATA & FORCE_7_BIT_ADR, W ;DATAL = EEDATA
                          M                         SetBnkA FlashDataLow
  00000000                M CURRENT_BANK    set     (FlashDataLow & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                    if __bank == 2
0924   1303               M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0925   00DA               M                         movwf   FlashDataLow
                          M 
                          M                 ifdef FlashDataHigh
                          M                         SetBnkA EEDATH
                          M                         movf    EEDATH & FORCE_7_BIT_ADR, W ;DATAL = EEDATA
                          M                         SetBnkA FlashDataHigh
                          M                         movwf   FlashDataHigh
                          M                 endif
                          M 
                          M                         SetBnkA EECON1
  00000003                M CURRENT_BANK    set     (EECON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
0926   1683               M                         bsf     STATUS, RP0     ; 00 -> 11
0927   1703               M                         bsf     STATUS, RP1
                          M                 else
                          M                 if __bank == 1          ; 01 -> 11
                          M                         bsf     STATUS, RP1
                          M                 else
                          M                         if __bank == 2
                          M                                 bsf     STATUS, RP0     ; 10 -> 11
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         endif
                          M                 endif
                          M                 endif
  00000003                M __bank          set     3
                          M                 endif
                          M                 endif
0928   138C               M                         bcf     EECON1 & FORCE_7_BIT_ADR, EEPGD ;Point to Program memory
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
0929   1283               M                                 bcf     STATUS, RP0
092A   1303               M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                          M 
092B   085A               M                         movf    FlashDataLow, W
                          M 
092C   0008               M                         return
                          M 
                          M 
                          M 
                          M 
                          M ;       FlashWrite
                          M ; -------------------------------------------------------------------
                          M ;       In   : Data in FlashAdrXXX and FlashDataXXX
                          M ;       Out  : Garbage
                          M ;       NOTE : Leaves with interupts disabled !
                          M 
                          M 
092D                      M FlashWriteByteW
                          M 
092D   00DA               M                         movwf   FlashDataLow
                          M 
092E                      M FlashWrite
                          M 
                          M                         SetBnkF FlashAdrLow
  00000000                M CURRENT_BANK    set     (FlashAdrLow & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0
                          M                         SetBank0
092E   1283               M                         bcf     STATUS, RP0
092F   1303               M                         bcf     STATUS, RP1
  00000000                M __bank          set     0
                          M                 endif
                          M                 if CURRENT_BANK == 1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         SetBank1
                          M                 endif
                          M                 if CURRENT_BANK == 2
                          M                         SetBank2
                          M                 endif
                          M                 if CURRENT_BANK == 3
                          M                         SetBank3
                          M                 endif
0930   0858               M                         movf    FlashAdrLow, W
                          M                         SetBnkA EEADR
  00000002                M CURRENT_BANK    set     (EEADR    & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
0931   1703               M                         bsf     STATUS, RP1     ; 00 -> 10
                          M                 else
                          M                         if __bank == 1          ; 01 -> 10
                          M                                 bcf     STATUS, RP0
                          M                                 bsf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0     ; 11 -> 10
                          M                         endif
                          M                         endif
                          M                 endif
  00000002                M __bank          set     2
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0932   008D               M                         movwf   EEADR & FORCE_7_BIT_ADR
                          M                         SetBnkA FlashAdrHigh
  00000000                M CURRENT_BANK    set     (FlashAdrHigh & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
0933   1303               M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0934   0859               M                         movf    FlashAdrHigh, W
                          M                         SetBnkA EEADRH
  00000002                M CURRENT_BANK    set     (EEADRH   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
0935   1703               M                         bsf     STATUS, RP1     ; 00 -> 10
                          M                 else
                          M                         if __bank == 1          ; 01 -> 10
                          M                                 bcf     STATUS, RP0
                          M                                 bsf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0     ; 11 -> 10
                          M                         endif
                          M                         endif
                          M                 endif
  00000002                M __bank          set     2
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0936   008F               M                         movwf   EEADRH & FORCE_7_BIT_ADR
                          M 
                          M                         SetBnkA FlashDataLow
  00000000                M CURRENT_BANK    set     (FlashDataLow & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
0937   1303               M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0
                          M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0938   085A               M                         movf    FlashDataLow, W
                          M                         SetBnkA EEDATA
  00000002                M CURRENT_BANK    set     (EEDATA   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
0939   1703               M                         bsf     STATUS, RP1     ; 00 -> 10
                          M                 else
                          M                         if __bank == 1          ; 01 -> 10
                          M                                 bcf     STATUS, RP0
                          M                                 bsf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
                          M                                 bcf     STATUS, RP0     ; 11 -> 10
                          M                         endif
                          M                         endif
                          M                 endif
  00000002                M __bank          set     2
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

093A   008C               M                         movwf   EEDATA & FORCE_7_BIT_ADR
                          M 
                          M                 ifdef FlashDataHigh
                          M                         SetBnkA FlashDataHigh
                          M                         movf    FlashDataHigh, W
                          M                 else
093B   0103               M                         clrw
                          M                 endif
                          M                         SetBnkA EEDATH
  00000002                M CURRENT_BANK    set     (EEDATH   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
093C   008E               M                         movwf   EEDATH & FORCE_7_BIT_ADR
                          M 
                          M                 SetBnkA EECON1
  00000003                M CURRENT_BANK    set     (EECON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
                          M                         bsf     STATUS, RP0     ; 00 -> 11
                          M                         bsf     STATUS, RP1
                          M                 else
                          M                 if __bank == 1          ; 01 -> 11
                          M                         bsf     STATUS, RP1
                          M                 else
                          M                         if __bank == 2
093D   1683               M                                 bsf     STATUS, RP0     ; 10 -> 11
                          M                         endif
                          M                 endif
                          M                 endif
  00000003                M __bank          set     3
                          M                 endif
                          M                 endif
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

093E   178C               M                         bsf     EECON1 & FORCE_7_BIT_ADR, EEPGD ; Point to Program memory
093F   150C               M                         bsf     EECON1 & FORCE_7_BIT_ADR, WREN
                          M 
                          M                 SetBnkA INTCON
  00000000                M CURRENT_BANK    set     (INTCON   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
0940   1283               M                                 bcf     STATUS, RP0
0941   1303               M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0942   138B               M                 bcf     INTCON, GIE                                     ; if already enabled,
                          M 
                          M                 SetBnkA EECON2
  00000003                M CURRENT_BANK    set     (EECON2   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 0
0943   1683               M                         bsf     STATUS, RP0     ; 00 -> 11
0944   1703               M                         bsf     STATUS, RP1
                          M                 else
                          M                 if __bank == 1          ; 01 -> 11
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bsf     STATUS, RP1
                          M                 else
                          M                         if __bank == 2
                          M                                 bsf     STATUS, RP0     ; 10 -> 11
                          M                         endif
                          M                 endif
                          M                 endif
  00000003                M __bank          set     3
                          M                 endif
                          M                 endif
0945   3055               M                         movlw   0x55                                                    ; First magic nu
                            mber write
0946   008D               M                 movwf   EECON2 & FORCE_7_BIT_ADR
0947   30AA               M                 movlw   0xAA                                                    ; Second magic number wr
                            ite
0948   008D               M                         movwf   EECON2 & FORCE_7_BIT_ADR
                          M 
                          M                 SetBnkA EECON1
  00000003                M CURRENT_BANK    set     (EECON1   & 0x180) / 0x80
                          M                 if CURRENT_BANK == 0 && __bank != 0
                          M                         SetBank0Auto
                          M                 endif
                          M                 if CURRENT_BANK == 1 && __bank != 1
                          M                         SetBank1Auto
                          M                 endif
                          M                 if CURRENT_BANK == 2 && __bank != 2
                          M                         SetBank2Auto
                          M                 endif
                          M                 if CURRENT_BANK == 3 && __bank != 3
                          M                         SetBank3Auto
                          M                 endif
0949   148C               M                         bsf     EECON1 & FORCE_7_BIT_ADR, WR    ; Start write operation
094A   0000               M                 nop
094B   0000               M                 nop
094C   110C               M                         bcf     EECON1 & FORCE_7_BIT_ADR, WREN  ; Disable writes
                          M 
                          M                         SetBank0Auto
                          M                 if FILE_BANKS > 1
                          M                 if __bank == 1
                          M                         bcf     STATUS, RP0
                          M                 else
                          M                    if __bank == 2
                          M                                 bcf     STATUS, RP1
                          M                         else
                          M                         if __bank == 3
094D   1283               M                                 bcf     STATUS, RP0
094E   1303               M                                 bcf     STATUS, RP1
                          M                         endif
                          M                         endif
                          M                 endif
  00000000                M __bank          set     0
                          M                 endif
                          M 
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

094F   0008               M                         return
                          M 
                          M 
                          M                 if CODE_SIZE_FLASH_START / 0x800 != $ / 0x800
                          M                         error("PicFlash.inc : Page crossing")
                          M                 endif
                          M 
                          M 
  00000050                M CODE_SIZE_FLASH         equ     $ - CODE_SIZE_FLASH_START
                          M 
                          M 
                      02429 
                      02430 
                      02431         ; FLASH_STORE_ADRESS
                      02432         ; -------------------------------------------------------------------
                      02433 
0950   2066 206C 2061 02434                         data    " f l a s h s t a r t :"
       2073 2068 2073 
       2074 2061 2072 
       2074 203A 
                      02435 
  00000080            02436 FLASH_TABLE_SIZE                equ     TABLE_NOF_CELLS*TABLE_CELL_BYTES
                      02437 
095B                  02438 FLASH_STORE_ADRESS
                      02439 
  000009DB            02440 FLASH_STORE_ADRESS_END  equ     FLASH_STORE_ADRESS + FLASH_TABLE_SIZE
                      02441 
                      02442                         END
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 166


SYMBOL TABLE
  LABEL                             VALUE 

ABORT_PRESC                       00000043
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACTUAL_ISR_ERR_PROMILLE           FFFFFFFF
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALTERNATIVE_PINS                  00000000
AcknTimout                        000000CE
ActivateOutputMask                000006DE
AddPinDataToTable                 0000061A
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BIT0                              00000000
BIT1                              00000001
BIT2                              00000002
BIT3                              00000003
BIT4                              00000004
BIT5                              00000005
BIT6                              00000006
BIT7                              00000007
BITOGGLE_BOOT_DELAY_sec           00000003
BI_TOGGLE_DEFINED                 
BRGH                              00000002
BT_done                           0000012C
BiToggle                          000006F3
BiToggleBootDelayPin10            00000268
BiToggleBootDelayPin11            00000266
BiToggleBootDelayPin12            00000264
BiToggleBootDelayPin9             0000026A
BiToggleCntBootDelay              00000066
BiToggleDelayed                   000006F6
BiToggleJump                      00000239
BiToggleJump2                     0000025C
BiToggleJumpEnds2                 00000264
BiToggleLoop                      00000233
BiToggleNextPass                  0000026C
BiTogglePin10                     0000024D
BiTogglePin11                     00000247
BiTogglePin12                     00000241
BiTogglePin9                      00000253
BiToggleRegBootDelay              00000065
BiToggleRegister                  00000061
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 167


SYMBOL TABLE
  LABEL                             VALUE 

BiToggleSearchEnds                0000026E
BiToggleTemp                      00000062
BitToMask                         0000059B
BitoggleEnds                      0000054F
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CFR_BadPin                        00000767
CFR_Exit                          0000076B
CFR_NextWord                      00000756
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CODE_SIZE_FLASH                   00000050
CODE_SIZE_FLASH_START             00000900
CODE_SIZE_I2C                     0000003D
CODE_SIZE_I2C_START               000002D6
CONF_BI_TOGGLE_MODE               00000003
CONF_BI_TOGGLE_MODE_BOOT_DELAY    00000004
CONF_NORMAL_MODE                  00000000
CONF_RADIO_MODE                   00000002
CONF_TOGGLE_MODE                  00000001
CREN                              00000004
CSRC                              00000007
CURRENT_BANK                      00000003
CURRENT_PAGE                      00000000
CheckForDeleteRequest             000001E5
CheckForPgmMode                   0000013C
CheckForRadioAssignment           00000752
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 168


SYMBOL TABLE
  LABEL                             VALUE 

CheckIfPinExit                    00000599
CheckIfPinIsInputOnly             00000578
CheckIfProhibited                 
CheckNextWord                     000006BE
CheckPinDelete                    000001F4
ClearAllOutputs                   00000286
ClearBitInOutputMask              0000055E
ClearPinFromTable                 0000066C
ClearRadioChannels                00000688
ClearSystem                       00000298
ClearTableOutputLevels            00000726
ColdStart                         00000000
Cont                              00000055
Counter                           00000025
Counter2                          00000042
CurrentConf                       00000040
CurrentPin                        0000005D
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DEAD_PASSES                       0000002D
DEAD_PRESC                        0000002D
DEAD_TIME_ms                      0000000A
DEBUG_BUILD                       00000000
DEBUG_ISR_ALIVE                   00000000
DELAYED_COUNT                     00000064
DELAYED_SAVE                      00000001
DELAYED_SETS                      00000001
D_A                               00000005
D_NOT_A                           00000005
DeactBiToggle                     0000070C
DeactBiToggleDelayed              0000070C
DeactRadio                        0000070C
DeactRadioNext                    0000070C
DeactRadioPrev                    0000070C
DeactStandard                     0000070A
DeactToggle                       0000070C
DeactivateOutputMask              00000700
DefineWriteNullCell               00000666
DelayedSaveTimer                  00000063
DelayedSetCount                   0000006A
DeleteModeHome                    000001EC
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
EEP_MEMORY_ADR                    00002100
EEP_SIZE                          00000080
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 169


SYMBOL TABLE
  LABEL                             VALUE 

EEP_START                         00000000
EXTENDED_PIN_SET                  00000003
EepFirstRunTest                   00000000
EepOutputPinsQuad                 00000001
EepromIdle                        
EepromReadW                       00000327
EepromSetAddress                  00000332
EepromWriteW                      00000313
F                                 00000001
FALSE                             00000000
FAR_CODE_PAGE                     00000800
FATAL_ALLREADY_EXISTS             00000003
FATAL_ILLEGAL                     00000005
FATAL_NO_MORE_ROOM                00000004
FATAL_REALTIME_STARVATION         00000007
FATAL_TRAP                        00000006
FERR                              00000002
FILE_BANKS                        00000004
FIRST_BIPHASE_HALF                00000000
FLASH_CODE_PAGE                   00000900
FLASH_FILE                        00000058
FLASH_STORE_ADRESS                0000095B
FLASH_STORE_ADRESS_END            000009DB
FLASH_TABLE                       00000001
FLASH_TABLE_SIZE                  00000080
FORCE_7_BIT_ADR                   0000007F
FSR                               00000004
Far_SetOutputsFromMasks           00000800
FatalError                        000002B3
FatalErrorCnt                     0000007D
FatalErrorFlags                   0000007E
FatalErrorMaster                  0000007C
FatalExists                       000001D2
FatalHalt                         
FatalNoRoomLeft                   000001CF
FatalStop                         000002B3
FilterHighBiToggleBootDelayPins   00000271
FindCodeAndConfAndPinInTable      0000062B
FindModePinInTable                00000648
FirstRunSetups                    0000028C
Flags                             00000024
FlashAddressNext                  00000909
FlashAddressPrev                  0000090E
FlashAdrHigh                      00000059
FlashAdrLow                       00000058
FlashDataLow                      0000005A
FlashRead                         00000914
FlashSetAdrZeroPage               00000900
FlashWrite                        0000092E
FlashWriteByteW                   0000092D
ForcePageAlign                    
FoundUnexpectedPin                0000052C
FromSonyAbort                     00000408
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 170


SYMBOL TABLE
  LABEL                             VALUE 

GCEN                              00000007
GFCC_NextWord                     0000073D
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
GetCodeAndConfExit                00000751
GetCodeAndConfExitNotFound        00000750
GetFirstCodeAndConf               00000739
GetFirstPinNumberFromIRCode       000006BB
GetNextCodeAndConf                0000074D
GetNextPinNumberFromIRCode        000006D4
I2C_725_BROADCAST_ADDRESS         00000034
I2C_725_CMD_LEVEL_HIGH            00000001
I2C_725_CMD_LEVEL_LOW             00000000
I2C_725_LEVEL_CHANGED_CMD_LEN     00000003
I2C_DATA                          00000005
I2C_ERROR_NACK                    00000000
I2C_MASTER_ASYNC                  
I2C_MAW                           000002E4
I2C_MAW_BUSY                      00000001
I2C_MAW_FINISHING                 00000002
I2C_MAW_IDLE                      00000000
I2C_MasterAsyncEngine             000002E4
I2C_MasterAsyncInit               000002D6
I2C_MawBusy                       000002F7
I2C_MawEnds                       00000312
I2C_MawFinishing                  0000030C
I2C_MawIdle                       000002EB
I2C_Public                        00000048
I2C_READ                          00000002
I2C_RX_COMPLETE                   00000001
I2C_START                         00000003
I2C_STOP                          00000004
I2C_TX_START                      00000002
I2C_TxAddress                     0000004C
I2C_TxCommand                     0000004D
I2C_TxData                        0000004E
I2C_TxIndex                       0000004A
I2C_TxJumpVector                  00000049
I2C_TxNofBytes                    0000004B
I2C_UpdateEnds                    0000010B
ICE                               00000000
IDLE_PRESC                        00000001
INDF                              00000000
INSTRUCTIONS_BETW_INTR            00000458
INSTRUCTION_FREQ_Hz               004C4B40
INSTRUCTION_PERIOD_ns             000000C8
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTERUPT                          00000004
INTF                              00000001
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 171


SYMBOL TABLE
  LABEL                             VALUE 

IP_P_FORMAT_H                     00000001
IP_P_FORMAT_L                     00000000
IRJumpVector                      0000006B
IRP                               00000007
IRPreIdle                         00000354
IRPrivateFlags                    00000070
IRPrivateFlags_2                  00000072
IRPublicFlags                     00000071
IRTimeoutHigh                     00000073
IRTimeoutLow                      00000074
IR_Abort                          00000408
IR_BUSY                           00000003
IR_DATA_SENT                      00000002
IR_DEBUG_SAMPLE_TIME              00000000
IR_Ends                           00000480
IR_EndsSetTicks                   00000484
IR_EndsSetTicksQuart              00000483
IR_FORMAT_HIGH                    00000001
IR_FORMAT_LO                      00000000
IR_HitCounter                     00000079
IR_IDLE                           00000001
IR_Idle                           0000035B
IR_IsrCode                        
IR_MIN_NOF_CODES                  00000002
IR_NEW_CODE                       00000003
IR_PRE_IDLE                       00000000
IR_PanaAdjVal                     00000078
IR_PanaCount                      00000077
IR_PrevHigh                       00000076
IR_PrevLow                        00000075
IR_READY                          00000004
IR_READY_PENDING                  00000004
IR_RECIEVER_ACTIVE_HIGH           00000000
IR_TIMEOUT                        00000002
IR_Timing                         
IR_Variables                      
IR_WAITING_FOR_TIMEOUT            00000000
IR_Zero                           00000346
IR_mark                           00000342
ISRSlowPrescalerCnt               0000002C
ISR_FREERUN_FREQ_Hz               00000989
ISR_FREQ_HIGH_Hz                  000011B0
ISR_FREQ_Hz                       00001190
ISR_FREQ_LOW_Hz                   00001170
ISR_FREQ_MOD_256_Hz               00000011
ISR_PERIOD_ERROR_ns               FFFC9B2D
ISR_PERIOD_MOD_256_us             0000DE6B
ISR_PERIOD_ns                     000364D3
ISR_REQ_PERIOD_ns                 00000000
ISR_SLOW_PRESCALER                00000095
ISR_SLOW_TIMER_Hz                 0000001E
InitPanasonic                     00000444
InitializeAllOutputs              00000277
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 172


SYMBOL TABLE
  LABEL                             VALUE 

InlineAsciiHeader                 
InstallSilence                    000003BC
InstallSony                       00000389
IntrContextP                      0000007E
IntrContextS                      0000007C
IntrContextW                      0000007D
IntrExit                          00000492
IntrRutine                        00000337
JustStarted                       000003DF
KEY_DEBOUNCE_TIME                 00000005
KeyReleaseCnt                     00000064
LED_CLOSING                       00000005
LED_INV_PIN                       00000000
LED_INV_PORT                      00000005
LED_ON                            00000004
LED_PIN                           00000007
LED_PORT                          00000006
Led                               00000210
LedDisable                        0000020C
LedEnable                         00000203
LedFlags                          00000024
LedFlasher                        000001D5
LedOff                            
LedOn                             
LedPrescaler                      0000002B
LedPreset                         0000002A
LedToggle                         
LocalTemp                         00000046
LocateBiTogglePins                0000022D
LocateRadioNextPrevPins           00000276
LookForShortedPins                00000499
LookForShortedPinsExit            00000550
LoopAllFour                       00000230
LoopedISR                         00000337
MAKE_BEFORE_BREAK_RADIO_NEXT      0000000F
MAKE_BEFORE_BREAK_TICKS           00000004
MAX_ISR_TOLL_PROMILLE             00000014
MDelay_4us_sequence               
MDelay_Xms                        
MODE_TABLE_CONF                   00000001
MZeroFileRegs                     
MainLoop                          00000097
MasterCounter                     00000041
ModeConf2Int                      000006DA
ModeInt2Conf                      000006DC
NOF_CONF_MODES                    00000005
NOF_PROGRAM_PAGES                 00000002
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 173


SYMBOL TABLE
  LABEL                             VALUE 

NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NewIrHighByte                     00000032
NewIrLowByte                      00000031
NewModeBlink                      00000193
NextRadioPin                      000006A3
NoExtended                        00000135
OERR                              00000001
OPTION_REG                        00000081
OutputMaskTemp                    0000005F
OutputsMask32                     00000026
P                                 00000004
PANA_1                            0000000C
PANA_ADJ                          0000000D
PANA_ALIGN_RTCC_COUNTS            000000D9
PANA_ALIGN_SAMPLES_PER_BIT        00000004
PANA_INIT                         0000000B
PANA_SAMPLES_PER_BIT              00000002
PANA_TIMEOUT_PASSES               000001D8
PANA_TIMEOUT_ms                   00000069
PANA_TO_PANA_RTCC_COUNTS          00000088
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIN0                              00000002
PIN0_PORT                         00000007
PIN1                              00000005
PIN10                             00000003
PIN10_PORT                        00000006
PIN11                             00000003
PIN11_PORT                        00000005
PIN12                             00000004
PIN12_PORT                        00000006
PIN13                             00000002
PIN13_PORT                        00000005
PIN14                             00000005
PIN14_PORT                        00000006
PIN15                             00000001
PIN15_PORT                        00000005
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 174


SYMBOL TABLE
  LABEL                             VALUE 

PIN1_PORT                         00000007
PIN2                              00000001
PIN2_PORT                         00000007
PIN3                              00000006
PIN3_PORT                         00000007
PIN4                              00000000
PIN4_PORT                         00000007
PIN5                              00000007
PIN5_PORT                         00000007
PIN6                              00000000
PIN6_PORT                         00000006
PIN7                              00000001
PIN7_PORT                         00000006
PIN8                              00000005
PIN8_PORT                         00000005
PIN9                              00000002
PIN9_PORT                         00000006
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PROGRAM_MODE_ON                   00000001
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
Pana1                             00000453
PanaAbort                         00000408
PanaAbortTest                     0000046D
PanaCarrier                       0000045B
PanaEnds                          00000486
PanaInitAdj                       00000470
Pana_Adj                          00000477
Pana_Init                         0000044E
PeekTableCell                     000005F0
PeekTableCellIRLow                000005E3
PeekTableCellPin                  000005D5
PicFlashCode                      
PicFlashDataSize                  00000003
PicFlashVariables14bit            
PicFlashVariables8bit             
Pin                               00000030
PokeTableCell                     000005AF
PrescalerToTMR0                   
PrescalerToWDT                    
PresetTimers                      000003E7
PrevRadioPin                      000006AF
ProgrammingRequest                00000186
R                                 00000002
RA0                               00000000
RA1                               00000001
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 175


SYMBOL TABLE
  LABEL                             VALUE 

RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RAM_BANK0_LAST                    0000007F
RAM_BANK0_SIZE                    00000060
RAM_BANK0_START                   00000020
RAM_BANK1_LAST                    000000FF
RAM_BANK1_SIZE                    00000060
RAM_BANK1_START                   000000A0
RAM_BANKS                         00000002
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC5Counter                        0000006C
RC5High                           0000006E
RC5Low                            0000006D
RC5PIN                            00000006
RC5PORT                           00000006
RC5Presc                          0000006F
RC5_AIR_TIME_us                   00005DB5
RC5_Abort                         00000408
RC5_BIT_TIME_us                   000006F1
RC5_CHKSILENCE                    00000005
RC5_CheckSilence                  000003C2
RC5_DATA_CLOCK_Hz                 00008CA0
RC5_DEADTIME                      00000006
RC5_DeadTime                      000003EE
RC5_Ends                          0000048B
RC5_FIRST                         00000002
RC5_First                         00000384
RC5_HALF                          00000003
RC5_Half                          00000392
RC5_LAST                          00000004
RC5_Last                          00000398
RC5_NO_ERROR_CHECK                00000000
RC5_PREV_TOGGLE_BIT               00000007
RC5_RAM_USAGE                     0000000F
RC5_REPEAT_INTERVAL_us            0001BC40
RC5_TIMEOUTTEST                   00000001
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 176


SYMBOL TABLE
  LABEL                             VALUE 

RC5_TIMEOUT_PASSES                000001B9
RC5_TIMEOUT_ms                    00000062
RC5_TOGGLE_BIT                    00000006
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RELATIVE_FLASH_ADDRESS_CODE       
RELEASE                           00000001
RELEASE_BUILD                     00000001
REQUESTED_ISR_FREQ_Hz             00001195
RESET                             00000000
ROMSTART                          00000008
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RTCC_FREQ_Hz                      00098968
RTCC_PERIOD_ns                    00000640
RTCC_RELOAD                       00000075
RTCC_RELOAD_256                   0000752B
RTCC_SUB_LOAD                     0000008B
RT_RC5_Clr                        000000B3
RT_RC5_Ends                       000000B4
RT_TimeoutTest                    000000B4
RT_no_timeout                     000000CF
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
Radio                             000006EE
RadioNext                         000006FB
RadioPinActivated                 00000037
RadioPrescaler                    00000038
RadioPrev                         000006FC
ReadModeConf                      000006D9
ReadPicEeprom                     
Read_Conf_Mode                    0000003D
Read_Conf_Pin                     0000003F
Read_High                         0000002E
Read_Low                          0000002D
RealtimeTickCounter               00000023
ReservedIceBreaker                0000007F
ResetSerialTestMask               000001FB
ResetTable                        0000065B
RestoreOutputLevelMask            0000072C
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 177


SYMBOL TABLE
  LABEL                             VALUE 

ReverseBitInOutputMask            0000056B
RtccReloadValue                   00000044
RunMode                           00000147
RunModeEnds                       00000170
RunTime                           0000008D
S                                 00000003
SAMPLES_PER_BIT                   00000008
SAMPLE_PERIOD_ns                  000363AD
SECOND_LAST                       00000006
SEN                               00000000
SER_Index                         00000057
SINGLE_PIN                        00000000
SINGLE_PIN_ICEBREAKER             00000000
SLEEP_ISR_PERIOD_us               00000379
SLEEP_ISR_PRESC                   00000004
SLEEP_RX_STABLE_CNT               00000000
SLEEP_RX_STABLE_us                000001F4
SLEEP_TIMEOUT_CNT                 00000092
SLEEP_TIMEOUT_us                  0001FBD0
SMP                               00000007
SONY_1                            00000008
SONY_2                            00000009
SONY_3                            0000000A
SONY_ALIGN_RTCC_COUNTS            000000D9
SONY_ALIGN_SAMPLES_PER_BIT        00000002
SONY_INIT                         00000007
SONY_SAMPLES_PER_BIT              00000002
SONY_TEST                         00000003
SONY_TIMEOUT_PASSES               000000E1
SONY_TIMEOUT_ms                   00000032
SONY_TO_SONY_RTCC_COUNTS          000000BA
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STANDARD_PINS                     00000001
STATES_PER_4us                    00000000
STATE_TIME_ns                     000000C8
STATUS                            00000003
STD_ICEBREAKER                    00000000
SYNC                              00000004
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 178


SYMBOL TABLE
  LABEL                             VALUE 

SaveCurrentOutputLevels           0000070D
SaveNewData                       000003E3
SaveNewSerialState                00000102
SerBitMask32                      00000053
SerLowIsHigh                      000000FD
SerOutputsMaskCopy32              0000004F
SerialCopyTemp                    0000005E
SerialMaskTemp                    00000060
SetBank0                          
SetBank0Auto                      
SetBank1                          
SetBank1Auto                      
SetBank2                          
SetBank2Auto                      
SetBank3                          
SetBank3Auto                      
SetBiToggleEnds                   0000086F
SetBitInOutputMask                00000551
SetBnkA                           
SetBnkF                           
SetOutputPin                      
SetOutputsFromMasks               0000076C
SetOutputsNormalMode              00000853
SetPage0                          
SetPage0Auto                      
SetPage1                          
SetPgeF                           
SetTablePointer                   000005AA
ShiftTempQuad                     00000033
SignalProgrammingMode             00000141
SilenceAbort                      00000408
SkipBit1                          00000805
SkipBit2                          0000080A
SkipRC5Active                     
SkipRC5Quiet                      
SleepSemaphore                    00000045
SonyAbort                         00000412
SonyHigh                          00000433
SonyInit                          00000415
SonyRxComplete                    00000441
SonyStartOK                       00000426
Sony_1                            0000041F
Sony_2                            00000429
Sony_3                            00000438
Sony_Ends                         00000489
Standard                          000006E8
SubCallParameter                  00000047
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 179


SYMBOL TABLE
  LABEL                             VALUE 

T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TABLE_CELL_BYTES                  00000004
TABLE_NOF_CELLS                   00000020
TEWPC                             000006FE
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR0_PRESC_VAL                    00000008
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 180


SYMBOL TABLE
  LABEL                             VALUE 

TRISC7                            00000007
TRMT                              00000001
TRUE                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
T_RC5_Ends                        000000C4
TablePointer                      00000039
TempIndex                         0000002F
TempIndex2                        00000043
TempStack                         0000005C
Temporary                         0000005B
TestForBootDelay                  00000259
TestIfCellValid                   0000067C
TestOutputPin                     
TimedCodeEnds                     0000017B
Toggle                            000006EB
TrisA                             00000000
TrisB                             00000040
TrisC                             00000018
TypeEnds                          000006FF
TypeEndsWithPrescaler             000006FD
UA                                00000001
UserPgmEnds                       00000170
VALUE_CONF_BI_TOGGLE_MODE         00000003
VALUE_CONF_BI_TOGGLE_MODE_BOOT_D  00000004
VERSION                           00000024
W                                 00000000
WAITING_FOR_DEBOUNCE              00000002
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WaitForRelease                    0000017C
WaitForRequest                    00000181
WaitingForSwitchDebounce          0000016A
WritePicEeprom                    
WritePicWait                      
Write_Conf_Mode                   0000003C
Write_Conf_Pin                    0000003E
Write_High                        0000003B
Write_Low                         0000003A
XTAL                              01312D00
Z                                 00000002
ZERO_PASSES                       00000005
ZERO_PRESC                        00000004
ZERO_TIME_ms                      00000005
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 181


SYMBOL TABLE
  LABEL                             VALUE 

_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F873                          00000001
__PAGE__                          000007FF
__bank                            00000000
__page                            00000000
_n_exit                           000006AE
_next_radio_p                     000006A5
_not@12                           00000580
_not@13                           00000587
_not@14                           0000058E
_not@15                           00000595
_p_exit                           000006BA
_prev_radio_p                     000006B1
add_pin                           000000A3
anotherblink                      000002BB
bitoggle_boot_delay_pin           00000160
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 182


SYMBOL TABLE
  LABEL                             VALUE 

bitoggle_pin                      00000160
cleartrisbit                      
code_is_new                       000003D4
code_req_wait                     000001A6
crc_active                        0000069D
crc_next                          0000069F
decade                            00000003
define_pana                       00000400
define_rc5                        000003F6
define_sony                       000003FB
di                                
di_fast                           
dsasda                            00000117
ei                                
ei_clear                          
etst_next_wod                     0000062E
etst_next_wor                     0000065F
etst_next_word                    0000061D
exit_bitoggle                     0000054E
false                             00000000
fatal_forever                     000002B9
fatal_loop                        000002B3
fcc_not_this                      00000643
first_on                          0000039E
flash_loop                        000001D6
fmpt_exit                         0000065A
fmpt_next                         0000064C
fmpt_not_this                     00000656
forev                             000001F1
got_a_code                        000001B5
gotya                             00000001
has_data                          00000686
install_idle                      00000404
ir_dis_loop                       000000BD
jumpz                             
led_close                         0000022A
led_high                          00000222
led_pulse_again                   00000197
led_signal_ends                   00000340
level_is_low                      000003C4
level_ok                          000003A1
load_pana                         00000466
mask                              00000027
msDelay                           0000029C
next_radio                        0000068B
next_ram                          0000007A
no_12_set                         0000085A
no_13_set                         00000861
no_14_set                         00000868
no_15_set                         0000086F
no_b                              00000362
no_delayed                        00000121
no_double                         00000461
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 183


SYMBOL TABLE
  LABEL                             VALUE 

no_pending                        00000379
no_radio                          0000017B
no_save_at_exit                   000000CE
no_save_at_start                  000000B3
no_selection                      00000181
no_wrap_yet                       000000DB
not@12                            00000536
not@13                            0000053D
not@14                            00000544
not@15                            0000054B
not_enough                        000003E3
not_null_cell                     00000626
not_thisr                         00000679
outta_here                        000006D8
pin_is_input                      00000596
pin_is_output                     00000598
radio_next_pin                    00000160
radio_pin                         00000160
radio_prev_pin                    00000160
ram                               00000020
rc5_next_bit                      000003B3
rc5_next_silence                  000003EC
rclr_next_word                    00000670
reload_wait                       00000167
remap_bitoggle                    0000054C
rtol_load_next                    00000731
run_again                         0000014D
save_at_exit                      000000CE
scol_loop                         0000070F
setoption                         
settris                           
settrisbit                        
setup_next                        00000302
setup_stop                        00000304
shift_again                       000005A1
still_selected                    0000017C
t1                                00000020
t2                                00000021
t3                                00000022
test_timeout                      0000036F
this_is_equal                     00000723
true                              00000001
updatez                           
xtal_hi                           00000002
xtal_mill                         00000000
MPASM 5.87                           725.ASM   12-16-2020  23:35:01         PAGE 184


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXX-XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXX- ----------------
0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XX--------------
0900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940 : XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  2107
Program Memory Words Free:  1989


Errors   :     0
Warnings :     2 reported,     0 suppressed
Messages :     5 reported,     0 suppressed

